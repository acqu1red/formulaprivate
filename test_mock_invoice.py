#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å –∑–∞–≥–ª—É—à–∫–æ–π –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
"""

import requests
import json
from datetime import datetime

def test_mock_invoice():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —Å –∑–∞–≥–ª—É—à–∫–æ–π"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —Å –∑–∞–≥–ª—É—à–∫–æ–π...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps
        final_data = {
            "step": "final_data",
            "email": "test@example.com",
            "tariff": "1_month",
            "price": 50.0,
            "userId": "123456789"
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(final_data, indent=2)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ webhook
        webhook_data = {
            "update_id": int(datetime.now().timestamp()),
            "message": {
                "message_id": 1,
                "from": {
                    "id": 123456789,
                    "first_name": "Test",
                    "username": "testuser",
                    "is_bot": False
                },
                "chat": {
                    "id": 123456789,
                    "type": "private"
                },
                "date": int(datetime.now().timestamp()),
                "web_app_data": {
                    "data": json.dumps(final_data),
                    "button_text": "–û–ø–ª–∞—Ç–∏—Ç—å"
                }
            }
        }
        
        response = requests.post(
            "https://formulaprivate-productionpaymentuknow.up.railway.app/webhook",
            json=webhook_data,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üì° –û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("üìã –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ Railway –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return False

if __name__ == '__main__':
    success = test_mock_invoice()
    if success:
        print("üéâ –¢–µ—Å—Ç —Å –∑–∞–≥–ª—É—à–∫–æ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Railway –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å Lava Top API")
    else:
        print("‚ùå –¢–µ—Å—Ç —Å –∑–∞–≥–ª—É—à–∫–æ–π –Ω–µ –ø—Ä–æ—à–µ–ª!")
