#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini Apps
"""

import json
import base64

def test_mini_apps_data_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini Apps"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini Apps...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ—Ç Mini Apps)
    test_data = {
        "step": "final_data",
        "email": "test@example.com",
        "tariff": "1_month",
        "price": 50.0,
        "userId": "123456789"
    }
    
    print(f"üì§ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(test_data, indent=2)}")
    
    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç Mini Apps)
    json_string = json.dumps(test_data)
    base64_data = base64.b64encode(json_string.encode('utf-8')).decode('utf-8')
    
    print(f"üì§ Base64 –¥–∞–Ω–Ω—ã–µ: {base64_data}")
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—à –±–æ—Ç)
    try:
        decoded_data = base64.b64decode(base64_data).decode('utf-8')
        print(f"üì§ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {decoded_data}")
        
        parsed_data = json.loads(decoded_data)
        print(f"üì§ –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(parsed_data, indent=2)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        if parsed_data.get('step') == 'final_data':
            print("‚úÖ –®–∞–≥ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥ –¥–∞–Ω–Ω—ã—Ö")
            
        if parsed_data.get('email'):
            print("‚úÖ Email –ø–æ–ª—É—á–µ–Ω")
        else:
            print("‚ùå Email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
        if parsed_data.get('tariff'):
            print("‚úÖ Tariff –ø–æ–ª—É—á–µ–Ω")
        else:
            print("‚ùå Tariff –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
        if parsed_data.get('price'):
            print("‚úÖ Price –ø–æ–ª—É—á–µ–Ω")
        else:
            print("‚ùå Price –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
        if parsed_data.get('userId'):
            print("‚úÖ UserId –ø–æ–ª—É—á–µ–Ω")
        else:
            print("‚ùå UserId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_api_endpoint_with_mini_apps_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoint —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Mini Apps"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Mini Apps...")
    
    import requests
    
    # –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—à –±–æ—Ç
    api_data = {
        "user_id": "123456789",
        "email": "test@example.com",
        "tariff": "1_month",
        "price": 50.0
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API: {json.dumps(api_data, indent=2)}")
    
    try:
        response = requests.post(
            "https://formulaprivate-productionpaymentuknow.up.railway.app/api/create-payment",
            json=api_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"üì° API –æ—Ç–≤–µ—Ç: {response.status_code}")
        print(f"üì° –û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç: {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            payment_url = result.get('payment_url')
            
            if payment_url:
                print(f"‚úÖ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω: {payment_url}")
                return True
            else:
                print("‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini Apps")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    success1 = test_mini_apps_data_processing()
    
    # –¢–µ—Å—Ç 2: API endpoint
    success2 = test_api_endpoint_with_mini_apps_data()
    
    print("\n" + "=" * 60)
    print("üéØ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {'–£—Å–ø–µ—à–Ω–æ' if success1 else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ API endpoint: {'–£—Å–ø–µ—à–Ω–æ' if success2 else '–û—à–∏–±–∫–∞'}")
    
    if success1 and success2:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üì± Mini Apps –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
