#!/usr/bin/env python3
import os
import requests
import json

def check_env_vars():
    print("=== –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===")
    vars_to_check = [
        'TELEGRAM_BOT_TOKEN',
        'WEBHOOK_URL', 
        'WEBHOOK_SECRET',
        'LAVA_TOP_API_KEY',
        'LAVA_OFFER_ID_BASIC'
    ]
    
    for var in vars_to_check:
        value = os.getenv(var, '')
        if value:
            if 'TOKEN' in var or 'KEY' in var:
                print(f"‚úÖ {var}: {value[:10]}...{value[-10:]}")
            else:
                print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ùå {var}: –ù–ï –ó–ê–î–ê–ù")

def check_telegram_bot():
    print("\n=== –ü–†–û–í–ï–†–ö–ê TELEGRAM –ë–û–¢–ê ===")
    token = os.getenv('TELEGRAM_BOT_TOKEN', '').strip()
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º getMe
        r = requests.get(f"https://api.telegram.org/bot{token}/getMe", timeout=10)
        if r.ok:
            data = r.json()
            print(f"‚úÖ –ë–æ—Ç: {data.get('result', {}).get('username', 'unknown')}")
            print(f"‚úÖ –ò–º—è: {data.get('result', {}).get('first_name', 'unknown')}")
        else:
            print(f"‚ùå getMe –æ—à–∏–±–∫–∞: {r.status_code} {r.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ getMe: {e}")

def check_webhook():
    print("\n=== –ü–†–û–í–ï–†–ö–ê WEBHOOK ===")
    token = os.getenv('TELEGRAM_BOT_TOKEN', '').strip()
    webhook_url = os.getenv('WEBHOOK_URL', '').strip()
    
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return
    
    if not webhook_url:
        print("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
        r = requests.get(f"https://api.telegram.org/bot{token}/getWebhookInfo", timeout=10)
        if r.ok:
            data = r.json()
            current_url = data.get('result', {}).get('url', '')
            expected_url = f"{webhook_url.rstrip('/')}/webhook"
            
            print(f"üì° –¢–µ–∫—É—â–∏–π webhook: {current_url}")
            print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π webhook: {expected_url}")
            
            if current_url == expected_url:
                print("‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print("‚ùå Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
                print("üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º webhook...")
                fix_webhook(token, expected_url)
        else:
            print(f"‚ùå getWebhookInfo –æ—à–∏–±–∫–∞: {r.status_code} {r.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: {e}")

def fix_webhook(token, target_url):
    webhook_secret = os.getenv('WEBHOOK_SECRET', 'FORMULA_TMP_SECRET')
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        r_del = requests.post(f"https://api.telegram.org/bot{token}/deleteWebhook",
                              json={"drop_pending_updates": False}, timeout=10)
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ webhook: {r_del.status_code}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        payload = {
            "url": target_url,
            "secret_token": webhook_secret,
            "max_connections": 40,
            "allowed_updates": ["message", "callback_query"]
        }
        r_set = requests.post(f"https://api.telegram.org/bot{token}/setWebhook",
                              json=payload, timeout=10)
        
        if r_set.ok:
            data = r_set.json()
            if data.get('ok'):
                print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {data}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ setWebhook: {r_set.status_code} {r_set.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook: {e}")

def test_webhook_endpoint():
    print("\n=== –¢–ï–°–¢ WEBHOOK ENDPOINT ===")
    webhook_url = os.getenv('WEBHOOK_URL', '').strip()
    
    if not webhook_url:
        print("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω")
        return
    
    test_url = f"{webhook_url.rstrip('/')}/webhook-info"
    print(f"üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_url}")
    
    try:
        r = requests.get(test_url, timeout=10)
        if r.ok:
            print("‚úÖ Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω")
            try:
                data = r.json()
                print(f"üìä –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
            except:
                print(f"üìÑ –û—Ç–≤–µ—Ç: {r.text}")
        else:
            print(f"‚ùå Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {r.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoint: {e}")

if __name__ == "__main__":
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TELEGRAM WEBHOOK")
    print("=" * 50)
    
    check_env_vars()
    check_telegram_bot()
    check_webhook()
    test_webhook_endpoint()
    
    print("\n" + "=" * 50)
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã –≤ Railway")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ WEBHOOK_URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ–º–µ–Ω")
    print("3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å'")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Railway –Ω–∞ –Ω–∞–ª–∏—á–∏–µ 'HTTP IN:' —Å–æ–æ–±—â–µ–Ω–∏–π")
