#!/usr/bin/env python3
"""
Telegram Bot with Webhook support for Railway deployment
"""

import os
import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, CallbackContext, ChatMemberHandler
from datetime import datetime, timedelta
import requests
from supabase import create_client, Client
from channel_manager import ChannelManager
from flask import Flask, request, jsonify

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ email
try:
    from email_invitation import send_email_invitation
except ImportError:
    def send_email_invitation(email, tariff, subscription_id):
        print(f"üìß Email –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞: {email}, —Ç–∞—Ä–∏—Ñ: {tariff}")
        return True

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health check
app = Flask(__name__)

# Health check endpoint –¥–ª—è Railway
@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "healthy", "service": "telegram-bot-webhook"})

# Webhook endpoint –¥–ª—è Telegram
@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        data = request.get_json()
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞
        if hasattr(app, 'telegram_app'):
            app.telegram_app.process_update(Update.de_json(data, app.telegram_app.bot))
        
        return jsonify({"status": "ok"})
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# Webhook endpoint –¥–ª—è Lava Top
@app.route('/lava-webhook', methods=['GET', 'POST'])
def lava_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Lava Top"""
    try:
        print("=" * 50)
        print("üì• –ü–û–õ–£–ß–ï–ù WEBHOOK –û–¢ LAVA TOP!")
        print("=" * 50)
        print(f"üìã Headers: {dict(request.headers)}")
        print(f"üìã Method: {request.method}")
        print(f"üìã URL: {request.url}")
        print(f"üìã Content-Type: {request.content_type}")
        print(f"üìã Content-Length: {request.content_length}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É API key –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        api_key_header = request.headers.get('X-API-Key') or request.headers.get('Authorization')
        if api_key_header:
            # –£–±–∏—Ä–∞–µ–º 'Bearer ' –µ—Å–ª–∏ –µ—Å—Ç—å
            if api_key_header.startswith('Bearer '):
                api_key_header = api_key_header[7:]
            
            print(f"üîê API Key –ø–æ–ª—É—á–µ–Ω: {api_key_header[:10]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API key
            expected_api_key = 'lava_webhook_secret_2024_secure_key'
            if api_key_header != expected_api_key:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API key")
                # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                print("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        else:
            print("‚ö†Ô∏è API key –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö")
            print("üîç –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:", dict(request.headers))
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print("‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º GET –∏ POST –∑–∞–ø—Ä–æ—Å—ã
        if request.method == 'GET':
            print("üîç GET –∑–∞–ø—Ä–æ—Å –æ—Ç Lava Top - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ webhook")
            print("üîç GET –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", request.args.to_dict())
            print("üîç GET –¥–∞–Ω–Ω—ã–µ:", request.get_data())
        elif request.method != 'POST':
            return jsonify({"status": "error", "message": "Only GET and POST methods allowed"}), 405
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = request.get_json()
        print(f"üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {data}")
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ form data
        if not data:
            data = request.form.to_dict()
            print(f"üìã –î–∞–Ω–Ω—ã–µ –∏–∑ form: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment_status = data.get('status')
        order_id = data.get('order_id')
        amount = data.get('amount')
        currency = data.get('currency')
        metadata = data.get('metadata', {})
        
        # –ï—Å–ª–∏ metadata —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        if isinstance(metadata, str):
            try:
                import json
                metadata = json.loads(metadata)
            except:
                metadata = {}
        
        user_id = metadata.get('user_id')
        tariff = metadata.get('tariff')
        email = metadata.get('email')
        
        print(f"üí∞ –°—Ç–∞—Ç—É—Å: {payment_status}, –ó–∞–∫–∞–∑: {order_id}, –°—É–º–º–∞: {amount} {currency}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, –¢–∞—Ä–∏—Ñ: {tariff}, Email: {email}")
        
        if payment_status == 'success':
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            subscription_id = create_subscription(user_id, email, tariff, amount, currency, order_id, metadata)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–µ–∑–¥–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
            
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–µ—Å–ª–∏ –µ—Å—Ç—å user_id)
            if user_id:
                print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                send_success_message_to_user(user_id, tariff, subscription_id)
            else:
                print("‚ö†Ô∏è user_id –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram")
            
            # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ email (–µ—Å–ª–∏ –µ—Å—Ç—å email)
            if email:
                print(f"üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ email {email}")
                send_email_invitation(email, tariff, subscription_id)
            else:
                print("‚ö†Ô∏è Email –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ email")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
            sent_to = []
            if user_id:
                sent_to.append("Telegram")
            if email:
                sent_to.append("Email")
            
            if sent_to:
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {', '.join(sent_to)}")
            else:
                print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –Ω–∏ user_id, –Ω–∏ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
                print(f"üìã –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            send_admin_notification(user_id or "unknown", email, tariff, amount, currency, order_id)
            
            print("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª: {payment_status}")
        
        return jsonify({"status": "ok"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Lava Top webhook: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Lava Top webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '7593794536:AAGSiEJolK1O1H5LMtHxnbygnuhTDoII6qc')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Railway
WEBHOOK_PATH = '/webhook'

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
# –ü–æ–ª—É—á–∞–µ–º ADMIN_IDS –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
admin_ids_str = os.getenv('ADMIN_IDS', '708907063,7365307696')
ADMIN_IDS = [int(id.strip()) for id in admin_ids_str.split(',') if id.strip()]
ADMIN_USERNAMES = ['your_admin_username']  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ username

# Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL', 'https://uhhsrtmmuwoxsdquimaa.supabase.co')
SUPABASE_KEY = os.getenv('SUPABASE_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8')
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
channel_manager = ChannelManager()

# Lava Top –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LAVA_SHOP_ID = os.getenv('LAVA_SHOP_ID', '1b9f3e05-86aa-4102-9648-268f0f586bb1')
LAVA_SECRET_KEY = os.getenv('LAVA_SECRET_KEY', 'whjKvjpi2oqAjTOwfbt0YUkulXCxjU5PWUJDxlQXwOuhOCNSiRq2jSX7Gd2Zihav')

def create_subscription(user_id, email, tariff, amount, currency, order_id, metadata):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        tariff_durations = {
            '1month': 30,
            '3months': 90,
            '6months': 180,
            '12months': 365
        }
        
        duration_days = tariff_durations.get(tariff, 30)
        end_date = datetime.utcnow() + timedelta(days=duration_days)
        
        subscription_data = {
            'user_id': str(user_id),
            'email': email,
            'tariff': tariff,
            'amount': amount,
            'currency': currency,
            'order_id': order_id,
            'start_date': datetime.utcnow().isoformat(),
            'end_date': end_date.isoformat(),
            'status': 'active',
            'metadata': metadata
        }
        
        result = supabase.table('subscriptions').insert(subscription_data).execute()
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {result}")
        return result.data[0]['id'] if result.data else None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return None

def send_success_message_to_user(user_id, tariff, subscription_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üéâ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
–¢–∞—Ä–∏—Ñ: {tariff}

üîó <b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É:</b>
https://t.me/+6SQb4RwwAmZlMWQ6

‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {datetime.utcnow() + timedelta(days=30)}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–∞–Ω–∞–ª –§–æ—Ä–º—É–ª–∞.
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": user_id,
            "text": message,
            "parse_mode": "HTML"
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {url}")
        print(f"üì§ –î–∞–Ω–Ω—ã–µ: {data}")
        
        response = requests.post(url, json=data)
        print(f"üì§ –û—Ç–≤–µ—Ç: {response.status_code} - {response.text}")
        
        if response.status_code == 200:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")

def send_admin_notification(user_id, email, tariff, amount, currency, order_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:
        message = f"""
üí∞ <b>–ù–æ–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂!</b>

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}
üìß Email: {email}
üì¶ –¢–∞—Ä–∏—Ñ: {tariff}
üíµ –°—É–º–º–∞: {amount} {currency}
üÜî –ó–∞–∫–∞–∑: {order_id}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            data = {
                "chat_id": admin_id,
                "text": message,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, json=data)
            if response.status_code == 200:
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")

def check_and_remove_expired_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            current_time = datetime.utcnow().isoformat()
            result = supabase.table('subscriptions').select('*').eq('status', 'active').lt('end_date', current_time).execute()
            
            if not result.data:
                print("‚úÖ –ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
                return
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(result.data)} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
            
            for subscription in result.data:
                user_id = subscription['user_id']
                tariff = subscription['tariff']
                
                # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
                remove_user_from_channel(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                send_expired_subscription_message(user_id, tariff)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                supabase.table('subscriptions').update({'status': 'expired'}).eq('id', subscription['id']).execute()
                
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞")
                
        except Exception as table_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ subscriptions: {table_error}")
            print("üìã –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é SQL —Å–∫—Ä–∏–ø—Ç–∞.")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")

def remove_user_from_channel(user_id):
    """–ò—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞)"""
    try:
        # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
        channel_id = "@formula_channel"  # –∏–ª–∏ -100xxxxxxxxx
        
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/unbanChatMember"
        data = {
            "chat_id": channel_id,
            "user_id": user_id,
            "only_if_banned": False
        }
        
        # –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º (–µ—Å–ª–∏ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω)
        response = requests.post(url, json=data)
        
        # –ó–∞—Ç–µ–º –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/banChatMember"
        data = {
            "chat_id": channel_id,
            "user_id": user_id,
            "until_date": int((datetime.utcnow() + timedelta(seconds=30)).timestamp()),
            "revoke_messages": False
        }
        
        response = requests.post(url, json=data)
        if response.status_code == 200:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {e}")

def send_expired_subscription_message(user_id, tariff):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        message = f"""
‚è∞ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫.
–¢–∞—Ä–∏—Ñ: {tariff}

–ù–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:
"""
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É —Å Mini App
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", web_app=WebAppInfo(url="https://app.lava.top/ru/products/1b9f3e05-86aa-4102-9648-268f0f586bb1/7357f3c8-bd27-462d-831a-a1eefe4ccd09?currency=RUB"))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            "chat_id": user_id,
            "text": message,
            "parse_mode": "HTML",
            "reply_markup": reply_markup.to_dict()
        }
        
        response = requests.post(url, json=data)
        if response.status_code == 200:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

async def save_message_to_db(user, message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = {
            'user_id': str(user.id),
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'message_text': message.text if hasattr(message, 'text') else '–ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            'message_type': 'text' if hasattr(message, 'text') else 'media',
            'created_at': datetime.utcnow().isoformat()
        }
        
        result = supabase.table('user_messages').insert(data).execute()
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {result}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def handle_all_messages(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    message = update.message
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_message_to_db(user, message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    admin_message = f"üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
    admin_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}"
    if user.last_name:
        admin_message += f" {user.last_name}"
    if user.username:
        admin_message += f" (@{user.username})"
    admin_message += f"\nüÜî <b>ID:</b> {user.id}\n"
    
    if hasattr(message, 'text') and message.text:
        admin_message += f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message.text}\n"
    else:
        admin_message += f"üìé <b>–¢–∏–ø:</b> –ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
    
    admin_message += f"\n‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    keyboard = [
        [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=admin_message,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    content = build_start_content()
    await update.message.reply_text(content['text'], parse_mode='HTML', reply_markup=content['reply_markup'])

async def payment(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payment"""
    content = build_payment_content()
    await update.message.reply_text(content['text'], parse_mode='HTML', reply_markup=content['reply_markup'])

async def more_info(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /more_info"""
    content = build_more_info_content()
    await update.message.reply_text(content['text'], parse_mode='HTML', reply_markup=content['reply_markup'])

async def cancel_reply(update: Update, context: CallbackContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user
    
    if user.id not in ADMIN_IDS and (user.username is None or user.username not in ADMIN_USERNAMES):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    if 'waiting_for_reply' in context.user_data:
        del context.user_data['waiting_for_reply']
        if 'replying_to' in context.user_data:
            del context.user_data['replying_to']
        
        await update.message.reply_text("‚úÖ –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω")

async def admin_messages(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    user = update.effective_user
    
    if user.id not in ADMIN_IDS and (user.username is None or user.username not in ADMIN_USERNAMES):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        result = supabase.table('user_messages').select('*').order('created_at', desc=True).limit(10).execute()
        
        if not result.data:
            await update.message.reply_text("üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        message_text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        
        for msg in result.data:
            user_info = f"{msg['first_name']}"
            if msg['last_name']:
                user_info += f" {msg['last_name']}"
            if msg['username']:
                user_info += f" (@{msg['username']})"
            
            message_text += f"üë§ <b>{user_info}</b> (ID: {msg['user_id']})\n"
            message_text += f"üìù {msg['message_text'][:100]}...\n"
            message_text += f"‚è∞ {msg['created_at'][:19]}\n\n"
        
        await update.message.reply_text(message_text, parse_mode='HTML')
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

async def button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith('reply_'):
        user_id = query.data.split('_')[1]
        await handle_admin_reply(update, context, user_id)
    elif query.data.startswith('payment_'):
        await handle_payment_selection(update, context, query.data)
    elif query.data == 'lava_payment':
        await handle_lava_payment(update, context)
    elif query.data == 'more_info':
        content = build_more_info_content()
        await query.edit_message_text(content['text'], parse_mode='HTML', reply_markup=content['reply_markup'])

async def handle_payment_selection(update: Update, context: CallbackContext, payment_type: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    
    payment_options = {
        'payment_1month': {'duration': 30, 'label': '1 –º–µ—Å—è—Ü', 'amount': 1000},
        'payment_3months': {'duration': 90, 'label': '3 –º–µ—Å—è—Ü–∞', 'amount': 2500},
        'payment_6months': {'duration': 180, 'label': '6 –º–µ—Å—è—Ü–µ–≤', 'amount': 4500},
        'payment_12months': {'duration': 365, 'label': '12 –º–µ—Å—è—Ü–µ–≤', 'amount': 8000}
    }
    
    if payment_type not in payment_options:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–ª–∞—Ç—ã")
        return
    
    option = payment_options[payment_type]
    checkout_content = build_checkout_content(option['label'])
    
    await query.edit_message_text(
        checkout_content['text'],
        parse_mode='HTML',
        reply_markup=checkout_content['reply_markup']
    )

async def handle_lava_payment(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Lava Top"""
    try:
        user = update.effective_user
        print(f"üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ
        tariff = context.user_data.get('selected_tariff', '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π')
        amount = context.user_data.get('selected_amount', 50)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ Lava Top
        order_id = f"order_{user.id}_{int(datetime.now().timestamp())}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook
        metadata = {
            'user_id': str(user.id),
            'tariff': tariff,
            'email': user.email if hasattr(user, 'email') else None
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        pending_payment = {
            'order_id': order_id,
            'user_id': str(user.id),
            'tariff': tariff,
            'amount': amount,
            'currency': 'RUB',
            'status': 'pending',
            'created_at': datetime.utcnow().isoformat(),
            'metadata': metadata
        }
        
        try:
            supabase.table('pending_payments').insert(pending_payment).execute()
            print(f"‚úÖ –û–∂–∏–¥–∞—é—â–∏–π –ø–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {order_id}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î: {e}")
        
        # URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_url = f"https://app.lava.top/ru/products/{os.getenv('LAVA_SHOP_ID')}/7357f3c8-bd27-462d-831a-a1eefe4ccd09?currency=RUB&order_id={order_id}&metadata={json.dumps(metadata)}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
        message = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Lava Top</b>

–¢–∞—Ä–∏—Ñ: {tariff}
–°—É–º–º–∞: {amount} ‚ÇΩ
–ó–∞–∫–∞–∑: {order_id}

üîó <a href="{payment_url}">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
"""
        
        await update.callback_query.edit_message_text(
            text=message,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã: {e}")
        await update.callback_query.edit_message_text(
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def build_start_content():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start"""
    text = """
üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
‚Ä¢ ‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="payment_menu")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more_info")]
    ]
    
    return {
        'text': text,
        'reply_markup': InlineKeyboardMarkup(keyboard)
    }

def build_payment_content():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
    text = """
üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:</b>

‚Ä¢ 1 –º–µ—Å—è—Ü - 1000‚ÇΩ
‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - 2500‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 500‚ÇΩ)
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 4500‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 1500‚ÇΩ)
‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ - 8000‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 4000‚ÇΩ)
"""
    
    keyboard = [
        [InlineKeyboardButton("1 –º–µ—Å—è—Ü - 1000‚ÇΩ", callback_data="payment_1month")],
        [InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 2500‚ÇΩ", callback_data="payment_3months")],
        [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 4500‚ÇΩ", callback_data="payment_6months")],
        [InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ - 8000‚ÇΩ", callback_data="payment_12months")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    
    return {
        'text': text,
        'reply_markup': InlineKeyboardMarkup(keyboard)
    }

def build_more_info_content():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    text = """
‚ÑπÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

üìã <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ø–æ–¥–ø–∏—Å–∫—É:</b>
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏

üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
‚Ä¢ Email: support@example.com
‚Ä¢ Telegram: @support_username

üí° <b>–í–æ–ø—Ä–æ—Å—ã?</b>
–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
"""
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="payment_menu")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    
    return {
        'text': text,
        'reply_markup': InlineKeyboardMarkup(keyboard)
    }

def build_checkout_content(duration_label: str):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    text = f"""
üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>

üì¶ <b>–¢–∞—Ä–∏—Ñ:</b> {duration_label}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –°–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É

–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:
"""
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Lava Top", callback_data="lava_payment")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="payment_menu")]
    ]
    
    return {
        'text': text,
        'reply_markup': InlineKeyboardMarkup(keyboard)
    }

async def handle_admin_reply(update: Update, context: CallbackContext, user_id: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å' –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    admin_user = update.effective_user
    
    if admin_user.id not in ADMIN_IDS and (admin_user.username is None or admin_user.username not in ADMIN_USERNAMES):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    context.user_data['replying_to'] = user_id
    context.user_data['waiting_for_reply'] = True
    
    reply_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}</b>\n\n"
    reply_text += "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç. –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
    reply_text += "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
    
    await query.edit_message_text(text=reply_text, parse_mode='HTML')

async def check_expired_subscriptions(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    user = update.effective_user
    
    if user.id not in ADMIN_IDS and (user.username is None or user.username not in ADMIN_USERNAMES):
        await update.effective_message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    try:
        await channel_manager.remove_expired_users(context)
        
        await update.effective_message.reply_text(
            "‚úÖ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–∞.",
            parse_mode='HTML'
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        await update.effective_message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫:</b> {str(e)}",
            parse_mode='HTML'
        )

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ API
def check_payment_status(order_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API Lava Top"""
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {order_id}")
        
        # API Lava Top –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        api_url = f"https://api.lava.top/business/invoice/status"
        
        headers = {
            "Authorization": f"Bearer {os.getenv('LAVA_SECRET_KEY')}",
            "Content-Type": "application/json"
        }
        
        data = {
            "shop_id": os.getenv('LAVA_SHOP_ID'),
            "order_id": order_id
        }
        
        response = requests.post(api_url, json=data, headers=headers)
        print(f"üìã –û—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            status = result.get('status')
            print(f"üí∞ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}")
            return status == 'success', result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            return False, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False, None

def process_successful_payment(payment_data):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    try:
        print("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞!")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        order_id = payment_data.get('order_id')
        amount = payment_data.get('amount')
        currency = payment_data.get('currency')
        metadata = payment_data.get('metadata', {})
        
        # –ï—Å–ª–∏ metadata —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        if isinstance(metadata, str):
            try:
                import json
                metadata = json.loads(metadata)
            except:
                metadata = {}
        
        user_id = metadata.get('user_id')
        tariff = metadata.get('tariff', '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π')
        email = metadata.get('email')
        
        print(f"üí∞ –ó–∞–∫–∞–∑: {order_id}, –°—É–º–º–∞: {amount} {currency}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, –¢–∞—Ä–∏—Ñ: {tariff}, Email: {email}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        subscription_id = create_subscription(user_id, email, tariff, amount, currency, order_id, metadata)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–µ–∑–¥–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–µ—Å–ª–∏ –µ—Å—Ç—å user_id)
        if user_id:
            print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            send_success_message_to_user(user_id, tariff, subscription_id)
        else:
            print("‚ö†Ô∏è user_id –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram")
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ email (–µ—Å–ª–∏ –µ—Å—Ç—å email)
        if email:
            print(f"üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ email {email}")
            send_email_invitation(email, tariff, subscription_id)
        else:
            print("‚ö†Ô∏è Email –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ email")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        sent_to = []
        if user_id:
            sent_to.append("Telegram")
        if email:
            sent_to.append("Email")
        
        if sent_to:
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {', '.join(sent_to)}")
        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –Ω–∏ user_id, –Ω–∏ email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
            print(f"üìã –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {payment_data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        send_admin_notification(user_id or "unknown", email, tariff, amount, currency, order_id)
        
        print("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return False

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
def check_pending_payments():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏"""
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = supabase.table('pending_payments').select('*').eq('status', 'pending').execute()
        
        if not result.data:
            print("‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
            return
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(result.data)} –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
        
        for payment in result.data:
            order_id = payment.get('order_id')
            if order_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                is_success, payment_data = check_payment_status(order_id)
                
                if is_success:
                    print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {order_id} —É—Å–ø–µ—à–µ–Ω!")
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                    if process_successful_payment(payment_data):
                        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
                        supabase.table('pending_payments').delete().eq('order_id', order_id).execute()
                        print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {order_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö")
                else:
                    print(f"‚è≥ –ü–ª–∞—Ç–µ–∂ {order_id} –µ—â–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook...")
    print(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ ID: {ADMIN_IDS}")
    print(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ username: {ADMIN_USERNAMES}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.telegram_app = application # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ Flask
    
    print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("payment", payment))
    application.add_handler(CommandHandler("more_info", more_info))
    application.add_handler(CommandHandler("cancel", cancel_reply))
    application.add_handler(CommandHandler("messages", admin_messages))
    application.add_handler(CommandHandler("check_expired", check_expired_subscriptions))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(ChatMemberHandler(channel_manager.handle_chat_member_update))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_all_messages))
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook URL –¥–ª—è Railway
    webhook_url = os.getenv('RAILWAY_STATIC_URL', '')
    if webhook_url:
        print(f"üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {webhook_url}/webhook")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook URL —á–µ—Ä–µ–∑ requests (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        webhook_setup_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook"
        webhook_data = {
            "url": f"{webhook_url}/webhook",
            "secret_token": os.getenv('WEBHOOK_SECRET', 'telegram_webhook_secret_2024')
        }
        
        try:
            response = requests.post(webhook_setup_url, json=webhook_data)
            if response.status_code == 200:
                print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–ª–∞—Ç–µ–∂–µ–π
    import threading
    import time
    
    def subscription_checker():
        while True:
            try:
                check_and_remove_expired_subscriptions()
                time.sleep(6 * 60 * 60)  # 6 —á–∞—Å–æ–≤
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
                time.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def payment_checker():
        while True:
            try:
                check_pending_payments()
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
                time.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    subscription_thread = threading.Thread(target=subscription_checker, daemon=True)
    subscription_thread.start()
    print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    payment_thread = threading.Thread(target=payment_checker, daemon=True)
    payment_thread.start()
    print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω–∞")
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    port = int(os.getenv('PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == '__main__':
    main()
