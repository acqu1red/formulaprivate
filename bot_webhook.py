#!/usr/bin/env python3
"""
Telegram Bot with Webhook support for Railway deployment - FIXED VERSION
"""

import os
import logging
import requests
import json
import base64
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, CallbackContext, filters
from supabase import create_client, Client

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health check
app = Flask(__name__)

# Health check endpoint –¥–ª—è Railway
@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "healthy", "service": "telegram-bot-webhook"})

# –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
@app.route('/test', methods=['GET'])
def test_bot():
    return jsonify({
        "status": "ok",
        "message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "telegram_token": TELEGRAM_BOT_TOKEN[:20] + "...",
        "lava_shop_id": LAVA_SHOP_ID,
        "webhook_url": f"https://formulaprivate-productionpaymentuknow.up.railway.app/webhook"
    })

# Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook info
@app.route('/webhook-info', methods=['GET'])
def webhook_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook"""
    try:
        webhook_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getWebhookInfo"
        response = requests.get(webhook_url)
        webhook_data = response.json()
        
        print(f"üìã Webhook info: {webhook_data}")
        
        return jsonify({
            "status": "ok",
            "webhook_info": webhook_data,
            "bot_token": TELEGRAM_BOT_TOKEN[:20] + "...",
            "expected_url": "https://formulaprivate-productionpaymentuknow.up.railway.app/webhook",
            "current_url": webhook_data.get('result', {}).get('url', ''),
            "pending_updates": webhook_data.get('result', {}).get('pending_update_count', 0)
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# Endpoint –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
@app.route('/reset-webhook', methods=['GET'])
def reset_webhook():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        delete_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook"
        delete_response = requests.post(delete_url)
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ webhook: {delete_response.status_code} - {delete_response.text}")
        
        import time
        time.sleep(2)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        webhook_url = "https://formulaprivate-productionpaymentuknow.up.railway.app/webhook"
        set_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook"
        webhook_data = {
            "url": webhook_url,
            "secret_token": os.getenv('WEBHOOK_SECRET', 'Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c'),
            "max_connections": 40,
            "allowed_updates": ["message", "callback_query", "edited_message", "channel_post", "edited_channel_post", "inline_query", "chosen_inline_result", "shipping_query", "pre_checkout_query", "poll", "poll_answer", "my_chat_member", "chat_member", "chat_join_request"]
        }
        
        set_response = requests.post(set_url, json=webhook_data)
        print(f"üì° –û—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {set_response.status_code} - {set_response.text}")
        
        return jsonify({
            "status": "ok",
            "webhook_url": webhook_url,
            "delete_response": delete_response.json(),
            "set_response": set_response.json()
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# Webhook endpoint –¥–ª—è Telegram
@app.route('/webhook', methods=['GET', 'POST'])
def telegram_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram"""
    import sys
    sys.stdout.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π flush
    
    try:
        print("=" * 80, flush=True)
        print("üî• WEBHOOK –í–´–ó–í–ê–ù!", flush=True)
        print("üî• WEBHOOK –í–´–ó–í–ê–ù!", flush=True)
        print("üî• WEBHOOK –í–´–ó–í–ê–ù!", flush=True)
        print("=" * 80, flush=True)
        print("üì• –ü–û–õ–£–ß–ï–ù WEBHOOK –û–¢ TELEGRAM!", flush=True)
        print("=" * 50, flush=True)
        print(f"üìã Method: {request.method}", flush=True)
        print(f"üìã URL: {request.url}", flush=True)
        print(f"üìã Headers: {dict(request.headers)}", flush=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GET –∑–∞–ø—Ä–æ—Å—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
        if request.method == 'GET':
            print("‚úÖ GET –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook", flush=True)
            return jsonify({
                "status": "ok", 
                "message": "Telegram webhook endpoint –¥–æ—Å—Ç—É–ø–µ–Ω",
                "method": "GET",
                "timestamp": datetime.now().isoformat()
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram (—Ç–æ–ª—å–∫–æ –¥–ª—è POST)
        data = request.get_json()
        print(f"üìã –î–∞–Ω–Ω—ã–µ –æ—Ç Telegram: {json.dumps(data, indent=2) if data else '–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ'}", flush=True)
        print(f"üìã Content-Type: {request.headers.get('Content-Type')}", flush=True)
        print(f"üìã Content-Length: {request.headers.get('Content-Length')}", flush=True)
        print(f"üìã Raw data: {request.get_data()}", flush=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç Telegram
        if not data:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ JSON", flush=True)
            return jsonify({"status": "error", "message": "No data"}), 400
        
        if 'update_id' not in data:
            print("‚ùå –≠—Ç–æ –Ω–µ Telegram webhook (–Ω–µ—Ç update_id)", flush=True)
            return jsonify({"status": "error", "message": "Not a Telegram webhook"}), 400
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞
        if hasattr(app, 'telegram_app'):
            print("‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ telegram_app", flush=True)
            
            # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç
            update = Update.de_json(data, app.telegram_app.bot)
            print(f"üìã Update —Å–æ–∑–¥–∞–Ω: {update}")
            print(f"üìã Update ID: {update.update_id}")
            
            if update.message:
                print(f"üìã –°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text if update.message.text else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}")
                print(f"üìã –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.message.from_user.id}")
                print(f"üìã web_app_data: {getattr(update.message, 'web_app_data', '–ù–ï–¢')}")
            elif update.callback_query:
                print(f"üìã Callback query: {update.callback_query.data}")
                print(f"üìã –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.callback_query.from_user.id}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context = CallbackContext(app.telegram_app)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                    if update.message:
                        if update.message.text == '/start':
                            print("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
                            loop.run_until_complete(start(update, context))
                        elif hasattr(update.message, 'web_app_data') and update.message.web_app_data:
                            print("üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
                            loop.run_until_complete(handle_web_app_data(update, context))
                        else:
                            print("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
                            loop.run_until_complete(handle_all_messages(update, context))
                    elif update.callback_query:
                        print("üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
                        loop.run_until_complete(button(update, context))
                    
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                    import traceback
                    print(f"üìã Traceback: {traceback.format_exc()}")
                    
                    # Fallback –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                    print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
                        if update.message:
                            if update.message.text == '/start':
                                print("üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '7593794536:AAGSiEJolK1O1H5LMtHxnbygnuhTDoII6qc')
                                send_message_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                                
                                welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {update.message.from_user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.

üí° <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 50‚ÇΩ –≤ –º–µ—Å—è—Ü
                                """
                                
                                message_data = {
                                    "chat_id": update.message.chat.id,
                                    "text": welcome_text,
                                    "parse_mode": "HTML",
                                    "reply_markup": {
                                        "inline_keyboard": [
                                            [{"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "payment_menu"}],
                                            [{"text": "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "callback_data": "more_info"}]
                                        ]
                                    }
                                }
                                
                                response = requests.post(send_message_url, json=message_data)
                                if response.status_code == 200:
                                    print("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                                else:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
                            
                            elif hasattr(update.message, 'web_app_data') and update.message.web_app_data:
                                print("üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps
                                web_app_data = update.message.web_app_data.data
                                print(f"üìã –î–∞–Ω–Ω—ã–µ Mini Apps: {web_app_data}")
                                
                                try:
                                    payment_data = json.loads(web_app_data)
                                    print(f"üìã –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(payment_data, indent=2)}")
                                    
                                    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
                                    user_id = payment_data.get('userId') or payment_data.get('user_id')
                                    email = payment_data.get('email')
                                    tariff = payment_data.get('tariff')
                                    price = payment_data.get('price')
                                    
                                    if all([user_id, email, tariff, price]):
                                        print(f"üéØ –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                                        payment_url = create_lava_invoice(user_id, email, tariff, price)
                                        
                                        if payment_url:
                                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
                                            bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '7593794536:AAGSiEJolK1O1H5LMtHxnbygnuhTDoII6qc')
                                            send_message_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                                            
                                            success_message = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>

‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:
üìß Email: {email}
üí≥ –¢–∞—Ä–∏—Ñ: {tariff}
üí∞ –°—É–º–º–∞: {price}‚ÇΩ

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:
                                            """
                                            
                                            message_data = {
                                                "chat_id": update.message.chat.id,
                                                "text": success_message,
                                                "parse_mode": "HTML",
                                                "reply_markup": {
                                                    "inline_keyboard": [
                                                        [{"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "url": payment_url}]
                                                    ]
                                                }
                                            }
                                            
                                            response = requests.post(send_message_url, json=message_data)
                                            if response.status_code == 200:
                                                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                                            else:
                                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
                                        else:
                                            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É")
                                    else:
                                        print("‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
                                        
                                except Exception as e:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Mini Apps: {e}")
                                    import traceback
                                    print(f"üìã Traceback: {traceback.format_exc()}")
                            
                            else:
                                print(f"üìù –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
                                bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '7593794536:AAGSiEJolK1O1H5LMtHxnbygnuhTDoII6qc')
                                send_message_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                                
                                message_data = {
                                    "chat_id": update.message.chat.id,
                                    "text": "üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!"
                                }
                                
                                response = requests.post(send_message_url, json=message_data)
                                if response.status_code == 200:
                                    print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                                else:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                        
                        elif update.callback_query:
                            print(f"üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ: {update.callback_query.data}")
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
                            bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '7593794536:AAGSiEJolK1O1H5LMtHxnbygnuhTDoII6qc')
                            
                            if update.callback_query.data == "payment_menu":
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã
                                edit_message_url = f"https://api.telegram.org/bot{bot_token}/editMessageText"
                                
                                payment_text = """
üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:</b>

‚Ä¢ 1 –º–µ—Å—è—Ü - 50‚ÇΩ

–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤—É.
                                """
                                
                                message_data = {
                                    "chat_id": update.callback_query.message.chat.id,
                                    "message_id": update.callback_query.message.message_id,
                                    "text": payment_text,
                                    "parse_mode": "HTML",
                                    "reply_markup": {
                                        "inline_keyboard": [
                                            [{"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Mini Apps", "web_app": {"url": "https://acqu1red.github.io/formulaprivate/"}}],
                                            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_start"}]
                                        ]
                                    }
                                }
                                
                                response = requests.post(edit_message_url, json=message_data)
                                if response.status_code == 200:
                                    print("‚úÖ –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞–∑–∞–Ω–æ")
                                else:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é: {response.text}")
                            
                            elif update.callback_query.data == "more_info":
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                                edit_message_url = f"https://api.telegram.org/bot{bot_token}/editMessageText"
                                
                                info_text = """
‚ÑπÔ∏è <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

üìã <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ø–æ–¥–ø–∏—Å–∫—É:</b>
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram –∫–∞–Ω–∞–ª—É
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 1 –º–µ—Å—è—Ü
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 50‚ÇΩ

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Lava Top
‚Ä¢ –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
                                """
                                
                                message_data = {
                                    "chat_id": update.callback_query.message.chat.id,
                                    "message_id": update.callback_query.message.message_id,
                                    "text": info_text,
                                    "parse_mode": "HTML",
                                    "reply_markup": {
                                        "inline_keyboard": [
                                            [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_start"}]
                                        ]
                                    }
                                }
                                
                                response = requests.post(edit_message_url, json=message_data)
                                if response.status_code == 200:
                                    print("‚úÖ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–Ω–∞")
                                else:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {response.text}")
                            
                            elif update.callback_query.data == "back_to_start":
                                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é
                                edit_message_url = f"https://api.telegram.org/bot{bot_token}/editMessageText"
                                
                                welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {update.callback_query.from_user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.

üí° <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 50‚ÇΩ –≤ –º–µ—Å—è—Ü
                                """
                                
                                message_data = {
                                    "chat_id": update.callback_query.message.chat.id,
                                    "message_id": update.callback_query.message.message_id,
                                    "text": welcome_text,
                                    "parse_mode": "HTML",
                                    "reply_markup": {
                                        "inline_keyboard": [
                                            [{"text": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "payment_menu"}],
                                            [{"text": "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "callback_data": "more_info"}]
                                        ]
                                    }
                                }
                                
                                response = requests.post(edit_message_url, json=message_data)
                                if response.status_code == 200:
                                    print("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é")
                                else:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {response.text}")
                            
                            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
                            answer_url = f"https://api.telegram.org/bot{bot_token}/answerCallbackQuery"
                            answer_data = {"callback_query_id": update.callback_query.id}
                            requests.post(answer_url, json=answer_data)
                        
                        print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (fallback)")
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (fallback): {e}")
                        import traceback
                        print(f"üìã Traceback: {traceback.format_exc()}")
                
                finally:
                    loop.close()
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                import traceback
                print(f"üìã Traceback: {traceback.format_exc()}")
            
        else:
            print("‚ùå telegram_app –Ω–µ –Ω–∞–π–¥–µ–Ω", flush=True)
        
        print("‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ", flush=True)
        return jsonify({"status": "ok"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}", flush=True)
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}", flush=True)
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
@app.route('/api/create-payment', methods=['POST'])
def create_payment_api():
    """API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Mini Apps"""
    try:
        print("=" * 50)
        print("üì• –ü–û–õ–£–ß–ï–ù API –ó–ê–ü–†–û–° –ù–ê –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê!")
        print("=" * 50)
        
        data = request.get_json()
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        user_id = data.get('user_id') or data.get('userId')
        email = data.get('email')
        tariff = data.get('tariff')
        price = data.get('price')
        
        if not all([user_id, email, tariff, price]):
            return jsonify({
                "status": "error", 
                "message": "Missing required fields",
                "received_data": data
            }), 400
        
        print(f"üìã –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂: user_id={user_id}, email={email}, tariff={tariff}, price={price}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Lava Top API
        payment_url = create_lava_invoice(user_id, email, tariff, price)
        
        if payment_url:
            print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {payment_url}")
            return jsonify({
                "status": "success",
                "payment_url": payment_url,
                "message": "Payment created successfully",
                "data": {
                    "user_id": user_id,
                    "email": email,
                    "tariff": tariff,
                    "price": price,
                    "order_id": f"order_{user_id}_{int(datetime.now().timestamp())}"
                }
            })
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂")
            return jsonify({
                "status": "error",
                "message": "Failed to create payment"
            }), 500
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return jsonify({"status": "error", "message": str(e)}), 500

# Webhook endpoint –¥–ª—è Lava Top
@app.route('/lava-webhook', methods=['GET', 'POST'])
def lava_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Lava Top"""
    try:
        print("=" * 50)
        print("üì• –ü–û–õ–£–ß–ï–ù WEBHOOK –û–¢ LAVA TOP!")
        print("=" * 50)
        print(f"üìã Method: {request.method}")
        print(f"üìã URL: {request.url}")
        print(f"üìã Headers: {dict(request.headers)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
        if request.method == 'GET':
            print("üîç GET –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            data = request.args.to_dict()
        elif request.method == 'POST':
            print("üîç POST –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ body")
            data = request.get_json()
            if not data:
                data = request.form.to_dict()
        else:
            return jsonify({"status": "error", "message": "Method not allowed"}), 405
        
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment_status = data.get('status')
        order_id = data.get('order_id')
        amount = data.get('amount')
        currency = data.get('currency')
        metadata = data.get('metadata', {})
        
        # –ï—Å–ª–∏ metadata —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        if isinstance(metadata, str):
            try:
                metadata = json.loads(metadata)
            except:
                metadata = {}
        
        print(f"üìã Metadata: {metadata}")
        
        if payment_status == 'success':
            print("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ metadata
            user_id = metadata.get('user_id') or metadata.get('telegram_id')
            email = metadata.get('email')
            tariff = metadata.get('tariff')
            
            print(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: user_id={user_id}, email={email}, tariff={tariff}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ Telegram
            if user_id:
                try:
                    user_id = int(user_id)
                    print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    subscription_id = create_subscription(user_id, email, tariff, amount, currency, order_id, metadata)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    success_message = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>

‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
üìß Email: {email}
üí≥ –¢–∞—Ä–∏—Ñ: {tariff}
üí∞ –°—É–º–º–∞: {amount} {currency}
üÜî ID –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_id}

üîó <a href="https://t.me/+6SQb4RwwAmZlMWQ6">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É</a>
                    """
                    
                    keyboard = [[InlineKeyboardButton("üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É", url="https://t.me/+6SQb4RwwAmZlMWQ6")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '7593794536:AAGSiEJolK1O1H5LMtHxnbygnuhTDoII6qc')
                    send_message_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                    message_data = {
                        "chat_id": user_id,
                        "text": success_message,
                        "parse_mode": "HTML",
                        "reply_markup": reply_markup.to_dict()
                    }
                    
                    response = requests.post(send_message_url, json=message_data)
                    if response.status_code == 200:
                        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            else:
                print("‚ùå user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ metadata")
            
            print("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª: {payment_status}")
        
        return jsonify({"status": "ok"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Lava Top webhook: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return jsonify({"status": "error", "message": str(e)}), 500

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '7593794536:AAGSiEJolK1O1H5LMtHxnbygnuhTDoII6qc')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
WEBHOOK_PATH = '/webhook'

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
ADMIN_IDS = [708907063, 7365307696]

# Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL', 'https://uhhsrtmmuwoxsdquimaa.supabase.co')
SUPABASE_KEY = os.getenv('SUPABASE_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8')
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Lava Top –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LAVA_SHOP_ID = os.getenv('LAVA_SHOP_ID', '1b9f3e05-86aa-4102-9648-268f0f586bb1')
LAVA_SECRET_KEY = os.getenv('LAVA_SECRET_KEY', 'whjKvjpi2oqAjTOwfbt0YUkulXCxjU5PWUJDxlQXwOuhOCNSiRq2jSX7Gd2Zihav')
LAVA_PRODUCT_ID = os.getenv('LAVA_PRODUCT_ID', 'e3dc5b9b-d511-4b79-9457-edfb404a5cc5')
LAVA_PRODUCT_URL_ID = os.getenv('LAVA_PRODUCT_URL_ID', 'dcaf4bee-db84-476f-85a9-f5af24eb648e')

def create_subscription(user_id, email, tariff, amount, currency, order_id, metadata):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        tariff_durations = {
            '1month': 30,
            '1_month': 30,
            '3months': 90,
            '6months': 180,
            '12months': 365
        }
        
        duration_days = tariff_durations.get(tariff, 30)
        end_date = datetime.utcnow() + timedelta(days=duration_days)
        
        subscription_data = {
            'user_id': str(user_id),
            'email': email,
            'tariff': tariff,
            'amount': amount,
            'currency': currency,
            'order_id': order_id,
            'start_date': datetime.utcnow().isoformat(),
            'end_date': end_date.isoformat(),
            'status': 'active',
            'metadata': metadata
        }
        
        print(f"üìä –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É: {subscription_data}")
        
        result = supabase.table('subscriptions').insert(subscription_data).execute()
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {result}")
        
        return result.data[0]['id'] if result.data else 'unknown'
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return 'error'

def create_lava_invoice(user_id, email, tariff, price):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É Lava Top"""
    try:
        print("=" * 50)
        print(f"üîß –°–û–ó–î–ê–ù–ò–ï –ò–ù–í–û–ô–°–ê –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}")
        print("=" * 50)
        print(f"üìã Email: {email}")
        print(f"üìã –¢–∞—Ä–∏—Ñ: {tariff}")
        print(f"üìã –¶–µ–Ω–∞: {price}‚ÇΩ")
        print(f"üîë LAVA_SHOP_ID: {LAVA_SHOP_ID}")
        print(f"üîë LAVA_PRODUCT_ID: {LAVA_PRODUCT_ID}")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π order_id
        order_id = f"order_{user_id}_{int(datetime.now().timestamp())}"
        print(f"üìã Order ID: {order_id}")
        
        # –°–æ–∑–¥–∞–µ–º metadata —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        metadata = {
            'user_id': str(user_id),
            'email': email,
            'tariff': tariff,
            'timestamp': int(datetime.now().timestamp()),
            'bot_name': 'Formula Private Bot'
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_url = f"https://app.lava.top/ru/products/{LAVA_SHOP_ID}/{LAVA_PRODUCT_ID}?currency=RUB&amount={int(price * 100)}&order_id={order_id}&metadata={json.dumps(metadata)}"
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:")
        print(f"üîó {payment_url}")
        print("=" * 50)
        
        return payment_url
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        print("=" * 50)
        return None

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    print(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.

üí° <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 50‚ÇΩ –≤ –º–µ—Å—è—Ü
    """
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="payment_menu")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more_info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, parse_mode='HTML', reply_markup=reply_markup)

async def payment_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
    text = """
üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:</b>

‚Ä¢ 1 –º–µ—Å—è—Ü - 50‚ÇΩ

–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤—É.
    """
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 50‚ÇΩ", callback_data="lava_payment")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, parse_mode='HTML', reply_markup=reply_markup)

async def handle_lava_payment(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    user = query.from_user
    
    print(f"üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Lava Top API
    payment_url = create_lava_invoice(user.id, "user@example.com", "1_month", 50)
    
    if payment_url:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"‚úÖ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"üí∞ –°—É–º–º–∞: 50‚ÇΩ\n"
            f"üí≥ –¢–∞—Ä–∏—Ñ: 1 –º–µ—Å—è—Ü\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

async def handle_web_app_data(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps"""
    print("=" * 50)
    print("üöÄ –í–´–ó–í–ê–ù–ê –§–£–ù–ö–¶–ò–Ø handle_web_app_data!")
    print("=" * 50)
    
    user = update.effective_user
    message = update.message
    
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} (@{user.username})")
    print(f"üì± –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message)}")
    print(f"üì± –ï—Å—Ç—å web_app_data: {hasattr(message, 'web_app_data')}")
    
    if hasattr(message, 'web_app_data') and message.web_app_data:
        print(f"üì± web_app_data –æ–±—ä–µ–∫—Ç: {message.web_app_data}")
        print(f"üì± web_app_data.data: {message.web_app_data.data}")
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps
            web_app_data = message.web_app_data.data
            print(f"üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps: {web_app_data}")
            
            # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
            payment_data = json.loads(web_app_data)
            print(f"üìã –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {payment_data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await process_payment_data(update, context, payment_data)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data: {e}")
            import traceback
            print(f"üìã Traceback: {traceback.format_exc()}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini Apps")
    else:
        print("‚ùå web_app_data –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
        await message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ Mini Apps –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")

async def handle_all_messages(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("=" * 30)
    print("üì® –í–´–ó–í–ê–ù–ê –§–£–ù–ö–¶–ò–Ø handle_all_messages!")
    print("=" * 30)
    
    user = update.effective_user
    message = update.message
    
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    print(f"üìã –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message)}")
    print(f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text if hasattr(message, 'text') else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}")
    print(f"üìã web_app_data: {getattr(message, 'web_app_data', '–ù–ï–¢')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Mini Apps
    if hasattr(message, 'web_app_data') and message.web_app_data:
        print(f"üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps")
        await handle_web_app_data(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ JSON –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    if message.text:
        try:
            data = json.loads(message.text)
            if isinstance(data, dict) and 'step' in data:
                print(f"üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã JSON –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ: {data}")
                await process_payment_data(update, context, data)
                return
        except:
            pass
    
    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply_text(
        "üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!"
    )

async def process_payment_data(update: Update, context: CallbackContext, payment_data: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Mini Apps"""
    user = update.effective_user
    message = update.message
    
    try:
        print(f"üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {payment_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (–ø–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
        step = payment_data.get('step')
        print(f"üìã –®–∞–≥ –¥–∞–Ω–Ω—ã—Ö: {step}")
        
        if step == 'test_connection':
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
            await message.reply_text("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return
            
        elif step == 'email_data':
            email = payment_data.get('email')
            print(f"üìß –ü–æ–ª—É—á–µ–Ω email: {email}")
            await message.reply_text(f"üìß Email –ø–æ–ª—É—á–µ–Ω: {email}")
            return
            
        elif step == 'tariff_data':
            tariff = payment_data.get('tariff')
            price = payment_data.get('price')
            print(f"üí≥ –ü–æ–ª—É—á–µ–Ω tariff: {tariff}, —Ü–µ–Ω–∞: {price}")
            await message.reply_text(f"üí≥ Tariff –ø–æ–ª—É—á–µ–Ω: {tariff}, —Ü–µ–Ω–∞: {price}‚ÇΩ")
            return
            
        elif step == 'payment_method_data':
            payment_method = payment_data.get('paymentMethod')
            bank = payment_data.get('bank')
            bank_name = payment_data.get('bankName', '–ë–∞–Ω–∫ –†–§')
            print(f"üè¶ –ü–æ–ª—É—á–µ–Ω payment method: {payment_method}, –±–∞–Ω–∫: {bank_name}")
            await message.reply_text(f"üè¶ Payment method –ø–æ–ª—É—á–µ–Ω: {payment_method}, –±–∞–Ω–∫: {bank_name}")
            return
            
        elif step == 'user_id_data':
            user_id = payment_data.get('userId')
            print(f"üë§ –ü–æ–ª—É—á–µ–Ω user ID: {user_id}")
            await message.reply_text(f"üë§ User ID –ø–æ–ª—É—á–µ–Ω: {user_id}")
            return
            
        elif step == 'final_data':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            email = payment_data.get('email')
            tariff = payment_data.get('tariff')
            price = payment_data.get('price')
            user_id = payment_data.get('userId')
            print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: email={email}, tariff={tariff}, price={price}, user_id={user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
            if not email or not tariff or not price:
                print("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
                print(f"   email: {email}")
                print(f"   tariff: {tariff}")
                print(f"   price: {price}")
                await message.reply_text("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å...")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Lava Top API
            payment_url = create_lava_invoice(user.id, email, tariff, price)
            
            if payment_url:
                print(f"‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {payment_url}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
                keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await message.reply_text(
                    f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                    f"‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:\n"
                    f"üìß Email: {email}\n"
                    f"üí≥ –¢–∞—Ä–∏—Ñ: {tariff}\n"
                    f"üí∞ –°—É–º–º–∞: {price}‚ÇΩ\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å")
                await message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥: {step}")
            await message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

async def button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "payment_menu":
        await payment_menu(update, context)
    elif query.data == "lava_payment":
        await handle_lava_payment(update, context)
    elif query.data == "back_to_start":
        await start(update, context)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook...")
    print(f"üîë TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:20]}...")
    print(f"üîë LAVA_SHOP_ID: {LAVA_SHOP_ID}")
    print(f"üîë LAVA_SECRET_KEY: {LAVA_SECRET_KEY[:20]}...")
    print(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ ID: {ADMIN_IDS}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.telegram_app = application # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ Flask
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    import asyncio
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(application.initialize())
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
    
    print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è web_app_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_all_messages))
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook URL –¥–ª—è Railway
    webhook_url = os.getenv('RAILWAY_STATIC_URL', '')
    if webhook_url:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://
        if not webhook_url.startswith('http'):
            webhook_url = f"https://{webhook_url}"
        
        print(f"üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {webhook_url}/webhook")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
            delete_webhook_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook"
            delete_response = requests.post(delete_webhook_url)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook: {delete_response.status_code} - {delete_response.text}")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            import time
            time.sleep(2)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            webhook_setup_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook"
            webhook_data = {
                "url": f"{webhook_url}/webhook",
                "secret_token": os.getenv('WEBHOOK_SECRET', 'Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c'),
                "max_connections": 40,
                "allowed_updates": ["message", "callback_query", "edited_message", "channel_post", "edited_channel_post", "inline_query", "chosen_inline_result", "shipping_query", "pre_checkout_query", "poll", "poll_answer", "my_chat_member", "chat_member", "chat_join_request"]
            }
            
            print(f"üîß Webhook –¥–∞–Ω–Ω—ã–µ: {webhook_data}")
            
            response = requests.post(webhook_setup_url, json=webhook_data)
            print(f"üì° –û—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.status_code} - {response.text}")
            
            if response.status_code == 200:
                print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
                get_webhook_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getWebhookInfo"
                webhook_info = requests.get(get_webhook_url)
                webhook_result = webhook_info.json()
                print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook: {webhook_result}")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            import traceback
            print(f"üìã Traceback: {traceback.format_exc()}")
    else:
        print("‚ö†Ô∏è RAILWAY_STATIC_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    port = int(os.getenv('PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == '__main__':
    main()
