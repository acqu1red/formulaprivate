#!/usr/bin/env python3
"""
Telegram Bot with Webhook support for Railway deployment - LAVA TOP API v2
"""

import os
import hmac
import hashlib
import json
import time
import base64
from datetime import datetime
import aiohttp
import requests
from flask import Flask, request, jsonify

# –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.constants import ParseMode

# === TELEGRAM CONFIG ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]

# === LAVA TOP API CONFIG ===
LAVA_TOP_API_BASE = os.getenv("LAVA_TOP_API_BASE", "https://gate.lava.top")
LAVA_TOP_API_KEY = os.getenv("LAVA_TOP_API_KEY", "")
LAVA_TOP_WEBHOOK_SECRET = os.getenv("LAVA_TOP_WEBHOOK_SECRET", "")

# === OFFER IDs ===
OFFER_MAP = {
    "basic": os.getenv("LAVA_OFFER_ID_BASIC", ""),
    "pro": os.getenv("LAVA_OFFER_ID_PRO", ""),
    "vip": os.getenv("LAVA_OFFER_ID_VIP", ""),
    "1_month": os.getenv("LAVA_OFFER_ID_BASIC", ""),  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
}

# === CHANNEL/INVITES ===
PRIVATE_CHANNEL_ID = int(os.getenv("PRIVATE_CHANNEL_ID", "-1001234567890"))

# === MINI APPS ===
PAYMENT_MINIAPP_URL = os.getenv("PAYMENT_MINIAPP_URL", "https://acqu1red.github.io/formulaprivate/payment.html")

# === BASE URL ===
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL", "https://formulaprivate-productionpaymentuknow.up.railway.app")

# Flask app
app = Flask(__name__)

def _method_by_bank_and_currency(bank: str, currency: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –ø–æ –±–∞–Ω–∫—É –∏ –≤–∞–ª—é—Ç–µ"""
    bank = (bank or "russian").lower()
    currency = (currency or "RUB").upper()
    if currency == "RUB":
        return "BANK131"
    # –¥–ª—è –∑–∞–≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –≤–∞–ª—é—Ç - –ø–æ–¥—Å—Ç–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    return "UNLIMINT"  # –ª–∏–±–æ PAYPAL/STRIPE, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–∞–±–∏–Ω–µ—Ç–µ

async def create_lava_top_invoice(*, email: str, tariff: str, price: int,
                                  bank: str, currency: str = "RUB", user_id: int = 0, chat_id: int = 0) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ LAVA TOP API v2"""
    assert LAVA_TOP_API_KEY, "LAVA_TOP_API_KEY is required"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º offerId –ø–æ —Ç–∞—Ä–∏—Ñ—É
    offer_id = OFFER_MAP.get((tariff or "basic").lower())
    if not offer_id:
        raise RuntimeError(f"No offerId for tariff={tariff}")

    url = f"{LAVA_TOP_API_BASE.rstrip('/')}/api/v2/invoice"
    headers = {
        "X-Api-Key": LAVA_TOP_API_KEY,
        "Accept": "application/json",
        "Content-Type": "application/json",
    }
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ user_id –∏ chat_id
    metadata = {}
    if user_id:
        metadata["user_id"] = str(user_id)
    if chat_id:
        metadata["chat_id"] = str(chat_id)
    
    payload = {
        "email": email,
        "offerId": offer_id,
        "currency": currency,
        "paymentMethod": _method_by_bank_and_currency(bank, currency),
        "buyerLanguage": "RU"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º metadata –µ—Å–ª–∏ –µ—Å—Ç—å
    if metadata:
        payload["metadata"] = metadata
    
    async with aiohttp.ClientSession() as s:
        async with s.post(url, headers=headers, json=payload) as r:
            txt = await r.text()
            if r.status != 200:
                raise RuntimeError(f"Lava TOP {r.status}: {txt}")
            data = json.loads(txt)
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ
            pay_url = next((data.get(k) for k in ("payUrl","invoiceUrl","paymentUrl","url","link") if data.get(k)), None)
            if not pay_url:
                raise RuntimeError(f"No payment URL in response: {data}")
            return pay_url

async def _send_invite_on_success(application: Application, user_id: int, chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    try:
        # –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –∂–∏–≤—ë—Ç 1 –¥–µ–Ω—å
        expire_date = int(time.time()) + 86400
        invite = await application.bot.create_chat_invite_link(
            chat_id=PRIVATE_CHANNEL_ID,
            name=f"paid_{user_id}_{int(time.time())}",
            expire_date=expire_date,
            member_limit=1,
            creates_join_request=False
        )

        text = (
            "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n{invite.invite_link}\n\n"
            "–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º."
        )
        
        await application.bot.send_message(chat_id=chat_id or user_id, text=text)
        print(f"[_send_invite_on_success] Invite sent to {chat_id or user_id}")
        
    except Exception as e:
        print(f"[_send_invite_on_success] Failed to send invite to {chat_id or user_id}: {e}")

# Flask endpoints
@app.route("/health")
def health():
    return jsonify({"status": "ok"})

@app.route("/webhook", methods=["GET", "POST"])
def telegram_webhook():
    """Telegram webhook endpoint"""
    if request.method == "GET":
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook –ø—Ä–∏ GET –∑–∞–ø—Ä–æ—Å–µ
        try:
            webhook_url = f"{PUBLIC_BASE_URL}/webhook"
            webhook_data = {
                "url": webhook_url,
                "secret_token": "Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c",
                "max_connections": 40,
                "allowed_updates": ["message", "callback_query"]
            }
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
            delete_response = requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook"
            )
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook: {delete_response.status_code} - {delete_response.text}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            set_response = requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook",
                json=webhook_data
            )
            print(f"üì° –û—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {set_response.status_code} - {set_response.text}")
            
            return jsonify({"status": "webhook_updated", "url": webhook_url})
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è webhook: {e}")
            return jsonify({"error": str(e)}), 500
    
    # POST - –æ–±—Ä–∞–±–æ—Ç–∫–∞ Telegram updates
    try:
        update_data = request.get_json(force=True, silent=False)
        print(f"üì± –ü–æ–ª—É—á–µ–Ω Telegram update: {update_data}")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º update –≤ Telegram application
        application = app.config.get("telegram_application")
        if application:
            application.create_task(application.process_update(Update.de_json(update_data, application.bot)))
        
        return "ok"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram update: {e}")
        return "error", 500

@app.route("/api/create-payment", methods=["POST"])
async def create_payment_api():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON –∏–∑ MiniApp:
    {
      "user_id": <int>,      // Telegram user id
      "chat_id": <int>,      // chat.id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
      "email": "mail@...",
      "tariff": "basic",
      "price": 500,
      "bank": "russian"
    }
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { ok: true, payment_url: "..." }
    """
    try:
        data = request.get_json(force=True, silent=False)
        print(f"üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {data}")
    except Exception:
        return jsonify({"ok": False, "error": "Invalid JSON"}), 400

    user_id = int(data.get("user_id") or 0)
    chat_id = int(data.get("chat_id") or user_id)
    email = (data.get("email") or "").strip()
    tariff = (data.get("tariff") or "").strip()
    price = int(data.get("price") or 0)
    bank = (data.get("bank") or "russian").strip()

    if not user_id or not price or not email:
        return jsonify({"ok": False, "error": "user_id, price and email are required"}), 400

    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ LAVA TOP API v2
        pay_url = await create_lava_top_invoice(
            email=email, 
            tariff=tariff, 
            price=price, 
            bank=bank, 
            user_id=user_id, 
            chat_id=chat_id
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂: {pay_url}")
        return jsonify({"ok": True, "payment_url": pay_url})
    except Exception as e:
        print(f"[create-payment] ERROR: {e}")
        return jsonify({"ok": False, "error": str(e)}), 500

@app.route("/lava-webhook", methods=["GET", "POST"])
def lava_webhook():
    """
    –ü—Ä–∏—ë–º –≤–µ–±—Ö—É–∫–∞ –æ—Ç LAVA TOP API v2
    """
    if request.method == "GET":
        return "Lava TOP webhook endpoint is working"
    
    try:
        payload = request.get_json(force=True, silent=False)
    except Exception:
        return "bad json", 400

    print(f"[lava-webhook] incoming: {payload}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –∑–∞–¥–∞–Ω —Å–µ–∫—Ä–µ—Ç
    if LAVA_TOP_WEBHOOK_SECRET:
        try:
            signature = request.headers.get("X-Signature")
            if signature:
                # –í—ã—á–∏—Å–ª—è–µ–º HMAC-SHA256
                body = request.get_data()
                expected_signature = hmac.new(
                    LAVA_TOP_WEBHOOK_SECRET.encode('utf-8'),
                    body,
                    hashlib.sha256
                ).hexdigest()
                
                if not hmac.compare_digest(signature, expected_signature):
                    print("[lava-webhook] signature mismatch")
                    return "signature mismatch", 400
        except Exception as e:
            print(f"[lava-webhook] signature check error: {e}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    event_type = payload.get("eventType", "").lower()
    if event_type in ("payment.success", "invoice.paid", "success"):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏ chat_id –∏–∑ metadata
            metadata = payload.get("data", {}).get("metadata", {})
            user_id = int(metadata.get("user_id", 0))
            chat_id = int(metadata.get("chat_id", 0))
            
            if user_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                application = app.config.get("telegram_application")
                if application:
                    application.create_task(_send_invite_on_success(application, user_id, chat_id))
                    print(f"[lava-webhook] Scheduled invite for user {user_id}")
                else:
                    print("[lava-webhook] No telegram application available")
            else:
                print("[lava-webhook] No user_id in metadata")
                
        except Exception as e:
            print(f"[lava-webhook] Error processing success: {e}")

    return "ok", 200

@app.route("/webhook-info")
def webhook_info():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook"""
    try:
        response = requests.get(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getWebhookInfo")
        webhook_info = response.json()
        print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook: {webhook_info}")
        
        if webhook_info.get("ok"):
            result = webhook_info.get("result", {})
            current_url = result.get("url", "")
            expected_url = f"{PUBLIC_BASE_URL}/webhook"
            
            print(f"üîç –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π webhook URL: {current_url}")
            print(f"üîç –û–∂–∏–¥–∞–µ–º—ã–π webhook URL: {expected_url}")
            
            if current_url == expected_url:
                print("‚úÖ Webhook URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                return jsonify({"status": "ok", "webhook_info": webhook_info})
            else:
                print("‚ùå Webhook URL –Ω–µ–≤–µ—Ä–Ω—ã–π, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                webhook_data = {
                    "url": expected_url,
                    "secret_token": "Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c",
                    "max_connections": 40,
                    "allowed_updates": ["message", "callback_query"]
                }
                
                set_response = requests.post(
                    f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook",
                    json=webhook_data
                )
                print(f"üì° –û—Ç–≤–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook: {set_response.status_code} - {set_response.text}")
                
                return jsonify({"status": "fixed", "webhook_info": webhook_info})
        else:
            return jsonify({"status": "error", "webhook_info": webhook_info})
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/reset-webhook", methods=["GET", "POST"])
def reset_webhook():
    """–°–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        webhook_url = f"{PUBLIC_BASE_URL}/webhook"
        webhook_data = {
            "url": webhook_url,
            "secret_token": "Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c",
            "max_connections": 40,
            "allowed_updates": ["message", "callback_query"]
        }
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        delete_response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook"
        )
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook: {delete_response.status_code} - {delete_response.text}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        set_response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook",
            json=webhook_data
        )
        print(f"üì° –û—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {set_response.status_code} - {set_response.text}")
        
        if set_response.status_code == 200:
            print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return jsonify({"status": "success", "url": webhook_url})
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
            return jsonify({"status": "error", "response": set_response.text}), 500
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ webhook: {e}")
        return jsonify({"error": str(e)}), 500

# Telegram bot handlers
async def start_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    print(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}")
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Formula Private Channel!\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", web_app=WebAppInfo(url=PAYMENT_MINIAPP_URL))]
    ])
    
    await update.message.reply_text(welcome_text, reply_markup=keyboard)

async def handle_web_app_data(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App"""
    try:
        if not update.message or not update.message.web_app_data:
            return
            
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        print(f"üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App (–æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ base64)
        raw_data = update.message.web_app_data.data
        try:
            decoded_data = base64.b64decode(raw_data).decode('utf-8')
            payment_data = json.loads(decoded_data)
            print(f"üì± –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (base64): {payment_data}")
        except Exception as decode_error:
            print(f"üì± –û—à–∏–±–∫–∞ base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {decode_error}")
            # Fallback: –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π JSON
            try:
                payment_data = json.loads(raw_data)
                print(f"üì± –î–∞–Ω–Ω—ã–µ (–ø—Ä—è–º–æ–π JSON): {payment_data}")
            except Exception as json_error:
                print(f"üì± –û—à–∏–±–∫–∞ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞: {json_error}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payment_data
        if isinstance(payment_data, dict):
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {step: "final_data", data: {...}}
            if "step" in payment_data and payment_data["step"] == "final_data":
                final_data = payment_data.get("data", {})
                email = final_data.get("email", "")
                tariff = final_data.get("tariff", "basic")
                price = int(final_data.get("price", 50))
                bank = final_data.get("bank", "russian")
            else:
                # –ü—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
                email = payment_data.get("email", "")
                tariff = payment_data.get("tariff", "basic")
                price = int(payment_data.get("price", 50))
                bank = payment_data.get("bank", "russian")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
            
        print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: email={email}, tariff={tariff}, price={price}, bank={bank}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ LAVA TOP API v2
        try:
            pay_url = await create_lava_top_invoice(
                email=email, 
                tariff=tariff, 
                price=price, 
                bank=bank, 
                user_id=user.id, 
                chat_id=chat_id
            )
            
            text = (
                "‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –ø—Ä–∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å (LAVA TOP)", url=pay_url)]
            ])
            await update.message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            # –õ–æ–≥ –∞–¥–º–∏–Ω–∞–º
            for admin in ADMIN_IDS:
                try:
                    await context.bot.send_message(admin, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
                except:
                    pass
    
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ handle_web_app_data: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def payment_menu(update: Update, context):
    """–ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", web_app=WebAppInfo(url=PAYMENT_MINIAPP_URL))]
    ])
    
    text = (
        "üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏."
    )
    
    await update.message.reply_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

async def button(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "payment":
        await payment_menu(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º Telegram application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º application –≤ Flask app –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ webhook
    app.config["telegram_application"] = application
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook...")
    print(f"üîë TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:20]}...")
    print(f"üîë LAVA_TOP_API_KEY: {LAVA_TOP_API_KEY[:20] if LAVA_TOP_API_KEY else 'NOT SET'}...")
    print(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ ID: {ADMIN_IDS}")
    print(f"üì¶ Offer IDs: {OFFER_MAP}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("payment", payment_menu))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    application.add_handler(CallbackQueryHandler(button))
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mini Apps
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mini Apps...")
    try:
        application.bot.set_my_commands([
            ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            ("payment", "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        ])
        print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    webhook_url = f"{PUBLIC_BASE_URL}/webhook"
    print(f"üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {webhook_url}")
    
    webhook_data = {
        "url": webhook_url,
        "secret_token": "Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c",
        "max_connections": 40,
        "allowed_updates": ["message", "callback_query"]
    }
        
    print(f"üîß Webhook –¥–∞–Ω–Ω—ã–µ: {webhook_data}")
        
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        delete_response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook"
        )
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook: {delete_response.status_code} - {delete_response.text}")
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        set_response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook",
            json=webhook_data
        )
        print(f"üì° –û—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {set_response.status_code} - {set_response.text}")
        
        if set_response.status_code == 200:
            print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask app
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)), debug=False)

if __name__ == "__main__":
    main()
