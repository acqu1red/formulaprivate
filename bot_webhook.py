#!/usr/bin/env python3
"""
Telegram Bot with Lava API integration for Railway deployment
"""

import os
import hmac
import hashlib
import json
import time
import base64
import asyncio
import requests
import logging
from datetime import datetime, timedelta
from urllib.parse import urlencode
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, CallbackContext, filters
from supabase import create_client, Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '7593794536:AAGSiEJolK1O1H5LMtHxnbygnuhTDoII6qc')
ADMIN_IDS = [708907063, 7365307696]

# Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL', 'https://uhhsrtmmuwoxsdquimaa.supabase.co')
SUPABASE_KEY = os.getenv('SUPABASE_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8')
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# === LAVA API CONFIG ===
LAVA_API_BASE = os.getenv("LAVA_API_BASE", "https://api.lava.ru/business")
LAVA_API_KEY = os.getenv("LAVA_API_KEY", "whjKvjpi2oqAjTOwfbt0YUkulXCxjU5PWUJDxlQXwOuhOCNSiRq2jSX7Gd2Zihav")
LAVA_SHOP_ID = os.getenv("LAVA_SHOP_ID", "1b9f3e05-86aa-4102-9648-268f0f586bb1")
LAVA_SUCCESS_URL = os.getenv("LAVA_SUCCESS_URL", "https://t.me/FormulaPrivateBot")
LAVA_FAIL_URL = os.getenv("LAVA_FAIL_URL", "https://t.me/FormulaPrivateBot")

# –•—É–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π LAVA –ø—Ä–∏—à–ª–µ—Ç —Å—Ç–∞—Ç—É—Å:
PUBLIC_BASE_URL = os.getenv("RAILWAY_STATIC_URL") or os.getenv("PUBLIC_BASE_URL") or "https://formulaprivate-productionpaymentuknow.up.railway.app"
HOOK_URL = f"{PUBLIC_BASE_URL}/lava-webhook" if PUBLIC_BASE_URL else ""

# === CHANNEL/INVITES ===
TARGET_CHANNEL_ID = int(os.getenv("TARGET_CHANNEL_ID", "-1002717275103"))  # –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890
STATIC_INVITE_LINK = os.getenv("STATIC_INVITE_LINK")  # –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ, —Å–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –î–ª—è –ø–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (—á–∞—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π LAVA —Ç—Ä–µ–±—É–µ—Ç HMAC; –æ—Å—Ç–∞–≤–ª—è–µ–º –≥–∏–±–∫–æ)
def _lava_signature(body: str, secret: str) -> str:
    return hmac.new(secret.encode("utf-8"), body.encode("utf-8"), hashlib.sha256).hexdigest()

def _lava_headers(body: str) -> dict:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Bearer –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    return {
        "Authorization": f"Bearer {LAVA_API_KEY}",
        "Content-Type": "application/json",
    }

def lava_post(path: str, payload: dict) -> dict:
    url = f"{LAVA_API_BASE.rstrip('/')}/{path.lstrip('/')}"
    body = json.dumps(payload, ensure_ascii=False, separators=(",", ":"))
    headers = _lava_headers(body)
    print(f"üîß Lava API POST: {url}")
    print(f"üìã Headers: {headers}")
    print(f"üìã Payload: {body}")
    resp = requests.post(url, data=body.encode("utf-8"), headers=headers, timeout=20)
    print(f"üì° Response: {resp.status_code} - {resp.text}")
    try:
        data = resp.json()
    except Exception:
        raise RuntimeError(f"Lava API non-JSON response: {resp.status_code} {resp.text[:200]}")
    if resp.status_code >= 300:
        raise RuntimeError(f"Lava API error {resp.status_code}: {data}")
    return data

def lava_get(path: str, params: dict) -> dict:
    url = f"{LAVA_API_BASE.rstrip('/')}/{path.lstrip('/')}"
    headers = {"Authorization": f"Bearer {LAVA_API_KEY}"}
    print(f"üîß Lava API GET: {url}")
    print(f"üìã Params: {params}")
    resp = requests.get(url, params=params, headers=headers, timeout=20)
    print(f"üì° Response: {resp.status_code} - {resp.text}")
    try:
        data = resp.json()
    except Exception:
        raise RuntimeError(f"Lava API non-JSON response: {resp.status_code} {resp.text[:200]}")
    if resp.status_code >= 300:
        raise RuntimeError(f"Lava API error {resp.status_code}: {data}")
    return data

def create_lava_invoice_api(user_id: int, chat_id: int, email: str, tariff: str, price_rub: int) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ LAVA Business API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç payUrl.
    orderId –ø—Ä–æ—à–∏–≤–∞–µ–º user_id –∏ chat_id, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å —Å–≤—è–∑—å.
    """
    if not (LAVA_API_KEY and LAVA_SHOP_ID):
        raise RuntimeError("LAVA_API_KEY/LAVA_SHOP_ID are not set")

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π orderId: —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ user_id, –∏ chat_id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    ts = int(time.time())
    order_id = f"order_{user_id}_{chat_id}_{ts}"

    # –í–∞–ª—é—Ç–∞ –∏ —Å—É–º–º–∞ ‚Äî –ø–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ–π –∫–µ–π—Å
    payload = {
        "shopId": str(LAVA_SHOP_ID),
        "orderId": order_id,
        "sum": int(price_rub),         # —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –∫–æ–ø–µ–π–∫–∞—Ö/—Ä—É–±–ª—è—Ö ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç API; —á–∞—â–µ —Ä—É–±–ª–∏ —Ü–µ–ª—ã–º
        "currency": "RUB",
        "comment": f"Tariff: {tariff}",
        "hookUrl": HOOK_URL,           # –∫—É–¥–∞ –ø—Ä–∏–¥—ë—Ç –≤–µ–±—Ö—É–∫ –æ–± –æ–ø–ª–∞—Ç–µ
        "successUrl": LAVA_SUCCESS_URL,
        "failUrl": LAVA_FAIL_URL,
        # –õ—é–±—ã–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –Ω–∞–π–¥—ë—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        "metadata": {
            "user_id": str(user_id),
            "chat_id": str(chat_id),
            "email": email,
            "tariff": tariff
        }
    }

    print(f"üîß –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ API: {payload}")
    data = lava_post("/invoice/create", payload)

    # –í –æ—Ç–≤–µ—Ç–µ —É LAVA –æ–±—ã—á–Ω–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –æ–ø–ª–∞—Ç—ã: payUrl / url ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞
    pay_url = data.get("payUrl") or data.get("url") or (data.get("data", {}) or {}).get("payUrl")
    if not pay_url:
        raise RuntimeError(f"Cannot find payUrl in response: {data}")

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å: {pay_url}")
    return pay_url

def create_subscription(user_id, email, tariff, amount, currency, order_id, metadata):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        tariff_durations = {
            '1month': 30,
            '1_month': 30,
            '3months': 90,
            '6months': 180,
            '12months': 365
        }
        
        duration_days = tariff_durations.get(tariff, 30)
        end_date = datetime.utcnow() + timedelta(days=duration_days)
        
        subscription_data = {
            'user_id': str(user_id),
            'email': email,
            'tariff': tariff,
            'amount': amount,
            'currency': currency,
            'order_id': order_id,
            'start_date': datetime.utcnow().isoformat(),
            'end_date': end_date.isoformat(),
            'status': 'active',
            'metadata': metadata
        }
        
        print(f"üìä –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É: {subscription_data}")
        
        result = supabase.table('subscriptions').insert(subscription_data).execute()
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {result}")
        
        return result.data[0]['id'] if result.data else 'unknown'
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return 'error'

def parse_user_from_order(order_id: str) -> tuple[int, int]:
    """
    –ñ–¥—ë–º —Ñ–æ—Ä–º–∞—Ç: order_<user_id>_<chat_id>_<timestamp>
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (user_id, chat_id) –ª–∏–±–æ (0, 0).
    """
    try:
        parts = order_id.split("_")
        return int(parts[1]), int(parts[2])
    except Exception:
        return 0, 0

async def _send_invite_on_success(application: Application, user_id: int, chat_id: int) -> None:
    """
    –ï—Å–ª–∏ –∑–∞–¥–∞–Ω STATIC_INVITE_LINK ‚Äî —à–ª—ë–º –µ—ë.
    –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞!).
    """
    invite_link = STATIC_INVITE_LINK
    if not invite_link:
        # –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –∂–∏–≤—ë—Ç 1 –¥–µ–Ω—å.
        expire_date = int(time.time()) + 86400
        res = await application.bot.create_chat_invite_link(
            chat_id=TARGET_CHANNEL_ID,
            name=f"paid_{user_id}_{int(time.time())}",
            expire_date=expire_date,
            member_limit=1
        )
        invite_link = res.invite_link

    text = (
        "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
        f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n{invite_link}\n\n"
        "–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º."
    )
    try:
        await application.bot.send_message(chat_id=chat_id or user_id, text=text)
    except Exception as e:
        print(f"[lava-webhook] Failed to send invite to {chat_id or user_id}: {e}")

# Flask endpoints
@app.route('/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({"status": "ok", "timestamp": datetime.now().isoformat()})

@app.route('/webhook-info', methods=['GET'])
def webhook_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook"""
    try:
        webhook_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getWebhookInfo"
        response = requests.get(webhook_url)
        webhook_data = response.json()
        
        current_url = webhook_data.get('result', {}).get('url', '')
        expected_url = "https://formulaprivate-productionpaymentuknow.up.railway.app/webhook"
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º webhook, –µ—Å–ª–∏ –æ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        needs_fix = current_url != expected_url
        auto_fixed = False
        
        if needs_fix:
            print(f"‚ö†Ô∏è Webhook —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {current_url} != {expected_url}")
            try:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
                delete_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook"
                delete_response = requests.post(delete_url)
                
                import time
                time.sleep(2)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
                set_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook"
                webhook_data_setup = {
                    "url": expected_url,
                    "secret_token": os.getenv('WEBHOOK_SECRET', 'Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c'),
                    "max_connections": 40,
                    "allowed_updates": ["message", "callback_query"]
                }
                
                set_response = requests.post(set_url, json=webhook_data_setup)
                print(f"üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook: {set_response.status_code}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                response = requests.get(webhook_url)
                webhook_data = response.json()
                current_url = webhook_data.get('result', {}).get('url', '')
                auto_fixed = current_url == expected_url
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook: {e}")
        
        return jsonify({
            "status": "ok",
            "webhook_info": webhook_data,
            "bot_token": TELEGRAM_BOT_TOKEN[:20] + "...",
            "expected_url": expected_url,
            "current_url": current_url,
            "pending_updates": webhook_data.get('result', {}).get('pending_update_count', 0),
            "needs_fix": needs_fix,
            "auto_fixed": auto_fixed,
            "hook_url": HOOK_URL
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/reset-webhook', methods=['GET', 'POST'])
def reset_webhook():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        delete_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook"
        delete_response = requests.post(delete_url)
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ webhook: {delete_response.status_code} - {delete_response.text}")
        
        import time
        time.sleep(2)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        webhook_url = "https://formulaprivate-productionpaymentuknow.up.railway.app/webhook"
        set_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook"
        webhook_data = {
            "url": webhook_url,
            "secret_token": os.getenv('WEBHOOK_SECRET', 'Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c'),
            "max_connections": 40,
            "allowed_updates": ["message", "callback_query"]
        }
        
        set_response = requests.post(set_url, json=webhook_data)
        print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {set_response.status_code} - {set_response.text}")
        
        return jsonify({
            "status": "ok",
            "delete_response": delete_response.json(),
            "set_response": set_response.json(),
            "webhook_url": webhook_url
        })
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/webhook', methods=['GET', 'POST'])
def telegram_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram"""
    try:
        print("=" * 50)
        print("üì• –ü–û–õ–£–ß–ï–ù WEBHOOK –û–¢ TELEGRAM!")
        print("=" * 50)
        print(f"üìã Method: {request.method}")
        print(f"üìã URL: {request.url}")
        print(f"üìã Headers: {dict(request.headers)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GET –∑–∞–ø—Ä–æ—Å—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
        if request.method == 'GET':
            print("‚úÖ GET –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook")
            return jsonify({
                "status": "ok", 
                "message": "Telegram webhook endpoint –¥–æ—Å—Ç—É–ø–µ–Ω",
                "method": "GET",
                "timestamp": datetime.now().isoformat()
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram (—Ç–æ–ª—å–∫–æ –¥–ª—è POST)
        data = request.get_json()
        print(f"üìã –î–∞–Ω–Ω—ã–µ –æ—Ç Telegram: {data}")
        print(f"üìã Raw data: {request.get_data()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç Telegram
        if not data:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ JSON")
            return jsonify({"status": "error", "message": "No data"}), 400
        
        if 'update_id' not in data:
            print("‚ùå –≠—Ç–æ –Ω–µ Telegram webhook (–Ω–µ—Ç update_id)")
            return jsonify({"status": "error", "message": "Not a Telegram webhook"}), 400
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞
        if hasattr(app, 'telegram_app'):
            print("‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ telegram_app")
            
            # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç
            update = Update.de_json(data, app.telegram_app.bot)
            print(f"üìã Update —Å–æ–∑–¥–∞–Ω: {update}")
            print(f"üìã Update ID: {update.update_id}")
            
            if update.message:
                print(f"üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.message.from_user.id}")
            elif update.callback_query:
                print(f"üìã –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.callback_query.from_user.id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            def process_update_async():
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º process_update...")
                    loop.run_until_complete(app.telegram_app.process_update(update))
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                    import traceback
                    print(f"üìã Traceback: {traceback.format_exc()}")
                finally:
                    loop.close()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=process_update_async)
            thread.start()
            print("‚úÖ –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω")
            
        else:
            print("‚ùå telegram_app –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return jsonify({"status": "ok"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/api/create-payment', methods=['POST'])
def create_payment_api():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON –∏–∑ MiniApp:
    {
      "user_id": <int>,      // Telegram user id
      "chat_id": <int>,      // chat.id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
      "email": "mail@...",
      "tariff": "basic",
      "price": 500
    }
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { ok: true, payment_url: "..." }
    """
    try:
        print("=" * 50)
        print("üì• –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ù–ê –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê!")
        print("=" * 50)
        
        data = request.get_json(force=True, silent=False)
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        if not data:
            return jsonify({"ok": False, "error": "Invalid JSON"}), 400

        user_id = int(data.get("user_id") or 0)
        chat_id = int(data.get("chat_id") or user_id)  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id, –µ—Å–ª–∏ chat_id –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏
        email = (data.get("email") or "").strip()
        tariff = (data.get("tariff") or "").strip()
        price = int(data.get("price") or 0)

        if not user_id or not price:
            return jsonify({"ok": False, "error": "user_id and price are required"}), 400

        print(f"üìã –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å: user_id={user_id}, chat_id={chat_id}, email={email}, tariff={tariff}, price={price}")

        try:
            pay_url = create_lava_invoice_api(user_id, chat_id, email, tariff, price)
            return jsonify({"ok": True, "payment_url": pay_url})
        except Exception as e:
            print(f"[create-payment] ERROR: {e}")
            return jsonify({"ok": False, "error": str(e)}), 500
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return jsonify({"ok": False, "error": str(e)}), 500

@app.route("/lava-webhook", methods=["GET", "POST"])
def lava_webhook():
    """
    –ü—Ä–∏—ë–º –≤–µ–±—Ö—É–∫–∞ –æ—Ç LAVA. –î–µ–ª–∞–µ–º —Ç–∞–∫:
      1) —á–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏–µ (invoiceId/orderId/status)
      2) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Signature
      3) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ –ø–æ API (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ–ª–∫–∏)
      4) –ø—Ä–∏ success ‚Äî —à–ª—ë–º –∏–Ω–≤–∞–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      5) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
    """
    try:
        print("=" * 50)
        print("üí∞ –ü–û–õ–£–ß–ï–ù WEBHOOK –û–¢ LAVA TOP!")
        print("=" * 50)
        
        payload = request.get_json(force=True, silent=False)
        print(f"[lava-webhook] incoming: {payload}")

        # 1) –î–æ—Å—Ç–∞—ë–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        invoice_id = (payload.get("invoiceId") or payload.get("id") or "").strip()
        order_id = (payload.get("orderId") or "").strip()
        status = (payload.get("status") or "").lower()

        # 2) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è) –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞:
        # –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        print("[lava-webhook] signature check disabled")

        # 3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ API (–ª—É—á—à–µ, —á–µ–º –≤–µ—Ä–∏—Ç—å –≤–µ–±—Ö—É–∫—É –Ω–∞ —Å–ª–æ–≤–æ)
        try:
            if invoice_id:
                status_resp = lava_get("/invoice/status", {"invoiceId": invoice_id})
            elif order_id:
                status_resp = lava_get("/invoice/status", {"orderId": order_id})
            else:
                return "missing invoiceId/orderId", 200  # –Ω–µ —Ä—É–≥–∞–µ–º—Å—è, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä

            print(f"[lava-webhook] status resp: {status_resp}")
            state = (status_resp.get("status") or status_resp.get("data", {}).get("status") or "").lower()
            oid = status_resp.get("orderId") or status_resp.get("data", {}).get("orderId") or order_id

            if state in ("success", "paid", "completed"):
                user_id, chat_id = parse_user_from_order(oid or "")
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂: user_id={user_id}, chat_id={chat_id}")
                
                # –ï—Å–ª–∏ –≤ —Ç–≤–æ–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ metadata –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ ‚Äî –º–æ–∂–Ω–æ –≤–∑—è—Ç—å chat_id –æ—Ç—Ç—É–¥–∞
                try:
                    app_obj = app  # Flask app
                    application: Application = app_obj.config.get("telegram_application")
                    if application:
                        # –∑–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
                        application.create_task(_send_invite_on_success(application, user_id, chat_id))
                except Exception as e:
                    print(f"[lava-webhook] schedule invite task error: {e}")

        except Exception as e:
            print(f"[lava-webhook] status check error: {e}")

        return "ok", 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook Lava Top: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# Telegram Bot –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    print(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.

üí° <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 50‚ÇΩ –≤ –º–µ—Å—è—Ü
    """
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="payment_menu")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more_info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, parse_mode='HTML', reply_markup=reply_markup)

async def payment_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
    text = """
üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:</b>

‚Ä¢ 1 –º–µ—Å—è—Ü - 50‚ÇΩ

–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤—É.
    """
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Mini Apps", web_app={"url": "https://acqu1red.github.io/formulaprivate/"})],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, parse_mode='HTML', reply_markup=reply_markup)

async def more_info(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    info_text = """
‚ÑπÔ∏è <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

üìã <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ø–æ–¥–ø–∏—Å–∫—É:</b>
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram –∫–∞–Ω–∞–ª—É
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 1 –º–µ—Å—è—Ü
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 50‚ÇΩ

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Lava Top
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
    """
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="payment_menu")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(info_text, parse_mode='HTML', reply_markup=reply_markup)

async def handle_web_app_data(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps"""
    print("=" * 50)
    print("üöÄ –í–´–ó–í–ê–ù–ê –§–£–ù–ö–¶–ò–Ø handle_web_app_data!")
    print("=" * 50)
    
    user = update.effective_user
    message = update.message
    
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} (@{user.username})")
    print(f"üì± –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message)}")
    print(f"üì± –ï—Å—Ç—å web_app_data: {hasattr(message, 'web_app_data')}")
    
    if hasattr(message, 'web_app_data') and message.web_app_data:
        print(f"üì± web_app_data –æ–±—ä–µ–∫—Ç: {message.web_app_data}")
        print(f"üì± web_app_data.data: {message.web_app_data.data}")
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps
            web_app_data = message.web_app_data.data
            print(f"üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps: {web_app_data}")
            
            # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ base64, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            try:
                decoded_data = base64.b64decode(web_app_data).decode('utf-8')
                print(f"üì± –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ base64: {decoded_data}")
                payment_data = json.loads(decoded_data)
            except Exception as decode_error:
                # –ï—Å–ª–∏ –Ω–µ base64, –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π JSON
                print(f"üì± –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {decode_error}")
                print(f"üì± –ü–∞—Ä—Å–∏–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π JSON: {web_app_data}")
                payment_data = json.loads(web_app_data)
            
            print(f"üìã –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {payment_data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await process_payment_data(update, context, payment_data)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data: {e}")
            import traceback
            print(f"üìã Traceback: {traceback.format_exc()}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini Apps")
    else:
        print("‚ùå web_app_data –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
        await message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ Mini Apps –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")

async def process_payment_data(update: Update, context: CallbackContext, payment_data: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Mini Apps"""
    user = update.effective_user
    message = update.message
    
    try:
        print(f"üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {payment_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (–ø–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
        step = payment_data.get('step')
        print(f"üìã –®–∞–≥ –¥–∞–Ω–Ω—ã—Ö: {step}")
        
        if step == 'final_data':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            email = payment_data.get('email')
            tariff = payment_data.get('tariff')
            price = payment_data.get('price')
            user_id = payment_data.get('userId')
            print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: email={email}, tariff={tariff}, price={price}, user_id={user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
            if not email or not tariff or not price:
                print("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
                print(f"   email: {email}")
                print(f"   tariff: {tariff}")
                print(f"   price: {price}")
                await message.reply_text("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ API...")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ API
            try:
                pay_url = create_lava_invoice_api(user.id, message.chat.id, email, tariff, price)
                print(f"‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {pay_url}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
                keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=pay_url)]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await message.reply_text(
                    f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                    f"‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:\n"
                    f"üìß Email: {email}\n"
                    f"üí≥ –¢–∞—Ä–∏—Ñ: {tariff}\n"
                    f"üí∞ –°—É–º–º–∞: {price}‚ÇΩ\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ API: {e}")
                await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
                return
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥: {step}")
            await message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

async def button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "payment_menu":
        await payment_menu(update, context)
    elif query.data == "more_info":
        await more_info(update, context)
    elif query.data == "back_to_start":
        await start(update, context)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å Lava API...")
    print(f"üîë TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:20]}...")
    print(f"üîë LAVA_API_KEY: {LAVA_API_KEY[:20]}...")
    print(f"üîë LAVA_SHOP_ID: {LAVA_SHOP_ID}")
    print(f"üîë HOOK_URL: {HOOK_URL}")
    print(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ ID: {ADMIN_IDS}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.telegram_app = application # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ Flask
    app.config["telegram_application"] = application # –î–ª—è webhook
    
    print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è web_app_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, lambda u, c: None))
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Mini Apps –¥–ª—è –±–æ—Ç–∞
    try:
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mini Apps...")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
        commands = [
            ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        ]
        
        set_commands_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setMyCommands"
        commands_data = {"commands": [{"command": cmd[0], "description": cmd[1]} for cmd in commands]}
        
        response = requests.post(set_commands_url, json=commands_data)
        if response.status_code == 200:
            print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {response.text}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Mini Apps: {e}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook URL –¥–ª—è Railway
    webhook_url = os.getenv('RAILWAY_STATIC_URL', '')
    if webhook_url:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https://
        if not webhook_url.startswith('http'):
            webhook_url = f"https://{webhook_url}"
        
        print(f"üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {webhook_url}/webhook")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook URL —á–µ—Ä–µ–∑ requests (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        webhook_setup_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook"
        webhook_data = {
            "url": f"{webhook_url}/webhook",
            "secret_token": os.getenv('WEBHOOK_SECRET', 'Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c')
        }
        
        print(f"üîß Webhook –¥–∞–Ω–Ω—ã–µ: {webhook_data}")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
            delete_webhook_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook"
            delete_response = requests.post(delete_webhook_url)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook: {delete_response.status_code} - {delete_response.text}")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            import time
            time.sleep(2)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            webhook_data_with_params = {
                "url": f"{webhook_url}/webhook",
                "secret_token": os.getenv('WEBHOOK_SECRET', 'Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c'),
                "max_connections": 40,
                "allowed_updates": ["message", "callback_query"]
            }
            
            print(f"üîß Webhook –¥–∞–Ω–Ω—ã–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {webhook_data_with_params}")
            
            response = requests.post(webhook_setup_url, json=webhook_data_with_params)
            print(f"üì° –û—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.status_code} - {response.text}")
            if response.status_code == 200:
                print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
                get_webhook_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getWebhookInfo"
                webhook_info = requests.get(get_webhook_url)
                webhook_result = webhook_info.json()
                print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook: {webhook_result}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
                if webhook_result.get('ok') and webhook_result.get('result', {}).get('url'):
                    actual_url = webhook_result['result']['url']
                    print(f"üîç –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π webhook URL: {actual_url}")
                    expected_url = f"{webhook_url}/webhook"
                    if actual_url != expected_url:
                        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: URL webhook –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
                        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_url}")
                        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {actual_url}")
                        
                        # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                        print("üîÑ –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –µ—â–µ —Ä–∞–∑...")
                        response2 = requests.post(webhook_setup_url, json=webhook_data_with_params)
                        print(f"üì° –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞: {response2.status_code} - {response2.text}")
                    else:
                        print("‚úÖ Webhook URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook")
                    print(f"üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {webhook_result}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            import traceback
            print(f"üìã Traceback: {traceback.format_exc()}")
    else:
        print("‚ö†Ô∏è RAILWAY_STATIC_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    app.run(host='0.0.0.0', port=8080, debug=False)

if __name__ == "__main__":
    main()
