#!/usr/bin/env python3
"""
Telegram Bot with Webhook support for Railway deployment - CLEAN VERSION
"""

import os
import hmac
import hashlib
import json
import time
import base64
from datetime import datetime
from urllib.parse import urlencode
import requests
from flask import Flask, request, jsonify

# –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.constants import ParseMode

# === TELEGRAM CONFIG ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "708907063,7365307696").split(",") if x.strip()]

# === LAVA API CONFIG ===
LAVA_API_BASE = os.getenv("LAVA_API_BASE", "https://api.lava.ru/business")
LAVA_API_KEY = os.getenv("LAVA_API_KEY", "whjKvjpi2oqAjTOwfbt0YUkulXCxjU5PWUJDxlQXwOuhOCNSiRq2jSX7Gd2Zihav")
LAVA_SHOP_ID = os.getenv("LAVA_SHOP_ID", "1b9f3e05-86aa-4102-9648-268f0f586bb1")
LAVA_SUCCESS_URL = os.getenv("LAVA_SUCCESS_URL", "https://t.me/formulaprivate_bot?start=paid")
LAVA_FAIL_URL = os.getenv("LAVA_FAIL_URL", "https://t.me/formulaprivate_bot?start=fail")

# –•—É–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π LAVA –ø—Ä–∏—à–ª–µ—Ç —Å—Ç–∞—Ç—É—Å:
PUBLIC_BASE_URL = os.getenv("RAILWAY_STATIC_URL") or os.getenv("PUBLIC_BASE_URL") or "https://formulaprivate-productionpaymentuknow.up.railway.app"
HOOK_URL = f"{PUBLIC_BASE_URL}/lava-webhook" if PUBLIC_BASE_URL else ""

# === CHANNEL/INVITES ===
TARGET_CHANNEL_ID = int(os.getenv("TARGET_CHANNEL_ID", "-1001234567890"))  # –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890
STATIC_INVITE_LINK = os.getenv("STATIC_INVITE_LINK")  # –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ, —Å–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É

# === MINI APPS ===
MINIAPP_URL = "https://acqu1red.github.io/formulaprivate/?type=support"
PAYMENT_MINIAPP_URL = "https://acqu1red.github.io/formulaprivate/payment.html"

# Flask app
app = Flask(__name__)

# –î–ª—è –ø–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (—á–∞—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π LAVA —Ç—Ä–µ–±—É–µ—Ç HMAC; –æ—Å—Ç–∞–≤–ª—è–µ–º –≥–∏–±–∫–æ)
def _lava_signature(body: str, secret: str) -> str:
    return hmac.new(secret.encode("utf-8"), body.encode("utf-8"), hashlib.sha256).hexdigest()

def _lava_headers(body: str) -> dict:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Bearer –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    return {
        "Authorization": f"Bearer {LAVA_API_KEY}",
        "Content-Type": "application/json",
    }

def lava_post(path: str, payload: dict) -> dict:
    url = f"{LAVA_API_BASE.rstrip('/')}/{path.lstrip('/')}"
    body = json.dumps(payload, ensure_ascii=False, separators=(",", ":"))
    headers = _lava_headers(body)
    print(f"[LAVA POST] URL: {url}")
    print(f"[LAVA POST] Headers: {headers}")
    print(f"[LAVA POST] Body: {body}")
    resp = requests.post(url, data=body.encode("utf-8"), headers=headers, timeout=20)
    print(f"[LAVA POST] Response: {resp.status_code} - {resp.text}")
    try:
        data = resp.json()
    except Exception:
        raise RuntimeError(f"Lava API non-JSON response: {resp.status_code} {resp.text[:200]}")
    if resp.status_code >= 300:
        raise RuntimeError(f"Lava API error {resp.status_code}: {data}")
    return data

def lava_get(path: str, params: dict) -> dict:
    url = f"{LAVA_API_BASE.rstrip('/')}/{path.lstrip('/')}"
    headers = {"Authorization": f"Bearer {LAVA_API_KEY}"}
    resp = requests.get(url, params=params, headers=headers, timeout=20)
    try:
        data = resp.json()
    except Exception:
        raise RuntimeError(f"Lava API non-JSON response: {resp.status_code} {resp.text[:200]}")
    if resp.status_code >= 300:
        raise RuntimeError(f"Lava API error {resp.status_code}: {data}")
    return data

def create_lava_invoice_api(user_id: int, chat_id: int, email: str, tariff: str, price_rub: int) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É Lava Top.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π URL –≤–º–µ—Å—Ç–æ API –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–ø–∏—Å—å—é.
    """
    if not LAVA_SHOP_ID:
        raise RuntimeError("LAVA_SHOP_ID is not set")

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π orderId: —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ user_id, –∏ chat_id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    ts = int(time.time())
    order_id = f"order_{user_id}_{chat_id}_{ts}"

    # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Lava Top
    # –§–æ—Ä–º–∞—Ç: https://app.lava.top/ru/products/{shop_id}/{product_id}?currency=RUB&amount={amount}&order_id={order_id}&metadata={json.dumps(...)}
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º product_id –∏–∑ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–∏
    product_id = "302ecdcd-1581-45ad-8353-a168f347b8cc"
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ URL
    metadata = {
        "user_id": str(user_id),
        "chat_id": str(chat_id),
        "email": email,
        "tariff": tariff
    }
    
    # –°–æ–∑–¥–∞–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = {
        "currency": "RUB",
        "amount": str(price_rub),
        "order_id": order_id,
        "metadata": json.dumps(metadata, ensure_ascii=False)
    }
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å webhook URL, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if HOOK_URL:
        params["hook_url"] = HOOK_URL
    
    # –°–æ–∑–¥–∞–µ–º URL
    base_url = f"https://app.lava.top/ru/products/{LAVA_SHOP_ID}/{product_id}"
    query_string = urlencode(params)
    pay_url = f"{base_url}?{query_string}"

    print(f"[create_lava_invoice_api] Generated direct pay_url: {pay_url}")
    return pay_url

def parse_user_from_order(order_id: str) -> tuple[int, int]:
    """
    –ñ–¥—ë–º —Ñ–æ—Ä–º–∞—Ç: order_<user_id>_<chat_id>_<timestamp>
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (user_id, chat_id) –ª–∏–±–æ (0, 0).
    """
    try:
        parts = order_id.split("_")
        return int(parts[1]), int(parts[2])
    except Exception:
        return 0, 0

async def _send_invite_on_success(application: Application, user_id: int, chat_id: int) -> None:
    """
    –ï—Å–ª–∏ –∑–∞–¥–∞–Ω STATIC_INVITE_LINK ‚Äî —à–ª—ë–º –µ—ë.
    –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞!).
    """
    invite_link = STATIC_INVITE_LINK
    if not invite_link:
        # –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –∂–∏–≤—ë—Ç 1 –¥–µ–Ω—å.
        expire_date = int(time.time()) + 86400
        res = await application.bot.create_chat_invite_link(
            chat_id=TARGET_CHANNEL_ID,
            name=f"paid_{user_id}_{int(time.time())}",
            expire_date=expire_date,
            member_limit=1
        )
        invite_link = res.invite_link

    text = (
        "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
        f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n{invite_link}\n\n"
        "–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º."
    )
    try:
        await application.bot.send_message(chat_id=chat_id or user_id, text=text)
        print(f"[_send_invite_on_success] Invite sent to {chat_id or user_id}")
    except Exception as e:
        print(f"[_send_invite_on_success] Failed to send invite to {chat_id or user_id}: {e}")

# Flask endpoints
@app.route("/health")
def health():
    return "ok"

@app.route("/webhook", methods=["GET", "POST"])
def telegram_webhook():
    """Telegram webhook endpoint"""
    if request.method == "GET":
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ webhook –ø—Ä–∏ GET –∑–∞–ø—Ä–æ—Å–µ
        try:
            webhook_url = f"{PUBLIC_BASE_URL}/webhook"
            webhook_data = {
                "url": webhook_url,
                "secret_token": "Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c",
                "max_connections": 40,
                "allowed_updates": ["message", "callback_query"]
            }
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
            delete_response = requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook"
            )
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook: {delete_response.status_code} - {delete_response.text}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
            set_response = requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook",
                json=webhook_data
            )
            print(f"üì° –û—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {set_response.status_code} - {set_response.text}")
            
            return jsonify({"status": "webhook_updated", "url": webhook_url})
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è webhook: {e}")
            return jsonify({"error": str(e)}), 500
    
    # POST - –æ–±—Ä–∞–±–æ—Ç–∫–∞ Telegram updates
    try:
        print(f"üì± –ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook")
        print(f"üì± Headers: {dict(request.headers)}")
        print(f"üì± Content-Type: {request.content_type}")
        
        update_data = request.get_json(force=True, silent=False)
        print(f"üì± –ü–æ–ª—É—á–µ–Ω Telegram update: {update_data}")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º update –≤ Telegram application
        application = app.config.get("telegram_application")
        if application:
            print(f"üì± Application –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update...")
            # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç
            update = Update.de_json(update_data, application.bot)
            print(f"üì± Update –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {update}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            try:
                application.process_update(update)
                print(f"üì± Update –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as process_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: {process_error}")
                import traceback
                print(f"‚ùå Traceback: {traceback.format_exc()}")
        else:
            print(f"‚ùå Application –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ app.config")
        
        return "ok"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram update: {e}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        return "error", 500

@app.route("/api/create-payment", methods=["POST"])
def create_payment_api():
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON –∏–∑ MiniApp:
    {
      "user_id": <int>,      // Telegram user id
      "chat_id": <int>,      // chat.id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
      "email": "mail@...",
      "tariff": "basic",
      "price": 500
    }
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { ok: true, payment_url: "..." }
    """
    try:
        data = request.get_json(force=True, silent=False)
        print(f"üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {data}")
    except Exception:
        return jsonify({"ok": False, "error": "Invalid JSON"}), 400

    user_id = int(data.get("user_id") or 0)
    chat_id = int(data.get("chat_id") or user_id)  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id, –µ—Å–ª–∏ chat_id –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏
    email = (data.get("email") or "").strip()
    tariff = (data.get("tariff") or "").strip()
    price = int(data.get("price") or 0)

    if not user_id or not price:
        return jsonify({"ok": False, "error": "user_id and price are required"}), 400

    try:
        pay_url = create_lava_invoice_api(user_id, chat_id, email, tariff, price)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂: {pay_url}")
        return jsonify({"ok": True, "payment_url": pay_url})
    except Exception as e:
        print(f"[create-payment] ERROR: {e}")
        return jsonify({"ok": False, "error": str(e)}), 500

@app.route("/lava-webhook", methods=["GET", "POST"])
def lava_webhook():
    """
    –ü—Ä–∏—ë–º –≤–µ–±—Ö—É–∫–∞ –æ—Ç LAVA. –î–µ–ª–∞–µ–º —Ç–∞–∫:
      1) —á–∏—Ç–∞–µ–º —Å–æ–±—ã—Ç–∏–µ (invoiceId/orderId/status)
      2) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Signature
      3) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ –ø–æ API (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ–ª–∫–∏)
      4) –ø—Ä–∏ success ‚Äî —à–ª—ë–º –∏–Ω–≤–∞–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      5) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
    """
    if request.method == "GET":
        return "Lava webhook endpoint is working"
    
    try:
        payload = request.get_json(force=True, silent=False)
    except Exception:
        return "bad json", 400

    print(f"[lava-webhook] incoming: {payload}")

    # 1) –î–æ—Å—Ç–∞—ë–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    invoice_id = (payload.get("invoiceId") or payload.get("id") or "").strip()
    order_id = (payload.get("orderId") or "").strip()
    status = (payload.get("status") or "").lower()

    # 2) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è) –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞:
    # try:
    #     # –ï—Å–ª–∏ LAVA –ø—Ä–∏—Å—ã–ª–∞–µ—Ç 'X-Signature' –∫–∞–∫ HMAC(body, secret) ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º:
    #     given_sig = request.headers.get("X-Signature")
    #     if given_sig:
    #         expected = _lava_signature(json.dumps(payload, ensure_ascii=False, separators=(",", ":")), LAVA_API_KEY)
    #         if not hmac.compare_digest(given_sig, expected):
    #             print("[lava-webhook] signature mismatch")
    #             # –Ω–µ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º, –Ω–æ –æ—Ç–º–µ—Ç–∏–º –≤ –ª–æ–≥–∞—Ö
    # except Exception as _:
    #     pass

    # 3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ API (–ª—É—á—à–µ, —á–µ–º –≤–µ—Ä–∏—Ç—å –≤–µ–±—Ö—É–∫—É –Ω–∞ —Å–ª–æ–≤–æ)
    try:
        if invoice_id:
            status_resp = lava_get("/invoice/status", {"invoiceId": invoice_id})
        elif order_id:
            status_resp = lava_get("/invoice/status", {"orderId": order_id})
        else:
            return "missing invoiceId/orderId", 200  # –Ω–µ —Ä—É–≥–∞–µ–º—Å—è, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä

        print(f"[lava-webhook] status resp: {status_resp}")
        state = (status_resp.get("status") or status_resp.get("data", {}).get("status") or "").lower()
        oid = status_resp.get("orderId") or status_resp.get("data", {}).get("orderId") or order_id

        if state in ("success", "paid", "completed"):
            user_id, chat_id = parse_user_from_order(oid or "")
            # –ï—Å–ª–∏ –≤ —Ç–≤–æ–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ metadata –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ ‚Äî –º–æ–∂–Ω–æ –≤–∑—è—Ç—å chat_id –æ—Ç—Ç—É–¥–∞
            try:
                application: Application = app.config.get("telegram_application")
                if application:
                    # –∑–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
                    application.create_task(_send_invite_on_success(application, user_id, chat_id))
            except Exception as e:
                print(f"[lava-webhook] schedule invite task error: {e}")

    except Exception as e:
        print(f"[lava-webhook] status check error: {e}")

    return "ok", 200

@app.route("/webhook-info")
def webhook_info():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ webhook"""
    try:
        response = requests.get(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getWebhookInfo")
        webhook_info = response.json()
        print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook: {webhook_info}")
        
        if webhook_info.get("ok"):
            result = webhook_info.get("result", {})
            current_url = result.get("url", "")
            expected_url = f"{PUBLIC_BASE_URL}/webhook"
            
            print(f"üîç –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π webhook URL: {current_url}")
            print(f"üîç –û–∂–∏–¥–∞–µ–º—ã–π webhook URL: {expected_url}")
            
            if current_url == expected_url:
                print("‚úÖ Webhook URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
                return jsonify({"status": "ok", "webhook_info": webhook_info})
            else:
                print("‚ùå Webhook URL –Ω–µ–≤–µ—Ä–Ω—ã–π, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º...")
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                webhook_data = {
                    "url": expected_url,
                    "secret_token": "Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c",
                    "max_connections": 40,
                    "allowed_updates": ["message", "callback_query"]
                }
                
                set_response = requests.post(
                    f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook",
                    json=webhook_data
                )
                print(f"üì° –û—Ç–≤–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook: {set_response.status_code} - {set_response.text}")
                
                return jsonify({"status": "fixed", "webhook_info": webhook_info})
        else:
            return jsonify({"status": "error", "webhook_info": webhook_info})
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/reset-webhook", methods=["GET", "POST"])
def reset_webhook():
    """–°–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        webhook_url = f"{PUBLIC_BASE_URL}/webhook"
        webhook_data = {
            "url": webhook_url,
            "secret_token": "Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c",
            "max_connections": 40,
            "allowed_updates": ["message", "callback_query"]
        }
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        delete_response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook"
        )
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook: {delete_response.status_code} - {delete_response.text}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        set_response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook",
            json=webhook_data
        )
        print(f"üì° –û—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {set_response.status_code} - {set_response.text}")
        
        if set_response.status_code == 200:
            print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return jsonify({"status": "success", "url": webhook_url})
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
            return jsonify({"status": "error", "response": set_response.text}), 500
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/debug")
def debug_info():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    debug_data = {
        "TELEGRAM_BOT_TOKEN": TELEGRAM_BOT_TOKEN[:20] + "..." if TELEGRAM_BOT_TOKEN else "NOT SET",
        "LAVA_API_KEY": LAVA_API_KEY[:20] + "..." if LAVA_API_KEY else "NOT SET",
        "LAVA_SHOP_ID": LAVA_SHOP_ID,
        "PUBLIC_BASE_URL": PUBLIC_BASE_URL,
        "HOOK_URL": HOOK_URL,
        "ADMIN_IDS": ADMIN_IDS,
        "TARGET_CHANNEL_ID": TARGET_CHANNEL_ID,
        "STATIC_INVITE_LINK": STATIC_INVITE_LINK or "NOT SET"
    }
    return jsonify(debug_data)

# Telegram bot handlers
async def start_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    print(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}")
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Formula Private Channel!\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", web_app=WebAppInfo(url=PAYMENT_MINIAPP_URL))]
    ])
    
    await update.message.reply_text(welcome_text, reply_markup=keyboard)

async def handle_web_app_data(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App"""
    try:
        if not update.message or not update.message.web_app_data:
            return
            
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        print(f"üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        print(f"üì± –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è: {dir(update.message)}")
        print(f"üì± web_app_data.data —Ç–∏–ø: {type(update.message.web_app_data.data)}")
        print(f"üì± –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {update.message}")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App (–æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ base64)
        raw_data = update.message.web_app_data.data
        try:
            decoded_data = base64.b64decode(raw_data).decode('utf-8')
            payment_data = json.loads(decoded_data)
            print(f"üì± –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (base64): {payment_data}")
        except Exception as decode_error:
            print(f"üì± –û—à–∏–±–∫–∞ base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {decode_error}")
            # Fallback: –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π JSON
            try:
                payment_data = json.loads(raw_data)
                print(f"üì± –î–∞–Ω–Ω—ã–µ (–ø—Ä—è–º–æ–π JSON): {payment_data}")
            except Exception as json_error:
                print(f"üì± –û—à–∏–±–∫–∞ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞: {json_error}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        
        print(f"üìã –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(payment_data)}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payment_data
        if isinstance(payment_data, dict):
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {step: "final_data", data: {...}}
            if "step" in payment_data and payment_data["step"] == "final_data":
                final_data = payment_data.get("data", {})
                email = final_data.get("email", "")
                tariff = final_data.get("tariff", "1_month")
                price = int(final_data.get("price", 50))
            else:
                # –ü—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
                email = payment_data.get("email", "")
                tariff = payment_data.get("tariff", "1_month")
                price = int(payment_data.get("price", 50))
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: email={email}, tariff={tariff}, price={price}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API
        try:
            pay_url = create_lava_invoice_api(user.id, chat_id, email, tariff, price)
            
            text = (
                "‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –ø—Ä–∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å (Lava)", url=pay_url)]
            ])
            await update.message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            # –õ–æ–≥ –∞–¥–º–∏–Ω–∞–º
            for admin in ADMIN_IDS:
                try:
                    await context.bot.send_message(admin, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
                except:
                    pass
                    
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ handle_web_app_data: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def payment_menu(update: Update, context):
    """–ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", web_app=WebAppInfo(url=PAYMENT_MINIAPP_URL))]
    ])
    
    text = (
        "üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏."
    )
    
    await update.message.reply_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

async def button(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "payment":
        await payment_menu(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º Telegram application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º application –≤ Flask app –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ webhook
    app.config["telegram_application"] = application
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook...")
    print(f"üîë TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:20]}...")
    print(f"üîë LAVA_SHOP_ID: {LAVA_SHOP_ID}")
    print(f"üîë LAVA_SECRET_KEY: {LAVA_API_KEY[:20]}...")
    print(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ ID: {ADMIN_IDS}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("payment", payment_menu))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    application.add_handler(CallbackQueryHandler(button))
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mini Apps
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mini Apps...")
    try:
        application.bot.set_my_commands([
            ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            ("payment", "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        ])
        print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    webhook_url = f"{PUBLIC_BASE_URL}/webhook"
    print(f"üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {webhook_url}")
    
    webhook_data = {
        "url": webhook_url,
        "secret_token": "Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c",
        "max_connections": 40,
        "allowed_updates": ["message", "callback_query"]
    }
    
    print(f"üîß Webhook –¥–∞–Ω–Ω—ã–µ: {webhook_data}")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        delete_response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook"
        )
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook: {delete_response.status_code} - {delete_response.text}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        set_response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook",
            json=webhook_data
        )
        print(f"üì° –û—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {set_response.status_code} - {set_response.text}")
        
        if set_response.status_code == 200:
            print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask app
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)), debug=False)

if __name__ == "__main__":
    main()
