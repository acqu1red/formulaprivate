#!/usr/bin/env python3
"""
Telegram Bot with Webhook support for Railway deployment
"""

import os
import logging
import requests
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, CallbackContext, filters
from supabase import create_client, Client

# Email –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Telegram
def send_email_invitation(email, tariff, subscription_id):
    print(f"üìß Email –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞: {email}, —Ç–∞—Ä–∏—Ñ: {tariff}")
    return True

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health check
app = Flask(__name__)

# Health check endpoint –¥–ª—è Railway
@app.route('/health', methods=['GET'])
def health_check():
    return jsonify({"status": "healthy", "service": "telegram-bot-webhook"})

# –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
@app.route('/test', methods=['GET'])
def test_bot():
    return jsonify({
        "status": "ok",
        "message": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "telegram_token": TELEGRAM_BOT_TOKEN[:20] + "...",
        "lava_shop_id": LAVA_SHOP_ID,
        "webhook_url": f"https://formulaprivate-production.up.railway.app/webhook"
    })

# Webhook endpoint –¥–ª—è Telegram
@app.route('/webhook', methods=['POST'])
def telegram_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram"""
    try:
        print("=" * 50)
        print("üì• –ü–û–õ–£–ß–ï–ù WEBHOOK –û–¢ TELEGRAM!")
        print("=" * 50)
        print(f"üìã Headers: {dict(request.headers)}")
        print(f"üìã Method: {request.method}")
        print(f"üìã URL: {request.url}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
        data = request.get_json()
        print(f"üìã –î–∞–Ω–Ω—ã–µ –æ—Ç Telegram: {data}")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞
        if hasattr(app, 'telegram_app'):
            print("‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ telegram_app")
            
            # –°–æ–∑–¥–∞–µ–º Update –æ–±—ä–µ–∫—Ç
            update = Update.de_json(data, app.telegram_app.bot)
            print(f"üìã Update —Å–æ–∑–¥–∞–Ω: {update}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import threading
            def process_update_async():
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(app.telegram_app.process_update(update))
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                finally:
                    loop.close()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=process_update_async)
            thread.start()
            print("‚úÖ –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—É—â–µ–Ω")
            
        else:
            print("‚ùå telegram_app –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return jsonify({"status": "ok"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

# Webhook endpoint –¥–ª—è Lava Top
@app.route('/lava-webhook', methods=['GET', 'POST'])
def lava_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Lava Top"""
    try:
        print("=" * 50)
        print("üì• –ü–û–õ–£–ß–ï–ù WEBHOOK –û–¢ LAVA TOP!")
        print("=" * 50)
        print(f"üìã Method: {request.method}")
        print(f"üìã URL: {request.url}")
        print(f"üìã Headers: {dict(request.headers)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API key –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        api_key_header = request.headers.get('X-API-Key') or request.headers.get('Authorization')
        print(f"üîç API Key: {api_key_header}")
        
        if api_key_header:
            if api_key_header.startswith('Bearer '):
                api_key_header = api_key_header[7:]
            
            expected_api_key = 'LavaTop_Webhook_Secret_2024_Formula_Private_Channel_8x9y2z'
            if api_key_header != expected_api_key:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API key")
                return jsonify({"status": "error", "message": "Unauthorized"}), 401
            else:
                print("‚úÖ API key –≤–µ—Ä–Ω—ã–π")
        else:
            print("‚ö†Ô∏è API key –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
        if request.method == 'GET':
            print("üîç GET –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            data = request.args.to_dict()
        elif request.method == 'POST':
            print("üîç POST –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ body")
            data = request.get_json()
            if not data:
                data = request.form.to_dict()
        else:
            return jsonify({"status": "error", "message": "Method not allowed"}), 405
        
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment_status = data.get('status')
        order_id = data.get('order_id')
        amount = data.get('amount')
        currency = data.get('currency')
        metadata = data.get('metadata', {})
        
        # –ï—Å–ª–∏ metadata —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        if isinstance(metadata, str):
            try:
                import json
                metadata = json.loads(metadata)
            except:
                metadata = {}
        
        print(f"üìã Metadata: {metadata}")
        
        if payment_status == 'success':
            print("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ metadata
            user_id = metadata.get('user_id') or metadata.get('telegram_id')
            email = metadata.get('email')
            tariff = metadata.get('tariff')
            
            print(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: user_id={user_id}, email={email}, tariff={tariff}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ Telegram
            if user_id:
                try:
                    user_id = int(user_id)
                    print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    subscription_id = create_subscription(user_id, email, tariff, amount, currency, order_id, metadata)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    success_message = f"""
üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>

‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
üìß Email: {email}
üí≥ –¢–∞—Ä–∏—Ñ: {tariff}
üí∞ –°—É–º–º–∞: {amount} {currency}
üÜî ID –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_id}

üîó <a href="https://t.me/+6SQb4RwwAmZlMWQ6">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É</a>
                    """
                    
                    keyboard = [[InlineKeyboardButton("üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É", url="https://t.me/+6SQb4RwwAmZlMWQ6")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    bot_token = os.getenv('TELEGRAM_BOT_TOKEN', '7593794536:AAGSiEJolK1O1H5LMtHxnbygnuhTDoII6qc')
                    send_message_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                    message_data = {
                        "chat_id": user_id,
                        "text": success_message,
                        "parse_mode": "HTML",
                        "reply_markup": reply_markup.to_dict()
                    }
                    
                    response = requests.post(send_message_url, json=message_data)
                    if response.status_code == 200:
                        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            else:
                print("‚ùå user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ metadata")
            
            print("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª: {payment_status}")
        
        return jsonify({"status": "ok"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Lava Top webhook: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return jsonify({"status": "error", "message": str(e)}), 500

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '7593794536:AAGSiEJolK1O1H5LMtHxnbygnuhTDoII6qc')
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')
WEBHOOK_PATH = '/webhook'

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
ADMIN_IDS = [708907063, 7365307696]

# Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL', 'https://uhhsrtmmuwoxsdquimaa.supabase.co')
SUPABASE_KEY = os.getenv('SUPABASE_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8')
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Lava Top –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LAVA_SHOP_ID = os.getenv('LAVA_SHOP_ID', '1b9f3e05-86aa-4102-9648-268f0f586bb1')
LAVA_SECRET_KEY = os.getenv('LAVA_SECRET_KEY', 'whjKvjpi2oqAjTOwfbt0YUkulXCxjU5PWUJDxlQXwOuhOCNSiRq2jSX7Gd2Zihav')
LAVA_PRODUCT_ID = os.getenv('LAVA_PRODUCT_ID', '302ecdcd-1581-45ad-8353-a168f347b8cc')

def create_subscription(user_id, email, tariff, amount, currency, order_id, metadata):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        tariff_durations = {
            '1month': 30,
            '1_month': 30,
            '3months': 90,
            '6months': 180,
            '12months': 365
        }
        
        duration_days = tariff_durations.get(tariff, 30)
        end_date = datetime.utcnow() + timedelta(days=duration_days)
        
        subscription_data = {
            'user_id': str(user_id),
            'email': email,
            'tariff': tariff,
            'amount': amount,
            'currency': currency,
            'order_id': order_id,
            'start_date': datetime.utcnow().isoformat(),
            'end_date': end_date.isoformat(),
            'status': 'active',
            'metadata': metadata
        }
        
        print(f"üìä –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É: {subscription_data}")
        
        result = supabase.table('subscriptions').insert(subscription_data).execute()
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {result}")
        
        return result.data[0]['id'] if result.data else 'unknown'
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return 'error'

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    print(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    print(f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name or ''} (@{user.username or '–±–µ–∑ username'})")
    print(f"üìã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.

üí° <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 50‚ÇΩ –≤ –º–µ—Å—è—Ü
    """
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="payment_menu")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="more_info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, parse_mode='HTML', reply_markup=reply_markup)

async def payment(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payment"""
    await payment_menu(update, context)

async def more_info(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /more_info"""
    info_text = """
‚ÑπÔ∏è <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

üìã <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ø–æ–¥–ø–∏—Å–∫—É:</b>
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É Telegram –∫–∞–Ω–∞–ª—É
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> 1 –º–µ—Å—è—Ü
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 50‚ÇΩ

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Lava Top
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è
    """
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="payment_menu")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(info_text, parse_mode='HTML', reply_markup=reply_markup)

async def payment_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
    text = """
üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:</b>

‚Ä¢ 1 –º–µ—Å—è—Ü - 50‚ÇΩ

–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤—É.
    """
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 50‚ÇΩ", callback_data="lava_payment")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode='HTML', reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, parse_mode='HTML', reply_markup=reply_markup)

async def handle_lava_payment(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    user = query.from_user
    
    print(f"üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã")
    
    await query.edit_message_text(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Mini Apps:\n"
        f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å' –Ω–∏–∂–µ\n"
        f"2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email\n"
        f"3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ\n"
        f"4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ\n\n"
        f"–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", web_app=WebAppInfo(url="https://formulaprivate-production.up.railway.app/payment.html"))],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="payment_menu")]
        ])
    )

async def handle_web_app_data(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps"""
    print("üöÄ –í–´–ó–í–ê–ù–ê –§–£–ù–ö–¶–ò–Ø handle_web_app_data!")
    user = update.effective_user
    message = update.message
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps
        web_app_data = message.web_app_data.data
        print(f"üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps: {web_app_data}")
        
        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
        import json
        payment_data = json.loads(web_app_data)
        print(f"üìã –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {payment_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (–ø–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
        step = payment_data.get('step')
        print(f"üìã –®–∞–≥ –¥–∞–Ω–Ω—ã—Ö: {step}")
        
        if step == 'test_connection':
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
            await message.reply_text("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return
            
        elif step == 'email_data':
            email = payment_data.get('email')
            print(f"üìß –ü–æ–ª—É—á–µ–Ω email: {email}")
            await message.reply_text(f"üìß Email –ø–æ–ª—É—á–µ–Ω: {email}")
            return
            
        elif step == 'tariff_data':
            tariff = payment_data.get('tariff')
            price = payment_data.get('price')
            print(f"üí≥ –ü–æ–ª—É—á–µ–Ω tariff: {tariff}, —Ü–µ–Ω–∞: {price}")
            await message.reply_text(f"üí≥ Tariff –ø–æ–ª—É—á–µ–Ω: {tariff}, —Ü–µ–Ω–∞: {price}‚ÇΩ")
            return
            
        elif step == 'payment_method_data':
            payment_method = payment_data.get('paymentMethod')
            bank = payment_data.get('bank')
            print(f"üè¶ –ü–æ–ª—É—á–µ–Ω payment method: {payment_method}, –±–∞–Ω–∫: {bank}")
            await message.reply_text(f"üè¶ Payment method –ø–æ–ª—É—á–µ–Ω: {payment_method}, –±–∞–Ω–∫: {bank}")
            return
            
        elif step == 'user_id_data':
            user_id = payment_data.get('userId')
            print(f"üë§ –ü–æ–ª—É—á–µ–Ω user ID: {user_id}")
            await message.reply_text(f"üë§ User ID –ø–æ–ª—É—á–µ–Ω: {user_id}")
            return
            
        elif step == 'final_data':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            email = payment_data.get('email')
            tariff = payment_data.get('tariff')
            price = payment_data.get('price')
            user_id = payment_data.get('userId')
            print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: email={email}, tariff={tariff}, price={price}, user_id={user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
            if not email or not tariff or not price:
                await message.reply_text("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Lava Top API
            invoice_data = {
                "shop_id": LAVA_SHOP_ID,
                "amount": int(price * 100),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
                "currency": "RUB",
                "order_id": f"order_{user.id}_{int(datetime.now().timestamp())}",
                "hook_url": f"https://formulaprivate-production.up.railway.app/lava-webhook",
                "success_url": "https://t.me/+6SQb4RwwAmZlMWQ6",
                "fail_url": "https://t.me/+6SQb4RwwAmZlMWQ6",
                "metadata": {
                    "user_id": str(user.id),
                    "telegram_id": str(user.id),
                    "tariff": tariff,
                    "email": email,
                    "username": user.username if user.username else None,
                    "first_name": user.first_name if user.first_name else None
                }
            }
            
            print(f"üì§ –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —Å –¥–∞–Ω–Ω—ã–º–∏: {invoice_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Lava Top API
            api_url = "https://api.lava.top/business/invoice/create"
            headers = {
                "Authorization": f"Bearer {LAVA_SECRET_KEY}",
                "Content-Type": "application/json"
            }
            
            response = requests.post(api_url, json=invoice_data, headers=headers)
            print(f"üì° –û—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
            
            if response.status_code == 200:
                result = response.json()
                payment_url = result.get('data', {}).get('url')
                
                if payment_url:
                    print(f"‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {payment_url}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
                    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await message.reply_text(
                        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                        f"‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:\n"
                        f"üìß Email: {email}\n"
                        f"üí≥ –¢–∞—Ä–∏—Ñ: {tariff}\n"
                        f"üí∞ –°—É–º–º–∞: {price}‚ÇΩ\n\n"
                        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                        parse_mode='HTML',
                        reply_markup=reply_markup
                    )
                    return
                else:
                    print(f"‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {result}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Mini Apps: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
    
    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    await message.reply_text(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )

async def handle_all_messages(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    message = update.message
    
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    print(f"üìã –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message)}")
    print(f"üìã –ê—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è: {dir(message)}")
    print(f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.text if hasattr(message, 'text') else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}")
    print(f"üìã web_app_data: {getattr(message, 'web_app_data', '–ù–ï–¢')}")
    print(f"üìã hasattr web_app_data: {hasattr(message, 'web_app_data')}")
    if hasattr(message, 'web_app_data') and message.web_app_data:
        print(f"üìã web_app_data.data: {getattr(message.web_app_data, 'data', '–ù–ï–¢ DATA')}")
        print(f"üìã web_app_data.type: {getattr(message.web_app_data, 'type', '–ù–ï–¢ TYPE')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Mini Apps
    if hasattr(message, 'web_app_data'):
        print(f"üì± web_app_data –Ω–∞–π–¥–µ–Ω: {message.web_app_data}")
        if message.web_app_data and hasattr(message.web_app_data, 'data') and message.web_app_data.data:
            print(f"üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps: {message.web_app_data.data}")
            await handle_web_app_data(update, context)
            return
        else:
            print(f"üì± web_app_data –ø—É—Å—Ç–æ–π –∏–ª–∏ –±–µ–∑ data")
    else:
        print(f"üì± web_app_data –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ JSON –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    if message.text:
        try:
            import json
            data = json.loads(message.text)
            if isinstance(data, dict) and 'step' in data:
                print(f"üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã JSON –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ: {data}")
                await handle_web_app_data_from_text(update, context, data)
                return
        except:
            pass
    
    # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply_text(
        "üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!"
    )

async def handle_web_app_data_from_text(update: Update, context: CallbackContext, payment_data: dict):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user = update.effective_user
    message = update.message
    
    try:
        print(f"üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {payment_data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö (–ø–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)
        step = payment_data.get('step')
        print(f"üìã –®–∞–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞: {step}")
        
        if step == 'test_connection':
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞!")
            await message.reply_text("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return
            
        elif step == 'email_data':
            email = payment_data.get('email')
            print(f"üìß –ü–æ–ª—É—á–µ–Ω email –∏–∑ —Ç–µ–∫—Å—Ç–∞: {email}")
            await message.reply_text(f"üìß Email –ø–æ–ª—É—á–µ–Ω: {email}")
            return
            
        elif step == 'tariff_data':
            tariff = payment_data.get('tariff')
            price = payment_data.get('price')
            print(f"üí≥ –ü–æ–ª—É—á–µ–Ω tariff –∏–∑ —Ç–µ–∫—Å—Ç–∞: {tariff}, —Ü–µ–Ω–∞: {price}")
            await message.reply_text(f"üí≥ Tariff –ø–æ–ª—É—á–µ–Ω: {tariff}, —Ü–µ–Ω–∞: {price}‚ÇΩ")
            return
            
        elif step == 'payment_method_data':
            payment_method = payment_data.get('paymentMethod')
            bank = payment_data.get('bank')
            print(f"üè¶ –ü–æ–ª—É—á–µ–Ω payment method –∏–∑ —Ç–µ–∫—Å—Ç–∞: {payment_method}, –±–∞–Ω–∫: {bank}")
            await message.reply_text(f"üè¶ Payment method –ø–æ–ª—É—á–µ–Ω: {payment_method}, –±–∞–Ω–∫: {bank}")
            return
            
        elif step == 'user_id_data':
            user_id = payment_data.get('userId')
            print(f"üë§ –ü–æ–ª—É—á–µ–Ω user ID –∏–∑ —Ç–µ–∫—Å—Ç–∞: {user_id}")
            await message.reply_text(f"üë§ User ID –ø–æ–ª—É—á–µ–Ω: {user_id}")
            return
            
        elif step == 'final_data':
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            email = payment_data.get('email')
            tariff = payment_data.get('tariff')
            price = payment_data.get('price')
            user_id = payment_data.get('userId')
            print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞: email={email}, tariff={tariff}, price={price}, user_id={user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
            if not email or not tariff or not price:
                await message.reply_text("‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        email = payment_data.get('email')
        tariff = payment_data.get('tariff')
        price = payment_data.get('price')
        user_id = payment_data.get('userId')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Lava Top API
        invoice_data = {
            "shop_id": LAVA_SHOP_ID,
            "amount": int(price * 100),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
            "currency": "RUB",
            "order_id": f"order_{user.id}_{int(datetime.now().timestamp())}",
            "hook_url": f"https://formulaprivate-production.up.railway.app/lava-webhook",
            "success_url": "https://t.me/+6SQb4RwwAmZlMWQ6",
            "fail_url": "https://t.me/+6SQb4RwwAmZlMWQ6",
            "metadata": {
                "user_id": str(user.id),
                "telegram_id": str(user.id),
                "tariff": tariff,
                "email": email,
                "username": user.username if user.username else None,
                "first_name": user.first_name if user.first_name else None
            }
        }
        
        print(f"üì§ –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —Å –¥–∞–Ω–Ω—ã–º–∏: {invoice_data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Lava Top API
        api_url = "https://api.lava.top/business/invoice/create"
        headers = {
            "Authorization": f"Bearer {LAVA_SECRET_KEY}",
            "Content-Type": "application/json"
        }
        
        response = requests.post(api_url, json=invoice_data, headers=headers)
        print(f"üì° –û—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            payment_url = result.get('data', {}).get('url')
            
            if payment_url:
                print(f"‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {payment_url}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
                keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await message.reply_text(
                    f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                    f"‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:\n"
                    f"üìß Email: {email}\n"
                    f"üí≥ –¢–∞—Ä–∏—Ñ: {tariff}\n"
                    f"üí∞ –°—É–º–º–∞: {price}‚ÇΩ\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                return
            else:
                print(f"‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {result}")
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
    
    # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    await message.reply_text(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )

async def button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "payment_menu":
        await payment_menu(update, context)
    elif query.data == "lava_payment":
        await handle_lava_payment(update, context)
    elif query.data == "more_info":
        await more_info(update, context)
    elif query.data == "back_to_start":
        await start(update, context)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook...")
    print(f"üîë TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:20]}...")
    print(f"üîë LAVA_SHOP_ID: {LAVA_SHOP_ID}")
    print(f"üîë LAVA_SECRET_KEY: {LAVA_SECRET_KEY[:20]}...")
    print(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ ID: {ADMIN_IDS}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.telegram_app = application # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ Flask
    
    print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è web_app_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("payment", payment))
    application.add_handler(CommandHandler("more_info", more_info))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_all_messages))
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Mini Apps –¥–ª—è –±–æ—Ç–∞
    try:
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mini Apps...")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ—Ç–∞
        commands = [
            ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            ("payment", "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
            ("more_info", "–ü–æ–¥—Ä–æ–±–Ω–µ–µ")
        ]
        
        set_commands_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setMyCommands"
        commands_data = {"commands": [{"command": cmd[0], "description": cmd[1]} for cmd in commands]}
        
        response = requests.post(set_commands_url, json=commands_data)
        if response.status_code == 200:
            print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {response.text}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Mini Apps: {e}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook URL –¥–ª—è Railway
    webhook_url = os.getenv('RAILWAY_STATIC_URL', '')
    if webhook_url:
        print(f"üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {webhook_url}/webhook")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook URL —á–µ—Ä–µ–∑ requests (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        webhook_setup_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook"
        webhook_data = {
            "url": f"{webhook_url}/webhook",
            "secret_token": os.getenv('WEBHOOK_SECRET', 'Telegram_Webhook_Secret_2024_Formula_Bot_7a6b5c')
        }
        
        print(f"üîß Webhook –¥–∞–Ω–Ω—ã–µ: {webhook_data}")
        
        try:
            response = requests.post(webhook_setup_url, json=webhook_data)
            print(f"üì° –û—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.status_code} - {response.text}")
            if response.status_code == 200:
                print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
                get_webhook_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getWebhookInfo"
                webhook_info = requests.get(get_webhook_url)
                print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook: {webhook_info.json()}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    else:
        print("‚ö†Ô∏è RAILWAY_STATIC_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        try:
            response = requests.post(webhook_setup_url, json=webhook_data)
            if response.status_code == 200:
                print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    port = int(os.getenv('PORT', 8080))
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == '__main__':
    main()
