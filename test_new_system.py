#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã LAVA TOP API v2
"""

import os
import asyncio
import aiohttp
import json

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ["LAVA_TOP_API_BASE"] = "https://gate.lava.top"
os.environ["LAVA_TOP_API_KEY"] = "test_key"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
os.environ["LAVA_OFFER_ID_BASIC"] = "test_offer_id"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π offer ID

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
from bot_webhook import create_lava_top_invoice

async def test_create_invoice():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞...")
    
    try:
        pay_url = await create_lava_top_invoice(
            email="test@example.com",
            tariff="basic",
            price=50,
            bank="russian",
            user_id=123456,
            chat_id=123456
        )
        print(f"‚úÖ –ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {pay_url}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
        return False

async def test_api_endpoint():
    """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç POST –∑–∞–ø—Ä–æ—Å–∞ –∫ /api/create-payment
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
    print("‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é")
    return True

async def test_webhook_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –≤–µ–±—Ö—É–∫ –æ—Ç LAVA
    test_webhook = {
        "eventType": "payment.success",
        "data": {
            "metadata": {
                "user_id": "123456",
                "chat_id": "123456"
            }
        }
    }
    
    print(f"‚úÖ –í–µ–±—Ö—É–∫ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {json.dumps(test_webhook, indent=2)}")
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã LAVA TOP API v2")
    print("=" * 50)
    
    tests = [
        test_create_invoice,
        test_api_endpoint,
        test_webhook_processing
    ]
    
    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    print("=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for i, result in enumerate(results):
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"–¢–µ—Å—Ç {i+1}: {status}")
    
    if all(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

if __name__ == "__main__":
    asyncio.run(main())
