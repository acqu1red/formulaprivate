#!/usr/bin/env python3
"""
Channel management system for automatic approval and user removal
"""

import asyncio
from datetime import datetime, timedelta
from telegram import Update, ChatMemberUpdated, ChatMember
from telegram.ext import ContextTypes, ChatMemberHandler
from telegram.constants import ParseMode
from supabase import create_client, Client
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Supabase configuration
SUPABASE_URL = "https://uhhsrtmmuwoxsdquimaa.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Channel configuration
CHANNEL_ID = -1001234567890  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
CHANNEL_INVITE_LINK = "https://t.me/+6SQb4RwwAmZlMWQ6"

# Admin IDs
ADMIN_IDS = [708907063, 7365307696]

class ChannelManager:
    def __init__(self):
        self.channel_id = CHANNEL_ID
        
    async def handle_chat_member_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –∫–∞–Ω–∞–ª
            if update.chat_member.chat.id != self.channel_id:
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = update.chat_member.new_chat_member.user
            old_status = update.chat_member.old_chat_member.status
            new_status = update.chat_member.new_chat_member.status
            
            logger.info(f"Channel member update: {user.id} ({user.username}) - {old_status} -> {new_status}")
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
            if (old_status == ChatMember.LEFT and 
                new_status == ChatMember.RESTRICTED and 
                update.chat_member.new_chat_member.is_member is False):
                
                await self.handle_join_request(user, context)
                
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª
            elif (old_status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR] and 
                  new_status == ChatMember.LEFT):
                
                await self.handle_user_left(user, context)
                
        except Exception as e:
            logger.error(f"Error handling chat member update: {e}")
    
    async def handle_join_request(self, user, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            logger.info(f"Processing join request from user {user.id} ({user.username})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            subscription = await self.get_active_subscription(user.id)
            
            if subscription:
                # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª
                await context.bot.approve_chat_join_request(
                    chat_id=self.channel_id,
                    user_id=user.id
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await self.update_subscription_channel_status(
                    subscription['id'], 
                    user.id, 
                    True
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self.send_welcome_message(user, context, subscription)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                await self.notify_admins_about_new_member(user, context, subscription)
                
                logger.info(f"User {user.id} approved and added to channel")
                
            else:
                # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
                await context.bot.decline_chat_join_request(
                    chat_id=self.channel_id,
                    user_id=user.id
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self.send_no_subscription_message(user, context)
                
                logger.info(f"User {user.id} rejected - no active subscription")
                
        except Exception as e:
            logger.error(f"Error handling join request: {e}")
    
    async def handle_user_left(self, user, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            logger.info(f"User {user.id} left the channel")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await self.update_subscription_channel_status(
                None, 
                user.id, 
                False
            )
            
        except Exception as e:
            logger.error(f"Error handling user left: {e}")
    
    async def get_active_subscription(self, user_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = supabase.table('subscriptions').select('*').eq('user_id', user_id).eq('subscription_status', 'active').gte('end_date', datetime.now().isoformat()).execute()
            
            if result.data:
                return result.data[0]
            return None
            
        except Exception as e:
            logger.error(f"Error getting active subscription: {e}")
            return None
    
    async def update_subscription_channel_status(self, subscription_id: int, user_id: int, joined: bool):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            if subscription_id:
                supabase.table('subscriptions').update({
                    'channel_joined': joined,
                    'channel_member_id': user_id if joined else None,
                    'updated_at': datetime.now().isoformat()
                }).eq('id', subscription_id).execute()
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                supabase.table('subscriptions').update({
                    'channel_joined': joined,
                    'channel_member_id': None,
                    'updated_at': datetime.now().isoformat()
                }).eq('user_id', user_id).execute()
                
        except Exception as e:
            logger.error(f"Error updating subscription channel status: {e}")
    
    async def send_welcome_message(self, user, context: ContextTypes.DEFAULT_TYPE, subscription):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –§–û–†–ú–£–õ–ê!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –∏ —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫–∞–Ω–∞–ª–∞.

üìÖ <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:</b>
‚Ä¢ –¢–∞—Ä–∏—Ñ: {subscription.get('tariff', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –î–æ—Å—Ç—É–ø –¥–æ: {subscription.get('end_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

üöÄ <b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ:</b>
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  
‚Ä¢ –ë–∏–æ—Ö–∞–∫–∏–Ω–≥ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–¥–æ—Ä–æ–≤—å—è
‚Ä¢ –¢—Ä–µ–π–¥–∏–Ω–≥ –∏ —Å–∫–∞–ª—å–ø–∏–Ω–≥
‚Ä¢ –ü—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã –∏ —Ä–∞–∑–±–æ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤

üí¨ <b>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º:</b> @cashm3thod

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±! üèÜ
            """
            
            await context.bot.send_message(
                chat_id=user.id,
                text=welcome_text,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"Error sending welcome message: {e}")
    
    async def send_no_subscription_message(self, user, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            no_sub_text = f"""
‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –§–û–†–ú–£–õ–ê –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.

<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
‚Ä¢ –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö

üí≥ <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:</b>
1. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @your_bot
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
3. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ email
4. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ

üí¨ <b>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º:</b> @cashm3thod
            """
            
            await context.bot.send_message(
                chat_id=user.id,
                text=no_sub_text,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"Error sending no subscription message: {e}")
    
    async def notify_admins_about_new_member(self, user, context: ContextTypes.DEFAULT_TYPE, subscription):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ"""
        try:
            admin_message = f"""
üéâ <b>–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}
üÜî <b>ID:</b> {user.id}
üìß <b>Email:</b> {subscription.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üíµ <b>–¢–∞—Ä–∏—Ñ:</b> {subscription.get('tariff', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üí∞ <b>–°—É–º–º–∞:</b> {subscription.get('price_rub', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} RUB
üìÖ <b>–î–æ—Å—Ç—É–ø –¥–æ:</b> {subscription.get('end_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω—è—Ç –≤ –∫–∞–Ω–∞–ª
            """
            
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=admin_message,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"Error notifying admin {admin_id}: {e}")
                    
        except Exception as e:
            logger.error(f"Error notifying admins: {e}")
    
    async def remove_expired_users(self, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        try:
            logger.info("Checking for expired subscriptions...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            result = supabase.rpc('get_expired_subscriptions').execute()
            
            if not result.data:
                logger.info("No expired subscriptions found")
                return
            
            for subscription in result.data:
                user_id = subscription['user_id']
                
                try:
                    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
                    await context.bot.ban_chat_member(
                        chat_id=self.channel_id,
                        user_id=user_id,
                        until_date=datetime.now() + timedelta(seconds=30)  # –†–∞–∑–±–∞–Ω —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                    supabase.table('subscriptions').update({
                        'subscription_status': 'expired',
                        'channel_joined': False,
                        'channel_member_id': None,
                        'updated_at': datetime.now().isoformat()
                    }).eq('id', subscription['subscription_id']).execute()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await self.send_expired_notification(user_id, context, subscription)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    await self.notify_admins_about_expired_user(user_id, context, subscription)
                    
                    logger.info(f"User {user_id} removed due to expired subscription")
                    
                except Exception as e:
                    logger.error(f"Error removing user {user_id}: {e}")
                    
        except Exception as e:
            logger.error(f"Error removing expired users: {e}")
    
    async def send_expired_notification(self, user_id: int, context: ContextTypes.DEFAULT_TYPE, subscription):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            expired_text = f"""
‚ö†Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –§–û–†–ú–£–õ–ê –∏—Å—Ç–µ–∫–ª–∞.

<b>–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç:</b>
‚Ä¢ –í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–∞–Ω–∞–ª–∞
‚Ä¢ –í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞

üí≥ <b>–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>
1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @cashm3thod
2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ
3. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É
4. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ—Å—Ç—É–ø

–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ! üôè
            """
            
            await context.bot.send_message(
                chat_id=user_id,
                text=expired_text,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"Error sending expired notification: {e}")
    
    async def notify_admins_about_expired_user(self, user_id: int, context: ContextTypes.DEFAULT_TYPE, subscription):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            admin_message = f"""
‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</b> {user_id}
üìß <b>Email:</b> {subscription.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üíµ <b>–¢–∞—Ä–∏—Ñ:</b> {subscription.get('tariff', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞:</b> {subscription.get('end_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}

‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞
            """
            
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=admin_message,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"Error notifying admin {admin_id}: {e}")
                    
        except Exception as e:
            logger.error(f"Error notifying admins about expired user: {e}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–∞–Ω–∞–ª–∞
channel_manager = ChannelManager()
