// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const tg = window.Telegram?.WebApp;
let supabase;
let currentUser = null;
let isAdmin = false;
let currentDialogId = null;
let currentChatUserId = null;

// –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∂—ë—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω –≤ –∫–æ–¥–µ)
const ADMIN_IDS = [
    708907063,    // @acqu1red
    7365307696    // @cas3method
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    if (tg) {
        tg.expand();
        tg.enableClosingConfirmation();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
    if (window.supabase && window.SUPABASE_CONFIG) {
        try {
            supabase = window.supabase.createClient(
                window.SUPABASE_CONFIG.url, 
                window.SUPABASE_CONFIG.anonKey,
                {
                    auth: {
                        persistSession: false,
                        autoRefreshToken: false
                    }
                }
            );
            console.log('‚úÖ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            const { data, error } = await supabase.from('users').select('count', { count: 'exact', head: true });
            if (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
            } else {
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', data);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        await initUser();
    } else {
        console.warn('‚ö†Ô∏è Supabase –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        await initUser();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    initEventListeners();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function initUser() {
    try {
        if (tg?.initDataUnsafe?.user) {
            const telegramUser = tg.initDataUnsafe.user;
            currentUser = telegramUser;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –ø–æ –∂—ë—Å—Ç–∫–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É
            isAdmin = ADMIN_IDS.includes(telegramUser.id);
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramUser.id} (${telegramUser.username}), isAdmin: ${isAdmin}`);
            
            if (supabase) {
                try {
                    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                    const { data, error } = await supabase
                        .from('users')
                        .upsert({
                            telegram_id: telegramUser.id,
                            username: telegramUser.username || null,
                            first_name: telegramUser.first_name || null,
                            last_name: telegramUser.last_name || null,
                            is_admin: isAdmin  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
                        })
                        .select()
                        .single();

                    if (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
                    } else {
                        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î');
                    }
                } catch (dbError) {
                    console.error('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î:', dbError);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                }
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            if (isAdmin) {
                document.getElementById('adminButton').style.display = 'block';
                console.log('–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
            }
        } else {
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Telegram
            console.log('–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            currentUser = { id: 708907063, first_name: 'Test Admin', username: 'acqu1red' };
            isAdmin = true;
            document.getElementById('adminButton').style.display = 'block';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if (currentUser && ADMIN_IDS.includes(currentUser.id)) {
            isAdmin = true;
            document.getElementById('adminButton').style.display = 'block';
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function initEventListeners() {
    const chat = document.getElementById('chat');
    const input = document.getElementById('messageInput');
    const sendBtn = document.getElementById('sendBtn');
    const fileInput = document.getElementById('fileInput');
    const adminButton = document.getElementById('adminButton');
    const adminPanel = document.getElementById('adminPanel');
    const closeAdminPanel = document.getElementById('closeAdminPanel');
    const adminChatModal = document.getElementById('adminChatModal');
    const closeAdminChat = document.getElementById('closeAdminChat');
    const adminMessageInput = document.getElementById('adminMessageInput');
    const adminSendBtn = document.getElementById('adminSendBtn');
    const markInProgressBtn = document.getElementById('markInProgressBtn');
    const markClosedBtn = document.getElementById('markClosedBtn');

    // –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
    sendBtn.addEventListener('click', sendMessage);
    input.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });

    fileInput.addEventListener('change', handleFileUpload);

    // –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    adminButton.addEventListener('click', openAdminPanel);
    closeAdminPanel.addEventListener('click', () => {
        adminPanel.style.display = 'none';
    });

    // –ê–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
    closeAdminChat.addEventListener('click', () => {
        adminChatModal.style.display = 'none';
    });
    
    adminSendBtn.addEventListener('click', sendAdminMessage);
    adminMessageInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendAdminMessage();
        }
    });

    // –ö–æ–Ω—Ç—Ä–æ–ª—ã –¥–∏–∞–ª–æ–≥–∞
    markInProgressBtn.addEventListener('click', () => updateDialogStatus('in_progress'));
    markClosedBtn.addEventListener('click', () => updateDialogStatus('closed'));
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function sendMessage() {
    const input = document.getElementById('messageInput');
    const text = input.value.trim();
    if (!text) return;

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
    appendMessage({ text, inbound: false });
    input.value = '';

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–∞–±–æ—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    if (!currentUser) {
        setTimeout(() => {
            appendMessage({ 
                text: '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.', 
                inbound: true 
            });
        }, 1000);
        return;
    }

    try {
        if (supabase && currentUser) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUser.id);
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
            if (!currentDialogId) {
                console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞...');
                
                // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –±–µ–∑ RPC —Ñ—É–Ω–∫—Ü–∏–∏
                const { data: dialogData, error: dialogError } = await supabase
                    .from('dialogs')
                    .insert({
                        user_id: currentUser.id,
                        status: 'open'
                    })
                    .select()
                    .single();

                if (dialogError) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞:', dialogError);
                } else {
                    currentDialogId = dialogData.id;
                    console.log('‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω —Å ID:', currentDialogId);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    console.log('üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
                    const { error: messageError } = await supabase
                        .from('messages')
                        .insert({
                            dialog_id: currentDialogId,
                            sender_id: currentUser.id,
                            content: text,
                            is_from_admin: false
                        });

                    if (messageError) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageError);
                    } else {
                        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î');
                    }
                }
            } else {
                console.log('üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –¥–∏–∞–ª–æ–≥—É:', currentDialogId);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –¥–∏–∞–ª–æ–≥—É
                const { error } = await supabase
                    .from('messages')
                    .insert({
                        dialog_id: currentDialogId,
                        sender_id: currentUser.id,
                        content: text,
                        is_from_admin: false
                    });

                if (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                } else {
                    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î');
                }
            }
        } else {
            console.warn('‚ö†Ô∏è Supabase –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Ä–∞–±–æ—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
        }

        // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞
        setTimeout(() => {
            appendMessage({ 
                text: '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', 
                inbound: true 
            });
        }, 1000);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
function handleFileUpload() {
    const fileInput = document.getElementById('fileInput');
    if (fileInput.files.length > 0) {
        const fileName = fileInput.files[0].name;
        appendMessage({ text: `üìé –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω: ${fileName}`, inbound: false });
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –≤ Supabase Storage
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
function appendMessage({ text, inbound = false }) {
    const chat = document.getElementById('chat');
    const wrap = document.createElement('div');
    wrap.className = `msg ${inbound ? 'msg-in' : 'msg-out'}`;
    
    const bubble = document.createElement('div');
    bubble.className = 'bubble';
    bubble.textContent = text;
    
    const meta = document.createElement('div');
    meta.className = 'meta';
    meta.textContent = inbound ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Ä¢ —Å–µ–π—á–∞—Å' : '–í—ã ‚Ä¢ —Å–µ–π—á–∞—Å';
    
    wrap.appendChild(bubble);
    wrap.appendChild(meta);
    chat.appendChild(wrap);
    chat.scrollTop = chat.scrollHeight;
}

// === –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ===

// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function openAdminPanel() {
    if (!isAdmin) return;

    try {
        if (!supabase) {
            document.getElementById('dialogsList').innerHTML = '<p style="color: #a6a8ad; text-align: center; padding: 40px;">–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>';
            document.getElementById('adminPanel').style.display = 'block';
            return;
        }

        // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–∏–∞–ª–æ–≥–æ–≤ –±–µ–∑ RPC —Ñ—É–Ω–∫—Ü–∏–∏
        const { data: dialogs, error: dialogsError } = await supabase
            .from('dialogs')
            .select(`
                id,
                user_id,
                status,
                created_at,
                updated_at
            `)
            .in('status', ['open', 'in_progress'])
            .order('updated_at', { ascending: false });

        if (dialogsError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤:', dialogsError);
            document.getElementById('dialogsList').innerHTML = '<p style="color: #a6a8ad; text-align: center; padding: 40px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤</p>';
            document.getElementById('adminPanel').style.display = 'block';
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        const userIds = [...new Set(dialogs.map(d => d.user_id))];
        const { data: users, error: usersError } = await supabase
            .from('users')
            .select('telegram_id, username, first_name, last_name')
            .in('telegram_id', userIds);

        if (usersError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        const dialogsWithStats = await Promise.all(dialogs.map(async (dialog) => {
            const { count } = await supabase
                .from('messages')
                .select('*', { count: 'exact', head: true })
                .eq('dialog_id', dialog.id);

            const user = users?.find(u => u.telegram_id === dialog.user_id) || {};

            return {
                dialog_id: dialog.id,
                user_telegram_id: dialog.user_id,
                username: user.username,
                first_name: user.first_name,
                last_name: user.last_name,
                status: dialog.status,
                message_count: count || 0,
                last_message_at: dialog.updated_at,
                created_at: dialog.created_at
            };
        }));

        const dialogsList = document.getElementById('dialogsList');
        dialogsList.innerHTML = '';

        if (dialogsWithStats.length === 0) {
            dialogsList.innerHTML = '<p style="color: #a6a8ad; text-align: center; padding: 40px;">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤</p>';
        } else {
            dialogsWithStats.forEach(dialog => {
                const dialogItem = createDialogItem(dialog);
                dialogsList.appendChild(dialogItem);
            });
        }

        document.getElementById('adminPanel').style.display = 'block';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤:', error);
        document.getElementById('dialogsList').innerHTML = '<p style="color: #a6a8ad; text-align: center; padding: 40px;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤</p>';
        document.getElementById('adminPanel').style.display = 'block';
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –≤ —Å–ø–∏—Å–∫–µ
function createDialogItem(dialog) {
    const item = document.createElement('div');
    item.className = 'dialog-item';
    item.onclick = () => openAdminChat(dialog);

    const userName = dialog.username 
        ? `@${dialog.username}` 
        : `${dialog.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} ${dialog.last_name || ''}`.trim();

    const lastMessageDate = dialog.last_message_at 
        ? new Date(dialog.last_message_at).toLocaleString('ru-RU')
        : new Date(dialog.created_at).toLocaleString('ru-RU');

    item.innerHTML = `
        <div class="dialog-user">${userName}</div>
        <div class="dialog-meta">
            <span>${lastMessageDate}</span>
            <span class="dialog-status ${dialog.status}">${
                dialog.status === 'open' ? '–ù–æ–≤—ã–π' : 
                dialog.status === 'in_progress' ? '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' : '–ó–∞–∫—Ä—ã—Ç'
            }</span>
        </div>
        <div style="color: #a6a8ad; font-size: 12px; margin-top: 4px;">
            –°–æ–æ–±—â–µ–Ω–∏–π: ${dialog.message_count}
        </div>
    `;

    return item;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function openAdminChat(dialog) {
    currentDialogId = dialog.dialog_id;
    currentChatUserId = dialog.user_telegram_id;

    const userName = dialog.username 
        ? `@${dialog.username}` 
        : `${dialog.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} ${dialog.last_name || ''}`.trim();

    document.getElementById('chatUserName').textContent = `–î–∏–∞–ª–æ–≥ —Å ${userName}`;

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    await loadChatMessages();

    // –°–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –∏ –ø–æ–∫–∞–∑ —á–∞—Ç–∞
    document.getElementById('adminPanel').style.display = 'none';
    document.getElementById('adminChatModal').style.display = 'block';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
async function loadChatMessages() {
    try {
        const { data, error } = await supabase
            .from('messages')
            .select('*')
            .eq('dialog_id', currentDialogId)
            .order('created_at', { ascending: true });

        if (error) throw error;

        const messagesContainer = document.getElementById('adminChatMessages');
        messagesContainer.innerHTML = '';

        data.forEach(message => {
            const messageDiv = document.createElement('div');
            messageDiv.className = `admin-message ${message.is_from_admin ? 'admin' : 'user'}`;
            messageDiv.textContent = message.content;
            messagesContainer.appendChild(messageDiv);
        });

        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
async function sendAdminMessage() {
    const input = document.getElementById('adminMessageInput');
    const text = input.value.trim();
    if (!text || !currentDialogId || !currentUser) return;

    try {
        const { error } = await supabase
            .from('messages')
            .insert({
                dialog_id: currentDialogId,
                sender_id: currentUser.id,
                content: text,
                is_from_admin: true
            });

        if (error) throw error;

        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const messagesContainer = document.getElementById('adminChatMessages');
        const messageDiv = document.createElement('div');
        messageDiv.className = 'admin-message admin';
        messageDiv.textContent = text;
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;

        input.value = '';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–∏–∞–ª–æ–≥–∞
async function updateDialogStatus(status) {
    if (!currentDialogId) return;

    try {
        const { error } = await supabase
            .from('dialogs')
            .update({ 
                status,
                admin_id: currentUser.id,
                ...(status === 'closed' && { closed_at: new Date().toISOString() })
            })
            .eq('id', currentDialogId);

        if (error) throw error;

        if (status === 'closed') {
            document.getElementById('adminChatModal').style.display = 'none';
            alert('–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω');
        } else {
            alert('–°—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞ –æ–±–Ω–æ–≤–ª—ë–Ω');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
}