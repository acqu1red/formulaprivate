import { Bot, InlineKeyboard, InlineKeyboardButton } from 'grammy';
import { prisma } from '../index.js';

// URL –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∏–Ω–∏-–∞–ø–ø–∞
const ISLAND_URL = "https://acqu1red.github.io/formulaprivate/island.html";

export function setupBotHandlers(bot: Bot) {
  // Start command
  bot.command('start', async (ctx) => {
    const startParam = ctx.match;
    
    try {
      // Create or find user
      const tgId = ctx.from?.id.toString();
      if (!tgId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      let user = await prisma.user.findUnique({
        where: { tgId }
      });

      if (!user) {
        user = await prisma.user.create({
          data: {
            tgId,
            username: ctx.from?.username,
            referralCode: generateReferralCode(),
          }
        });

        // Handle referral if present
        if (startParam && startParam.startsWith('ref_')) {
          const referralCode = startParam.substring(4);
          const referrer = await prisma.user.findUnique({
            where: { referralCode }
          });

          if (referrer) {
            await prisma.user.update({
              where: { id: user.id },
              data: { referrerId: referrer.id }
            });

            await prisma.referral.create({
              data: {
                referrerId: referrer.id,
                joinerUserId: user.id,
              }
            });
          }
        }
      }

      // Create keyboard with Mini Apps
      const keyboard = new InlineKeyboard()
        .webApp(
          "üèùÔ∏è –û—Å—Ç—Ä–æ–≤ –ê—Ä—Ö–∏–≤",
          ISLAND_URL
        )
        .row()
        .webApp(
          "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø",
          "https://acqu1red.github.io/formulaprivate/payment.html"
        )
        .row()
        .webApp(
          "üìö –ü–æ–¥–ø–∏—Å–∫–∞",
          "https://acqu1red.github.io/formulaprivate/subscription.html"
        );

      await ctx.reply(
        `üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Formula Private!\n\n` +
        `üèùÔ∏è **–û—Å—Ç—Ä–æ–≤ –ê—Ä—Ö–∏–≤** - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫–Ω–∏–≥\n` +
        `üíé –°–æ–±–∏—Ä–∞–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –∏–≥—Ä–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã\n` +
        `üìö –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard,
        }
      );
    } catch (error) {
      console.error('Start command error:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // Help command
  bot.command('help', async (ctx) => {
    const helpText = 
      `üéÆ **Formula Private - –û—Å—Ç—Ä–æ–≤ –ê—Ä—Ö–∏–≤**\n\n` +
      `**–ö–æ–º–∞–Ω–¥—ã:**\n` +
      `/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n` +
      `/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
      `/island - –û—Ç–∫—Ä—ã—Ç—å –û—Å—Ç—Ä–æ–≤ –ê—Ä—Ö–∏–≤\n\n` +
      `**–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:**\n` +
      `üèùÔ∏è –ò—Å—Å–ª–µ–¥—É–π –æ—Å—Ç—Ä–æ–≤ –∏ –Ω–∞—Ö–æ–¥–∏ —Ö–æ—Ç—Å–ø–æ—Ç—ã\n` +
      `üíé –°–æ–±–∏—Ä–∞–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã (tap/hold)\n` +
      `üéÆ –ò–≥—Ä–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã –¥–ª—è –±–æ–Ω—É—Å–æ–≤\n` +
      `üìö –û—Ç–∫—Ä—ã–≤–∞–π –∫–Ω–∏–≥–∏ –∏ —á–∏—Ç–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç\n` +
      `üéÅ –ü–æ–ª—É—á–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n\n` +
      `**–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:**\n` +
      `–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!`;

    await ctx.reply(helpText, { parse_mode: 'Markdown' });
  });

  // Island command
  bot.command('island', async (ctx) => {
    const keyboard = new InlineKeyboard()
      .webApp("üèùÔ∏è –û—Ç–∫—Ä—ã—Ç—å –û—Å—Ç—Ä–æ–≤ –ê—Ä—Ö–∏–≤", ISLAND_URL);

    await ctx.reply(
      `üèùÔ∏è **–û—Å—Ç—Ä–æ–≤ –ê—Ä—Ö–∏–≤**\n\n` +
      `–û—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã!`,
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      }
    );
  });

  // Handle callback queries
  bot.on('callback_query', async (ctx) => {
    try {
      await ctx.answerCallbackQuery();
      
      const data = ctx.callbackQuery.data;
      
      switch (data) {
        case 'open_island':
          await ctx.editMessageText(
            `üèùÔ∏è **–û—Å—Ç—Ä–æ–≤ –ê—Ä—Ö–∏–≤**\n\n` +
            `–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ!`,
            {
              parse_mode: 'Markdown',
              reply_markup: new InlineKeyboard()
                .webApp("üèùÔ∏è –û—Ç–∫—Ä—ã—Ç—å", ISLAND_URL)
            }
          );
          break;
          
        case 'share_referral':
          const user = await prisma.user.findUnique({
            where: { tgId: ctx.from?.id.toString() }
          });
          
          if (user) {
            const shareText = 
              `üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Formula Private - –û—Å—Ç—Ä–æ–≤ –ê—Ä—Ö–∏–≤!\n\n` +
              `–°–æ–±–∏—Ä–∞–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –∏–≥—Ä–∞–π –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∫–Ω–∏–≥–∞–º.\n\n` +
              `–ú–æ–π –∫–æ–¥: ${user.referralCode}\n\n` +
              `https://t.me/${ctx.me.username}?start=ref_${user.referralCode}`;
            
            await ctx.editMessageText(shareText, {
              reply_markup: new InlineKeyboard()
                .webApp("üèùÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", ISLAND_URL)
            });
          }
          break;
          
        default:
          await ctx.editMessageText('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      }
    } catch (error) {
      console.error('Callback query error:', error);
      await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  });

  // Handle web app data
  bot.on('message:web_app_data', async (ctx) => {
    try {
      const webAppData = ctx.message.web_app_data;
      console.log('Web app data received:', webAppData.data);
      
      // You can process web app data here if needed
      await ctx.reply('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
    } catch (error) {
      console.error('Web app data error:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  });
}

function generateReferralCode(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 8; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}
