// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  tgId              String   @unique
  username          String?
  createdAt         DateTime @default(now())
  referrerId        String?  @index
  isSubscribed      Boolean  @default(false)
  subscriptionUntil DateTime?
  streak            Int      @default(0)
  lastDailyAt       DateTime?
  referralCode      String   @unique
  Progress          Progress[]
  Payments          Payment[]
  Referrals         Referral[] @relation("Referrer")
}

model Season {
  id        String   @id @default(cuid())
  title     String
  startsAt  DateTime
  endsAt    DateTime
  mapBgUrl  String
  mapMidUrl String
  mapFgUrl  String
  fogUrl    String?
  skin      String
  Hotspot   Hotspot[]
  Books     Book[]
  Progress  Progress[]
}

model Book {
  id             String   @id @default(cuid())
  seasonId       String   @index
  title          String
  coverUrl       String
  fragmentsCount Int
  teaserText     String
  teaserImageUrl String?
  channelId      String
  channelPostId  Int
  Season         Season   @relation(fields: [seasonId], references: [id])
  Progress       Progress[]
}

model Hotspot {
  id         String   @id @default(cuid())
  seasonId   String   @index
  x          Float
  y          Float
  type       String   // 'tap'|'hold'|'minigame'
  minigame   String?  // 'ripple'|'dial'|'constellation'
  baseReward Int
  chanceGold Float?
  Season     Season   @relation(fields: [seasonId], references: [id])
}

model Progress {
  id        String   @id @default(cuid())
  userId    String   @index
  seasonId  String   @index
  bookId    String   @index
  fragments Int      @default(0)
  User      User     @relation(fields: [userId], references: [id])
  Season    Season   @relation(fields: [seasonId], references: [id])
  Book      Book     @relation(fields: [bookId], references: [id])
}

model Payment {
  id        String   @id @default(cuid())
  userId    String   @index
  provider  String   // 'stars' | 'invoice'
  plan      String   // 'week' | 'month'
  amount    Int
  currency  String
  status    String   // 'created'|'paid'|'failed'
  createdAt DateTime @default(now())
  payload   String?  // JSON string
  User      User     @relation(fields: [userId], references: [id])
}

model Referral {
  id            String   @id @default(cuid())
  referrerId    String   @index
  joinerUserId  String   @unique
  rewardClaimed Boolean  @default(false)
  createdAt     DateTime @default(now())
  Referrer      User     @relation("Referrer", fields: [referrerId], references: [id])
}
