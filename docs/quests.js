
/* ====== CONFIG ====== */
const SUPABASE_URL = window.SUPABASE_URL || "https://YOUR_PROJECT.supabase.co";
const SUPABASE_ANON_KEY = window.SUPABASE_ANON_KEY || "YOUR_SUPABASE_ANON_KEY";
const SUBSCRIPTIONS_TABLE = "subscriptions"; // –∫–æ–ª–æ–Ω–∫–∞ tg_id (text/bigint->text)
const PROMOCODES_TABLE = "promocodes"; // {code, tg_id, issued_at, expires_at, status}
const ADMIN_USERNAME = "your_admin_username"; // t.me/<username> –¥–ª—è —Å–≤—è–∑–∏

const PAYMENT_URL = "https://acqu1red.github.io/formulaprivate/payment.html";
const ISLAND_MINIAPP_URL = "./island.html"; // –æ–¥–∏–Ω –∏–∑ –∫–≤–µ—Å—Ç–æ–≤ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –≤–∏–∑—É–∞–ª

const MAX_DAILY_FREE = 5;
const TOTAL_QUESTS = 15;
const VARIATIONS_PER_QUEST = 10;

/* ====== Telegram init ====== */
let tg = null;
function initTG(){
  try{
    tg = window.Telegram && window.Telegram.WebApp ? window.Telegram.WebApp : null;
    if(tg){
      tg.expand();
      tg.enableClosingConfirmation();
      document.body.classList.add("tg-ready");
    }
  }catch(e){ console.log("TG init fail", e); }
}
initTG();

/* ====== Supabase ====== */
const supabase = window.supabase ? window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY) : null;

/* ====== Utils ====== */
const $ = (sel, el=document)=>el.querySelector(sel);
const $$ = (sel, el=document)=>Array.from(el.querySelectorAll(sel));
const toast = (msg)=>{ const t=$("#toast"); t.textContent=msg; t.classList.add("show"); setTimeout(()=>t.classList.remove("show"), 2200); };

function dayIndex(){ return Math.floor(Date.now() / (24*60*60*1000)); }
function variationIndex(){ return dayIndex() % VARIATIONS_PER_QUEST; }
function groupIndex(){ return dayIndex() % 3; } // –≥—Ä—É–ø–ø—ã –ø–æ 5 –∫–≤–µ—Å—Ç–æ–≤

/* ====== Parallax particles ====== */
function fireflies(){
  const canvas = $("#fireflies");
  if(!canvas) return;
  const ctx = canvas.getContext("2d");
  let W,H; function resize(){ W=canvas.width=canvas.clientWidth; H=canvas.height=canvas.clientHeight; } resize();
  window.addEventListener("resize", resize);
  const N = 24;
  const parts = Array.from({length:N},()=>({x:Math.random()*W,y:Math.random()*H, vx:(Math.random()-.5)*.35, vy:(Math.random()-.5)*.35, r:1.2+Math.random()*2.4, a:.5+Math.random()*.5 }));
  function step(){
    ctx.clearRect(0,0,W,H);
    parts.forEach(p=>{
      p.x+=p.vx; p.y+=p.vy;
      if(p.x<0||p.x>W) p.vx*=-1;
      if(p.y<0||p.y>H) p.vy*=-1;
      ctx.beginPath();
      const g = ctx.createRadialGradient(p.x,p.y,0,p.x,p.y,p.r*8);
      g.addColorStop(0, `rgba(102,247,213,${0.85*p.a})`);
      g.addColorStop(1, `rgba(102,247,213,0)`);
      ctx.fillStyle=g;
      ctx.arc(p.x,p.y,p.r*3,0,Math.PI*2);
      ctx.fill();
    });
    requestAnimationFrame(step);
  }
  step();
}
fireflies();

/* ====== Quests model (15) ====== */
const QUESTS = [
  { id:"treasure", theme:"–î–∏–∫–∏–π –∑–∞–ø–∞–¥", style:"artdeco", name:"–ü–æ–∏—Å–∫ —Å–æ–∫—Ä–æ–≤–∏—â", intro:"–°–æ–±–µ—Ä–∏ –∫–∞—Ä—Ç—É –∏ –Ω–∞–π–¥–∏ –∫–ª–∞–¥ —Ä–∞–Ω—å—à–µ –¥—Ä—É–≥–∏—Ö.", type:"puzzle", build: buildTreasure },
  { id:"cyber", theme:"–ö–∏–±–µ—Ä–ø–∞–Ω–∫", style:"synthwave", name:"–ö–∏–±–µ—Ä‚Äë–≤–∑–ª–æ–º", intro:"–ü–æ–¥–±–µ—Ä–∏ –ø–∞—Ç—Ç–µ—Ä–Ω, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —à–ª—é–∑.", type:"minigame", build: buildCyber },
  { id:"bodylang", theme:"–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥", style:"neo", name:"–Ø–∑—ã–∫ —Ç–µ–ª–∞", intro:"–†–∞—Å–ø–æ–∑–Ω–∞–π –Ω–µ–≤–µ—Ä–±–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã 2D‚Äë–ø–µ—Ä—Å–æ–Ω–∞–∂–∞.", type:"analysis", build: buildBodyLang },
  { id:"profiling", theme:"–°–æ—Ü—Å–µ—Ç–∏", style:"neo", name:"–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞", intro:"–û—Ü–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—ã–±–µ—Ä–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.", type:"analysis", build: buildProfiling },
  { id:"island", theme:"–ù–µ–æ—Å–æ–ª–∞—Ä–ø–∞–Ω–∫", style:"neo", name:"–û—Å—Ç—Ä–æ–≤ –ê—Ä—Ö–∏–≤", intro:"–ò—Å—Å–ª–µ–¥—É–π –æ—Å—Ç—Ä–æ–≤, –∞–∫—Ç–∏–≤–∏—Ä—É–π –º–∞—è–∫–∏.", type:"visual", build: buildIslandLink },

  // –∑–∞—Ä–∞–±–æ—Ç–æ–∫/–º–∞—Ä–∫–µ—Ç–∏–Ω–≥
  { id:"roi", theme:"–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", style:"neo", name:"ROI‚Äë–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", intro:"–í—ã–±–µ—Ä–∏ –∫–∞–º–ø–∞–Ω–∏—é —Å –ª—É—á—à–µ–π –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å—é.", type:"puzzle", build: buildROI },
  { id:"funnel", theme:"–ü—Ä–æ–¥–∞–∂–∏", style:"neo", name:"–í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π", intro:"–ù–∞–π–¥–∏ —Å–∞–º–æ–µ —É–∑–∫–æ–µ –º–µ—Å—Ç–æ.", type:"puzzle", build: buildFunnel },
  { id:"copy", theme:"–ö–æ–Ω—Ç–µ–Ω—Ç", style:"neo", name:"A/B –∑–∞–≥–æ–ª–æ–≤–∫–∏", intro:"–í—ã–±–µ—Ä–∏ –≤—ã–∏–≥—Ä–∞–≤—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º.", type:"quiz", build: buildCopy },
  { id:"scam", theme:"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", style:"neo", name:"SCAM‚Äë–¥–µ—Ç–µ–∫—Ç–æ—Ä", intro:"–û—Ç–ª–∏—á–∏ —á–µ—Å—Ç–Ω—É—é –æ—Ñ—Ñ–µ—Ä–∫—É –æ—Ç —Ñ–∏—à–∏–Ω–≥–∞.", type:"quiz", build: buildScam },
  { id:"niche", theme:"–°—Ç—Ä–∞—Ç–µ–≥–∏—è", style:"neo", name:"–í—ã–±–æ—Ä –Ω–∏—à–∏", intro:"–°–æ–ø–æ—Å—Ç–∞–≤—å —Å–ø—Ä–æ—Å –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—é.", type:"puzzle", build: buildNiche },

  // –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ
  { id:"noir", theme:"–ù—É–∞—Ä", style:"artdeco", name:"–¢–µ–Ω—å –Ω–∞ —Å—Ç–µ–Ω–µ", intro:"–°–æ–µ–¥–∏–Ω–∏ —É–ª–∏–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º.", type:"puzzle", build: buildNoir },
  { id:"space", theme:"–ö–æ—Å–º–æ", style:"synthwave", name:"–û—Ä–±–∏—Ç–∞–ª", intro:"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å–ø—É—Ç–Ω–∏–∫–æ–≤.", type:"minigame", build: buildSpace },
  { id:"steampunk", theme:"–°—Ç–∏–º–ø–∞–Ω–∫", style:"artdeco", name:"–®–µ—Å—Ç–µ—Ä–Ω–∏ —Å—É–¥—å–±—ã", intro:"–í—ã—Å—Ç–∞–≤—å —à–µ—Å—Ç–µ—Ä–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —É—Å–∏–ª–∏—è.", type:"puzzle", build: buildGears },
  { id:"modern", theme:"–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å", style:"neo", name:"–°–∏–≥–Ω–∞–ª—ã —Ä—ã–Ω–∫–∞", intro:"–û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π —à—É–º –∏ –Ω–∞–π–¥–∏ —Ç—Ä–µ–Ω–¥.", type:"puzzle", build: buildSignals },
  { id:"mystic", theme:"–ú–∏—Å—Ç–∏–∫–∞", style:"neo", name:"–°–æ–∑–≤–µ–∑–¥–∏—è", intro:"–ü—Ä–æ–≤–µ–¥–∏ –ª–∏–Ω–∏—é —á–µ—Ä–µ–∑ –∑–≤—ë–∑–¥—ã.", type:"minigame", build: buildConstellation }
];

/* ====== Rotation + gating ====== */
function featuredQuests(isSubscribed){
  if(isSubscribed) return QUESTS;
  const g = groupIndex(); // 0..2
  const start = g*5;
  return QUESTS.slice(start, start+5);
}

/* ====== Modal ====== */
const modal = $("#modal");
$("#modalClose").addEventListener("click", ()=> modal.classList.add("hidden"));

function showModal(html){
  $("#modalBody").innerHTML = "";
  $("#modalBody").appendChild(html);
  modal.classList.remove("hidden");
}

/* ====== Cards ====== */
function buildCards(state){
  const container = $("#quests");
  container.innerHTML = "";
  const list = featuredQuests(state.isSubscribed);
  list.forEach(q => {
    const card = document.createElement("div");
    card.className = "card";
    card.innerHTML = `
      <div class="label">${q.theme}</div>
      <h3>${q.name}</h3>
      <div class="tag">–í–∞—Ä–∏–∞—Ü–∏—è #${variationIndex()+1}/10</div>
      <div class="cta">
        <button class="btn primary start">–ù–∞—á–∞—Ç—å</button>
        <button class="btn ghost details">–û–ø–∏—Å–∞–Ω–∏–µ</button>
      </div>
    `;
    card.querySelector(".start").addEventListener("click", ()=>startQuest(q, state));
    card.querySelector(".details").addEventListener("click", ()=>{
      const box = document.createElement("div");
      box.innerHTML = `<div class="questIntro"><h3>${q.name}</h3><p>${q.intro}</p></div>`;
      if(!state.isSubscribed){
        const b = document.createElement("div");
        b.className="banner";
        b.innerHTML = `–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã 5 –∫–≤–µ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ ‚Äî –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –ø–æ –æ–¥–Ω–æ–º—É –Ω–æ–≤–æ–º—É –∫–≤–µ—Å—Ç—É. –û—Ç–∫—Ä–æ–π –≤—Å–µ –∫–≤–µ—Å—Ç—ã –∑–∞ 10 –¥–Ω–µ–π ‚Äî –ø–æ–ª—É—á–∏ <b>—Å–∫–∏–¥–∫—É 50%</b> –Ω–∞ –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏.`;
        box.appendChild(b);
      }
      showModal(box);
    });
    container.appendChild(card);
  });

  // –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî —Å–µ—Ä—ã–º–∏ (–¥–ª—è free)
  if(!state.isSubscribed){
    const others = QUESTS.filter(q => !list.find(x=>x.id===q.id));
    others.forEach(q => {
      const card = document.createElement("div");
      card.className = "card locked";
      card.innerHTML = `
        <div class="lock">üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
        <div class="label">${q.theme}</div>
        <h3>${q.name}</h3>
        <div class="tag">–û—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –∏–∑ –¥–Ω–µ–π</div>
      `;
      container.appendChild(card);
    });
  }
}

/* ====== Start quest ====== */
function startQuest(q, state){
  const root = document.createElement("div");
  root.className = "questBody";
  if(!state.isSubscribed){
    const banner = document.createElement("div");
    banner.className="banner";
    banner.innerHTML = `–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è <b>5 –∫–≤–µ—Å—Ç–æ–≤</b>. –û—Ç–∫—Ä–æ–π –≤—Å–µ –∑–∞ 10 –¥–Ω–µ–π ‚Äî –ø–æ–ª—É—á–∏ <b>-50% –Ω–∞ –º–µ—Å—è—Ü</b> (–¥–µ–π—Å—Ç–≤—É–µ—Ç 60 –¥–Ω–µ–π).`;
    root.appendChild(banner);
  }
  q.build(root, state);
  showModal(root);
}

/* ====== Quests implementations ====== */

function buildTreasure(root, state){
  const v = variationIndex();
  const map = document.createElement("div");
  map.style.position="relative";
  map.style.height="300px";
  map.style.border="1px solid var(--border)";
  map.style.borderRadius="16px";
  map.style.background="radial-gradient(120% 100% at 60% 30%, rgba(255,255,255,.06), rgba(255,255,255,.02)), url('https://picsum.photos/seed/treasure"+v+"/800/400') center/cover";
  const msg = document.createElement("div");
  msg.innerHTML = "<p>–ü–æ–¥—Å–∫–∞–∑–∫–∞: —Ç—Ä–∏ –≤—Å–ø—ã—à–∫–∏ —É–∫–∞–∂—É—Ç –Ω–∞ —Ç–∞–π–Ω–∏–∫. –ù–∞–∂–º–∏ –Ω–∞ –∫–∞—Ä—Ç—É, –∫–æ–≥–¥–∞ –≤—Å–ø—ã—à–∫–∞ –∑–∞—Ç—É—Ö–∞–µ—Ç.</p>";
  const btn = document.createElement("button");
  btn.className="btn primary"; btn.textContent="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫";
  const status = document.createElement("div");
  status.className="tag"; status.textContent="–ü–æ–ø—ã—Ç–∫–∏: 0/3";
  let tries=0, success=0, running=false, active=false;
  let tim=null;
  btn.onclick = ()=>{
    if(running) return;
    running=true; tries=0; success=0; status.textContent="–ü–æ–ø—ã—Ç–∫–∏: 0/3";
    runFlash();
  };
  function runFlash(){
    if(tries>=3){ running=false; finalize(); return; }
    tries++;
    status.textContent = `–ü–æ–ø—ã—Ç–∫–∏: ${tries}/3`;
    active=true;
    map.style.boxShadow="0 0 40px rgba(255,226,122,.45) inset";
    tim = setTimeout(()=>{
      active=false;
      map.style.boxShadow="none";
      if(tries<3) setTimeout(runFlash, 700);
      else setTimeout(()=>{running=false; finalize();}, 300);
    }, 900);
  }
  map.onclick = ()=>{
    if(active){ success++; toast("–ù–∞—à—ë–ª —Å–ª–µ–¥! +1 —Ñ—Ä–∞–≥–º–µ–Ω—Ç"); }
  };
  function finalize(){
    const res = document.createElement("div");
    res.className="banner";
    res.innerHTML = success>=2 ? "–ö–ª–∞–¥ –ø–æ—á—Ç–∏ —É —Ç–µ–±—è! –ù–∞–≥—Ä–∞–¥–∞: +2 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞." : "–¢—ã –±—ã–ª –±–ª–∏–∑–∫–æ. –ù–∞–≥—Ä–∞–¥–∞: +1 —Ñ—Ä–∞–≥–º–µ–Ω—Ç.";
    root.appendChild(res);
  }
  root.append(msg, map, status, btn);
}

function buildCyber(root,state){
  const panel = document.createElement("div");
  panel.style.display="grid"; panel.style.gap="8px";
  panel.innerHTML = "<p>–ü–æ–¥–±–µ—Ä–∏ –ø–∞—Ç—Ç–µ—Ä–Ω: —Å–æ–±–µ—Ä–∏ –∫–ª—é—á –∏–∑ 4 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –ø–æ–¥—Å–≤–µ—Ç–∫–µ.</p>";
  const symbols = "‚ñ≤‚óÜ‚óè‚ñ†‚òÖ‚ú¶‚úß‚ú™".split("");
  const target = Array.from({length:4},()=>symbols[(variationIndex()+Math.floor(Math.random()*symbols.length))%symbols.length]);
  const board = document.createElement("div"); board.style.display="grid"; board.style.gridTemplateColumns="repeat(7,1fr)"; board.style.gap="6px";
  const sel=[];
  symbols.forEach(s=>{
    const b=document.createElement("button"); b.className="btn"; b.textContent=s;
    b.onclick = ()=>{ if(sel.length<4){ sel.push(s); b.style.outline="2px solid var(--glow1)"; if(sel.length===4) check(); } };
    board.appendChild(b);
  });
  function check(){
    const ok = sel.join("")===target.join("");
    toast(ok?"–®–ª—é–∑ –æ—Ç–∫—Ä—ã—Ç! +2 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞":"–ù–µ–≤–µ—Ä–Ω–æ, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –¥–∞–ª–∞ +1 —Ñ—Ä–∞–≥–º–µ–Ω—Ç");
    const tgt = document.createElement("div"); tgt.className="tag"; tgt.textContent="–ö–ª—é—á –±—ã–ª: "+target.join(" ");
    panel.appendChild(tgt);
  }
  panel.appendChild(board);
  root.appendChild(panel);
}

function buildBodyLang(root,state){
  const intro = document.createElement("div"); intro.className="questIntro";
  intro.innerHTML = "<p>–°—á–∏—Ç–∞–π —ç–º–æ—Ü–∏—é –ø–æ –Ω–µ–≤–µ—Ä–±–∞–ª—å–Ω—ã–º —Å–∏–≥–Ω–∞–ª–∞–º. –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.</p>";
  const face = document.createElement("div"); face.className="face"; face.innerHTML='<div class="brow left"></div><div class="brow right"></div><div class="eye left"></div><div class="eye right"></div><div class="mouth"></div>';
  const variants = ["–¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å","–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å","—Ä–∞–¥–æ—Å—Ç—å","–≥–Ω–µ–≤","—Å–∫–µ–ø—Å–∏—Å","—É–¥–∏–≤–ª–µ–Ω–∏–µ","–ø—Ä–µ–∑—Ä–µ–Ω–∏–µ","—Å—Ç—Ä–∞—Ö","–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å","—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å","–∫–æ–ª–µ–±–∞–Ω–∏–µ","–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ","–≥—Ä—É—Å—Ç—å","–ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ","–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å"];
  function pick3(){
    const copy=[...variants]; const res=[];
    for(let i=0;i<3;i++){ const idx=Math.floor(Math.random()*copy.length); res.push(copy.splice(idx,1)[0]); }
    return res;
  }
  const allExpressions = ["dominance","uncertainty","happy","angry","skeptic","surprise","contempt","fear","interest","determination","hesitation","disgust","sad","submission","neutral"];
  const exp = allExpressions[(variationIndex())%allExpressions.length];
  document.body.className = document.body.className.replace(/expr-\w+/g,"")+" expr-"+exp;
  const options = pick3();
  const ui = document.createElement("div"); ui.className="questActions";
  options.forEach(op=>{
    const b=document.createElement("button"); b.className="btn"; b.textContent=op;
    b.onclick=()=>{
      const map = {dominance:"–¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å",uncertainty:"–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",happy:"—Ä–∞–¥–æ—Å—Ç—å",angry:"–≥–Ω–µ–≤",skeptic:"—Å–∫–µ–ø—Å–∏—Å",surprise:"—É–¥–∏–≤–ª–µ–Ω–∏–µ",contempt:"–ø—Ä–µ–∑—Ä–µ–Ω–∏–µ",fear:"—Å—Ç—Ä–∞—Ö",interest:"–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å",determination:"—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",hesitation:"–∫–æ–ª–µ–±–∞–Ω–∏–µ",disgust:"–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ",sad:"–≥—Ä—É—Å—Ç—å",submission:"–ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ",neutral:"–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å"};
      if(op===map[exp]) toast("–í–µ—Ä–Ω–æ! +2 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞"); else toast("–ß—É—Ç—å –º–∏–º–æ, –Ω–æ —Ç–æ–∂–µ –æ–ø—ã—Ç! +1 —Ñ—Ä–∞–≥–º–µ–Ω—Ç");
    };
    ui.appendChild(b);
  });
  root.append(intro, face, ui);
}

function buildProfiling(root,state){
  const v = variationIndex();
  const sampleProfiles = Array.from({length:VARIATIONS_PER_QUEST}, (_,i)=>({ 
    avatar:`https://picsum.photos/seed/profile${i}/128/128`, 
    username:`user_${(1000+i)}`, 
    name:`–ò–º—è –§–∞–º–∏–ª–∏—è ${i+1}`,
    status:["–≤—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω","—Ä–µ–¥–∫–æ –≤ —Å–µ—Ç–∏","–Ω–æ—á–Ω–∞—è —Å–æ–≤–∞","—Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –∑–∞–ø—É—Å–∫–æ–º","–∏—â—É –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤"][i%5],
    stories: ["–≤–µ–±–∏–Ω–∞—Ä","–¥–æ—Ö–æ–¥","–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ","–∫–µ–π—Å—ã","—Å–ø–æ—Ä—Ç","–∫–æ—Ñ–µ","–∫–æ–¥","NFT","–±–æ—Ç","—Ç–∞—Ä–≥–µ—Ç"][i%10]
  }));
  const p = sampleProfiles[v];
  const box = document.createElement("div"); box.className="questBody";
  box.innerHTML = `
    <div class="questIntro"><p>–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –í—ã–±–µ—Ä–∏, –∫–∞–∫–∏–µ —á–µ—Ä—Ç—ã –±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã.</p></div>
    <div style="display:flex;gap:12px;align-items:center">
      <img src="${p.avatar}" alt="" style="width:72px;height:72px;border-radius:50%;border:1px solid var(--border)"/>
      <div>
        <div><b>${p.name}</b> <span class="muted">@${p.username}</span></div>
        <div class="muted">${p.status}</div>
        <div class="muted">–∏—Å—Ç–æ—Ä–∏–∏: #${p.stories}</div>
      </div>
    </div>
  `;
  const traits = ["–¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–æ—Å—Ç—å","–∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å","—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å","–∑–∞–º–∫–Ω—É—Ç–æ—Å—Ç—å","–æ—Ç—Ä–µ—à–µ–Ω–Ω–æ—Å—Ç—å","—Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è","—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å","–ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º"];
  const correct = ["—Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è","—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å","–∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]; // —É—Å–ª–æ–≤–Ω–æ
  const area = document.createElement("div"); area.className="questActions";
  traits.forEach(t=>{
    const b = document.createElement("button"); b.className="btn ghost"; b.textContent=t;
    b.onclick=()=>{
      toast(correct.includes(t) ? "–•–æ—Ä–æ—à–∞—è –æ—Ü–µ–Ω–∫–∞! +2 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞" : "–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ —Å–ø–æ—Ä–Ω–æ. +1 —Ñ—Ä–∞–≥–º–µ–Ω—Ç");
    };
    area.appendChild(b);
  });
  root.appendChild(box); root.appendChild(area);
}

function buildIslandLink(root,state){
  const box = document.createElement("div"); box.className="questIntro";
  box.innerHTML = `<p>–≠—Ç–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ü–µ–Ω–∞ ¬´–û—Å—Ç—Ä–æ–≤ –ê—Ä—Ö–∏–≤¬ª. –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –º–∏–Ω–∏‚Äë–∞–ø–ø—É.</p>`;
  const open = document.createElement("button"); open.className="btn primary"; open.textContent="–û—Ç–∫—Ä—ã—Ç—å –æ—Å—Ç—Ä–æ–≤";
  open.onclick = ()=>{
    if(tg && tg.openLink){
      tg.openLink(ISLAND_MINIAPP_URL, {try_instant_view:false});
    }else{
      const iframe = document.createElement("iframe");
      iframe.src = ISLAND_MINIAPP_URL;
      iframe.style.width="100%"; iframe.style.height="60vh"; iframe.style.border="1px solid var(--border)"; iframe.style.borderRadius="12px";
      root.appendChild(iframe);
    }
  };
  root.append(box, open);
}

function buildROI(root,state){
  const v = variationIndex();
  const opts = Array.from({length:3}, (_,i)=>{
    const spend = 100 + (i+v)%5*50;
    const rev = spend * (1.6 + (i%3)*0.2);
    const roi = (rev-spend)/spend;
    return {label:`–ö–∞–º–ø–∞–Ω–∏—è ${String.fromCharCode(65+i)}`, spend, rev, roi};
  });
  const box = document.createElement("div"); box.innerHTML = "<p>–í—ã–±–µ—Ä–∏ –∫–∞–º–ø–∞–Ω–∏—é —Å –ª—É—á—à–∏–º ROI.</p>";
  const area = document.createElement("div"); area.className="questActions";
  const best = opts.reduce((a,b)=> a.roi>b.roi?a:b );
  opts.forEach(o=>{
    const b=document.createElement("button"); b.className="btn"; b.textContent=`${o.label}: –ø–æ—Ç—Ä–∞—á–µ–Ω–æ ${o.spend}$, –¥–æ—Ö–æ–¥ ${o.rev.toFixed(0)}$`;
    b.onclick=()=> toast(o===best ? "–í–µ—Ä–Ω–æ! +2 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞" : "–ú–æ–∂–Ω–æ –ª—É—á—à–µ. +1 —Ñ—Ä–∞–≥–º–µ–Ω—Ç");
    area.appendChild(b);
  });
  root.append(box, area);
}

function buildFunnel(root,state){
  const steps = ["–ü–æ–∫–∞–∑—ã","–ö–ª–∏–∫–∏","–õ–∏–¥—ã","–û–ø–ª–∞—Ç—ã"];
  const funnel = steps.map((s,i)=> ({name:s, val: 10000 / Math.pow(2, i + (variationIndex()%2))}));
  const txt = document.createElement("p"); txt.textContent="–ì–¥–µ —É–∑–∫–æ–µ –º–µ—Å—Ç–æ –≤ –≤–æ—Ä–æ–Ω–∫–µ?";
  const area = document.createElement("div"); area.className="questActions";
  const min = funnel.reduce((a,b)=> a.val<b.val?a:b );
  funnel.forEach(f=>{
    const b=document.createElement("button"); b.className="btn"; b.textContent=`${f.name}: ${f.val|0}`;
    b.onclick=()=> toast(f===min ? "–¢–æ—á–Ω–æ! +2" : "–ù–µ —Å–æ–≤—Å–µ–º. +1");
    area.appendChild(b);
  });
  root.append(txt, area);
}

function buildCopy(root,state){
  const v = variationIndex();
  const pairs = [
    ["–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "–¢–≤–æ–π –ø–µ—Ä–≤—ã–π –æ–Ω–ª–∞–π–Ω‚Äë–¥–æ—Ö–æ–¥ –∑–∞ 7 –¥–Ω–µ–π"],
    ["–ö–∞–∫ –Ω–∞—á–∞—Ç—å –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π", "0‚ÇΩ —Å—Ç–∞—Ä—Ç: —á–µ–∫‚Äë–ª–∏—Å—Ç –Ω–æ–≤–∏—á–∫–∞"],
    ["–ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ —à–∞–≥‚Äë–∑–∞‚Äë—à–∞–≥–æ–º", "–°–ø–∏ ‚Äî –∞ –¥–µ–Ω—å–≥–∏ –∏–¥—É—Ç? –†–∞–∑–±–∏—Ä–∞–µ–º –º–∏—Ñ—ã"]
  ];
  const idx = v % pairs.length;
  const [A,B] = pairs[idx];
  const winner = (v%2? "A":"B");
  const txt = document.createElement("p"); txt.textContent = "–ß—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –ª—É—á—à–µ –≤ A/B —Ç–µ—Å—Ç–µ?";
  const a=document.createElement("button"); a.className="btn"; a.textContent="A) "+A;
  const b=document.createElement("button"); b.className="btn"; b.textContent="B) "+B;
  a.onclick=()=>toast(winner==="A"?"–í–µ—Ä–Ω–æ! +2 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞":"–ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ B –±—ã–ª –ª—É—á—à–µ. +1");
  b.onclick=()=>toast(winner==="B"?"–í–µ—Ä–Ω–æ! +2 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞":"–°–µ–≥–æ–¥–Ω—è –ø–æ–±–µ–¥–∏–ª A. +1");
  const area=document.createElement("div"); area.className="questActions"; area.append(a,b);
  root.append(txt, area);
}

function buildScam(root,state){
  const txt = document.createElement("p"); txt.textContent="–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–∏—à–∏–Ω–≥/—Å–∫–∞–º?";
  const opts = [
    {t:"–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 20%/–¥–µ–Ω—å –Ω–∞–≤—Å–µ–≥–¥–∞", scam:true},
    {t:"–ü–∞—Ä—Ç–Ω—ë—Ä–∫–∞ 10‚Äì30% —Å —á–µ–∫‚Äë–ª–∏—Å—Ç–æ–º", scam:false},
    {t:"–ü–ª–∞—Ç—ë–∂ ¬´—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞ 1‚ÇΩ¬ª, –≤–µ—Ä–Ω—ë–º x100", scam:true}
  ];
  const area = document.createElement("div"); area.className="questActions";
  opts.forEach(o=>{
    const b=document.createElement("button"); b.className="btn"; b.textContent=o.t;
    b.onclick=()=>toast(o.scam?"–í–µ—Ä–Ω–æ: —ç—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä —Å–∫–∞–º–∞. +2":"–û—Å—Ç–æ—Ä–æ–∂–Ω–æ: —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ—Ä–º –≤–∞—Ä–∏–∞–Ω—Ç. +1");
    area.appendChild(b);
  });
  root.append(txt, area);
}

function buildNiche(root,state){
  const n = [
    {name:"–°—Ç–∏–∫–µ—Ä—ã‚Äë–±–æ—Ç—ã", demand:60, comp:30},
    {name:"–ò–Ω—Ñ–æ‚Äë–ø—Ä–æ–¥—É–∫—Ç—ã", demand:80, comp:70},
    {name:"–ê–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∏", demand:70, comp:50}
  ];
  const txt = document.createElement("p"); txt.textContent="–í—ã–±–µ—Ä–∏ –Ω–∏—à—É —Å –ª—É—á—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º —Å–ø—Ä–æ—Å–∞/–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏.";
  const area = document.createElement("div"); area.className="questActions";
  const score = (x)=> x.demand - x.comp*0.6;
  const best = n.reduce((a,b)=> score(a)>score(b)?a:b);
  n.forEach(o=>{
    const b=document.createElement("button"); b.className="btn"; b.textContent=`${o.name}: —Å–ø—Ä–æ—Å ${o.demand}, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è ${o.comp}`;
    b.onclick=()=>toast(o===best ? "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! +2" : "–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –±—ã–ª –ª—É—á—à–µ –≤–∞—Ä–∏–∞–Ω—Ç. +1");
    area.appendChild(b);
  });
  root.append(txt, area);
}

function buildNoir(root,state){
  const txt = document.createElement("p"); txt.textContent="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏ –ø–æ—Ä—è–¥–æ–∫ —É–ª–∏–∫ (1‚Üí3).";
  const clues = ["—Å–ª–µ–¥—ã –±–æ—Ç–∏–Ω–æ–∫","—Å–ª–æ–º–∞–Ω–Ω—ã–π –∑–∞–º–æ–∫","–ø—É—Å—Ç–∞—è –∫–∞—Å—Å–∞"];
  const area = document.createElement("div"); area.className="questActions";
  let order=[];
  clues.forEach(c=>{
    const b=document.createElement("button"); b.className="btn ghost"; b.textContent=c;
    b.onclick=()=>{ order.push(c); if(order.length===3) check(); };
    area.appendChild(b);
  });
  function check(){
    const ok = order.join("|")==="—Å–ª–µ–¥—ã –±–æ—Ç–∏–Ω–æ–∫|—Å–ª–æ–º–∞–Ω–Ω—ã–π –∑–∞–º–æ–∫|–ø—É—Å—Ç–∞—è –∫–∞—Å—Å–∞";
    toast(ok?"–õ–æ–≥–∏—á–Ω–æ! +2":"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–∞—è. +1");
  }
  root.append(txt, area);
}

function buildSpace(root,state){
  const txt = document.createElement("p"); txt.textContent="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π –æ—Ä–±–∏—Ç—É: –Ω–∞–∂–º–∏, –∫–æ–≥–¥–∞ —Å–ø—É—Ç–Ω–∏–∫ –≤ –∑–æ–Ω–µ.";
  const zone = document.createElement("div"); zone.style.height="120px"; zone.style.border="1px solid var(--border)"; zone.style.borderRadius="12px"; zone.style.position="relative"; zone.style.overflow="hidden";
  const sat = document.createElement("div"); sat.style.width="14px"; sat.style.height="14px"; sat.style.borderRadius="50%"; sat.style.background="var(--glow2)"; sat.style.position="absolute"; sat.style.left="0"; sat.style.top="52px";
  const gate = document.createElement("div"); gate.style.position="absolute"; gate.style.left="50%"; gate.style.top="40px"; gate.style.width="40px"; gate.style.height="40px"; gate.style.border="2px dashed var(--accent)"; gate.style.borderRadius="50%";
  zone.append(sat, gate);
  let x=0, dir=1;
  const loop = ()=>{
    x+=dir*2; if(x>zone.clientWidth-14){dir=-1}else if(x<0){dir=1}
    sat.style.transform=`translateX(${x}px)`;
    requestAnimationFrame(loop);
  }; loop();
  zone.onclick=()=>{
    const satCenter = x+7, gateLeft=zone.clientWidth/2-20, gateRight=zone.clientWidth/2+20;
    if(satCenter>gateLeft && satCenter<gateRight){ toast("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è! +2 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞"); } else { toast("–ü–æ—á—Ç–∏! +1"); }
  };
  root.append(txt, zone);
}

function buildGears(root,state){
  const txt = document.createElement("p"); txt.textContent="–í—ã—Å—Ç–∞–≤—å —à–µ—Å—Ç–µ—Ä–Ω–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –±–æ–ª—å—à–∞—è –∫—Ä—É—Ç–∏–ª–∞—Å—å –ø–æ —á–∞—Å–æ–≤–æ–π.";
  const area=document.createElement("div"); area.className="questActions";
  ["–º–∞–ª–µ–Ω—å–∫–∞—è ‚Ü∫","—Å—Ä–µ–¥–Ω—è—è ‚Üª","–±–æ–ª—å—à–∞—è ‚Ü∫","–±–æ–ª—å—à–∞—è ‚Üª"].forEach(t=>{
    const b=document.createElement("button"); b.className="btn"; b.textContent=t;
    b.onclick=()=>toast(t.includes("–±–æ–ª—å—à–∞—è ‚Üª")? "–î–∞! +2" : "–ù–µ—Ç, –ø–µ—Ä–µ–¥–∞—á–∞ –Ω–µ–≤–µ—Ä–Ω–∞. +1");
    area.appendChild(b);
  });
  root.append(txt, area);
}

function buildSignals(root,state){
  const txt=document.createElement("p"); txt.textContent="–í—ã–±–µ—Ä–∏ –≥—Ä–∞—Ñ–∏–∫ —Å —è–≤–Ω—ã–º –≤–æ—Å—Ö–æ–¥—è—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º.";
  const area=document.createElement("div"); area.className="questActions";
  const arr=[ "+  ÔºèÔºèÔºè", "~  Ôºè~Ôºè", "-  \\\\__" ];
  const best=0;
  arr.forEach((g,i)=>{
    const b=document.createElement("button"); b.className="btn"; b.textContent=g.replaceAll("/", "‚ñù").replaceAll("\\\\","‚ññ");
    b.onclick=()=>toast(i===best? "–≠—Ç–æ —Ç—Ä–µ–Ω–¥! +2":"–®—É–º. +1");
    area.appendChild(b);
  });
  root.append(txt, area);
}

function buildConstellation(root,state){
  const txt=document.createElement("p"); txt.textContent="–ü—Ä–æ–≤–µ–¥–∏ –ª–∏–Ω–∏—é —á–µ—Ä–µ–∑ –∑–≤—ë–∑–¥—ã.";
  const box=document.createElement("div"); box.style.height="240px"; box.style.border="1px solid var(--border)"; box.style.borderRadius="12px"; box.style.position="relative";
  const stars = Array.from({length:5},(_,i)=>({x:20+i*50+Math.random()*20, y:30+Math.random()*160}));
  stars.forEach(s=>{
    const d=document.createElement("div");
    d.style.width="8px"; d.style.height="8px"; d.style.borderRadius="50%"; d.style.background="white"; d.style.position="absolute"; d.style.left=s.x+'px'; d.style.top=s.y+'px';
    box.appendChild(d);
  });
  let drawing=false; let last=null;
  box.addEventListener("pointerdown",e=>{drawing=true; last={x:e.offsetX,y:e.offsetY}});
  box.addEventListener("pointermove",e=>{
    if(!drawing) return;
    const seg=document.createElement("div");
    const dx=e.offsetX-last.x, dy=e.offsetY,lastx=last.x,lasty=last.y, len=Math.hypot(dx,dy), ang=Math.atan2(dy,dx)*180/Math.PI;
    seg.style.position="absolute"; seg.style.left=lastx+'px'; seg.style.top=lasty+'px';
    seg.style.width=len+'px'; seg.style.height='2px'; seg.style.background="linear-gradient(90deg, #A6B4FF, transparent)";
    seg.style.transformOrigin="0 50%"; seg.style.transform=`rotate(${ang}deg)`;
    seg.style.opacity=".85";
    box.appendChild(seg);
    last={x:e.offsetX,y:e.offsetY};
  });
  window.addEventListener("pointerup",()=>{ if(drawing){ drawing=false; toast("–°–æ–∑–≤–µ–∑–¥–∏–µ —Å–æ–±—Ä–∞–Ω–æ! +2"); } });
  root.append(txt, box);
}

/* ====== Subscription + promo ====== */
async function loadState(){
  let userId = null;
  try{ userId = tg && tg.initDataUnsafe && tg.initDataUnsafe.user ? String(tg.initDataUnsafe.user.id) : null; }catch(e){}
  let isSubscribed=false;
  if(supabase && userId){
    try{
      const { data, error } = await supabase.from(SUBSCRIPTIONS_TABLE).select("*").eq("tg_id", userId).maybeSingle();
      if(!error && data){ isSubscribed=true; }
    }catch(e){ console.warn("supabase check fail", e); }
  }
  return { userId, isSubscribed };
}

function recordDayVisit(){
  const key="qh_days";
  const d = String(dayIndex());
  let set=new Set((localStorage.getItem(key)||"").split(",").filter(Boolean));
  set.add(d);
  localStorage.setItem(key, Array.from(set).join(","));
  return set.size;
}

async function maybeOfferPromo(state){
  if(state.isSubscribed) return;
  const days = recordDayVisit();
  if(days>=10){
    const claim = document.createElement("div");
    claim.className="glass"; claim.style.margin="12px"; claim.style.padding="12px";
    claim.innerHTML = `<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –¢—ã –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –∫–≤–µ—Å—Ç—ã –∑–∞ 10 –¥–Ω–µ–π. –ó–∞–±–µ—Ä–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ -50% (–¥–µ–π—Å—Ç–≤—É–µ—Ç 60 –¥–Ω–µ–π).`;
    const btn = document.createElement("button"); btn.className="btn primary"; btn.textContent="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥";
    btn.onclick = async ()=>{
      const code = genCode(state.userId);
      await savePromo(code, state.userId);
      const box = document.createElement("div"); box.className="banner";
      box.innerHTML = `–ü—Ä–æ–º–æ–∫–æ–¥: <b>${code}</b> ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç 60 –¥–Ω–µ–π. –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É <a href="https://t.me/${ADMIN_USERNAME}" target="_blank">@${ADMIN_USERNAME}</a>.`;
      claim.appendChild(box);
    };
    claim.appendChild(btn);
    $(".app").insertAdjacentElement("afterbegin", claim);
  }
}

function genCode(uid){
  const rand = Math.random().toString(36).slice(2,8).toUpperCase();
  return ("QH-"+(uid||"GUEST").slice(-4)+"-"+rand).replace(/[^A-Z0-9\-]/g,"");
}

async function savePromo(code, uid){
  if(!supabase){ toast("–ü—Ä–æ–º–æ–∫–æ–¥: "+code); return true; }
  const expires = new Date(Date.now()+60*24*60*60*1000).toISOString();
  const { data, error } = await supabase.from(PROMOCODES_TABLE).insert({ code, tg_id: uid, status:"unused", issued_at: new Date().toISOString(), expires_at: expires });
  if(error){ console.warn(error); toast("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ –∫–æ–¥: "+code); return false; }
  toast("–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!");
  return true;
}

/* ====== Header buttons ====== */
$("#btnSubscribe").addEventListener("click", ()=>{
  if(tg && tg.openLink){ tg.openLink(PAYMENT_URL, {try_instant_view:false}); } else { window.open(PAYMENT_URL, "_blank"); }
});
$("#btnAlbum").addEventListener("click", ()=>{ toast("–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å ‚ú®"); });

/* ====== Init ====== */
loadState().then(state=>{
  buildCards(state);
  maybeOfferPromo(state);
});
