
/* ====== CONFIG ====== */
const SUPABASE_URL = window.SUPABASE_URL || "https://uhhsrtmmuwoxsdquimaa.supabase.co";
const SUPABASE_ANON_KEY = window.SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8";
const SUBSCRIPTIONS_TABLE = "subscriptions";
const PROMOCODES_TABLE = "promocodes";
const ADMIN_USERNAME = "@acqu1red";
const ADMIN_IDS = ["acqu1red", "123456789", "708907063", "7365307696"]; // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

const PAYMENT_URL = "https://acqu1red.github.io/formulaprivate/payment.html";
const ISLAND_MINIAPP_URL = "./island.html";

const MAX_DAILY_FREE = 5;
const TOTAL_QUESTS = 10; // –£–º–µ–Ω—å—à–∏–ª –¥–æ 10 –∫–≤–µ—Å—Ç–æ–≤
const VARIATIONS_PER_QUEST = 10;

// –°–∏—Å—Ç–µ–º–∞ —Ä—É–ª–µ—Ç–∫–∏ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å mulacoin –ø—Ä–∏–∑–∞–º–∏
const ROULETTE_PRIZES = [
  { id: "subscription", name: "1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏", icon: "üëë", count: 2, probability: 0.02, color: "#FFD700" },
  { id: "discount500", name: "–°–∫–∏–¥–∫–∞ 500‚ÇΩ", icon: "üí∞", count: 1, probability: 0.05, color: "#FF6B6B" },
  { id: "discount100", name: "–°–∫–∏–¥–∫–∞ 100‚ÇΩ", icon: "üíµ", count: 2, probability: 0.08, color: "#4ECDC4" },
  { id: "discount50", name: "–°–∫–∏–¥–∫–∞ 50‚ÇΩ", icon: "ü™ô", count: 3, probability: 0.12, color: "#A8E6CF" },
  { id: "mulacoin100", name: "100 MULACOIN", icon: "ü™ô", count: 4, probability: 0.15, color: "#FFEAA7" },
  { id: "mulacoin50", name: "50 MULACOIN", icon: "ü™ô", count: 5, probability: 0.18, color: "#DDA0DD" },
  { id: "mulacoin25", name: "25 MULACOIN", icon: "ü™ô", count: 6, probability: 0.20, color: "#98D8C8" },
  { id: "quest24h", name: "+1 –∫–≤–µ—Å—Ç 24—á", icon: "üéØ", count: 3, probability: 0.15, color: "#F7DC6F" },
  { id: "frodCourse", name: "–ö–£–†–° –§–†–û–î–ê", icon: "üìö", count: 1, probability: 0.0001, color: "#6C5CE7" }
];

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
const LEVEL_EXP = [
  100, 300, 600, 1000, 1500, 2100, 2800, 3600, 4500, 5500,
  6600, 7800, 9100, 10500, 12000, 13600, 15300, 17100, 19000, 21000
];

// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∫–≤–µ—Å—Ç—ã
const QUEST_REWARDS = {
  easy: { mulacoin: 1, exp: 150 },
  medium: { mulacoin: 3, exp: 500 },
  hard: { mulacoin: 5, exp: 1000 }
};

const SPIN_COST = 13;

/* ====== Telegram init ====== */
let tg = null;
function initTG(){
  try{
    tg = window.Telegram && window.Telegram.WebApp ? window.Telegram.WebApp : null;
    if(tg){
      tg.expand();
      tg.enableClosingConfirmation();
      document.body.classList.add("tg-ready");
      
      // –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
        userData.telegramId = tg.initDataUnsafe.user.id;
        console.log('Telegram ID –ø–æ–ª—É—á–µ–Ω:', userData.telegramId);
      }
    }
  }catch(e){ console.log("TG init fail", e); }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
initTG();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  setTimeout(async () => {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!supabase && window.supabase) {
      await initSupabase();
    }
    
    if (supabase) {
      console.log('Supabase –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      try {
        const { data, error } = await supabase.from('bot_user').select('count').limit(1);
        if (error) {
          console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Supabase:', error);
          toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        } else {
          console.log('–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase —É—Å–ø–µ—à–µ–Ω');
          toast('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Supabase:', error);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å Telegram ID
      if (userData.telegramId) {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram ID:', userData.telegramId);
        await loadUserData(userData.telegramId);
      } else {
        console.log('Telegram ID –Ω–µ –ø–æ–ª—É—á–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      }
    } else {
      console.error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      toast('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
  }, 1000);
});

/* ====== Supabase ====== */
let supabase = null;

async function initSupabase() {
  try {
    if (window.supabase) {
      supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
      console.log('Supabase –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const { data, error } = await supabase.from('bot_user').select('count').limit(1);
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
      } else {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
      }
    } else {
      console.error('Supabase –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
initSupabase();

/* ====== Utils ====== */
const $ = (sel, el=document)=>el.querySelector(sel);
const $$ = (sel, el=document)=>Array.from(el.querySelectorAll(sel));
const toast = (msg, type = 'info')=>{ 
  const t = $("#toast"); 
  t.textContent = msg; 
  t.className = `toast ${type}`;
  t.classList.add("show"); 
  setTimeout(()=>t.classList.remove("show"), 3000); 
};

// –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª—é—Ç –∏ —É—Ä–æ–≤–Ω–µ–π
let userData = {
  mulacoin: 0,
  exp: 0,
  level: 1,
  userId: null,
  lastFreeSpin: null, // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–∞
  telegramId: null
};

function calculateLevel(exp) {
  let level = 1;
  for (let i = 0; i < LEVEL_EXP.length; i++) {
    if (exp >= LEVEL_EXP[i]) {
      level = i + 2;
    } else {
      break;
    }
  }
  return level;
}

function getExpForNextLevel(level) {
  if (level <= LEVEL_EXP.length) {
    return LEVEL_EXP[level - 1];
  }
  return LEVEL_EXP[LEVEL_EXP.length - 1] + (level - LEVEL_EXP.length) * 1000;
}

function updateCurrencyDisplay() {
  console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã:', userData);
  
  const mulacoinEl = $("#mulacoinAmount");
  const userMulacoinEl = $("#userMulacoin");
  const levelEl = $("#currentLevel");
  const progressEl = $("#levelProgress");
  
  console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', {
    mulacoinEl: !!mulacoinEl,
    userMulacoinEl: !!userMulacoinEl,
    levelEl: !!levelEl,
    progressEl: !!progressEl
  });
  
  if (mulacoinEl) {
    mulacoinEl.textContent = userData.mulacoin;
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω mulacoinAmount:', userData.mulacoin);
  }
  if (userMulacoinEl) {
    userMulacoinEl.textContent = userData.mulacoin;
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω userMulacoin:', userData.mulacoin);
  }
  if (levelEl) {
    levelEl.textContent = userData.level;
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω currentLevel:', userData.level);
  }
  
  const expForNext = getExpForNextLevel(userData.level);
  const currentLevelExp = userData.level > 1 ? LEVEL_EXP[userData.level - 2] : 0;
  const progress = userData.exp - currentLevelExp;
  const total = expForNext - currentLevelExp;
  
  if (progressEl) {
    progressEl.textContent = `${progress}/${total}`;
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω levelProgress:', `${progress}/${total}`);
  }
}

async function addRewards(mulacoin, exp, questId = null, questName = null, difficulty = null) {
  console.log('=== –°–¢–ê–†–¢ ADDREWARDS ===');
  console.log('addRewards –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { mulacoin, exp, questId, questName, difficulty });
  console.log('–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
  console.log('Supabase –¥–æ—Å—Ç—É–ø–µ–Ω:', !!supabase);
  console.log('Telegram ID:', userData.telegramId);
  
  const oldLevel = userData.level;
  
  userData.mulacoin += mulacoin;
  userData.exp += exp;
  userData.level = calculateLevel(userData.exp);
  
  console.log('–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', userData);
  
  updateCurrencyDisplay();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
  if (userData.level > oldLevel) {
    toast(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${userData.level} —É—Ä–æ–≤–Ω—è!`, 'success');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
  console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
  await saveUserData();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–≤–µ—Å—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (questId && questName && difficulty) {
    console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–≤–µ—Å—Ç–∞...');
    await saveQuestHistory(questId, questName, difficulty, mulacoin, exp);
  }
  
  console.log('addRewards –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –°–∏—Å—Ç–µ–º–∞ —Ä—É–ª–µ—Ç–∫–∏ - —Å—Ç–∏–ª—å –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
function createRouletteWheel() {
  console.log('=== –°–û–ó–î–ê–ù–ò–ï –†–£–õ–ï–¢–ö–ò ===');
  console.log('–¢–µ–∫—É—â–∏–π –¥–∏–∑–∞–π–Ω:', currentRouletteDesign);
  
  const items = $("#rouletteItems");
  const preview = $("#previewItems");
  const container = $(".roulette-container");
  
  if (!items) {
    console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä rouletteItems –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  if (!preview) {
    console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä previewItems –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  if (!container) {
    console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä roulette-container –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  console.log('‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä—É–ª–µ—Ç–∫–∏ –Ω–∞–π–¥–µ–Ω—ã');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–∏–∑–∞–π–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  container.className = `roulette-container ${currentRouletteDesign}`;
  
  items.innerHTML = '';
  preview.innerHTML = '';
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä—É–ª–µ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  rouletteCurrentPosition = 0;
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∑–∞–π–Ω–∞
  const currentPrizes = ROULETTE_PRIZES_DESIGNS[currentRouletteDesign] || ROULETTE_PRIZES_DESIGNS.standard;
  
  // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–∑–æ–≤
  let allItems = [];
  currentPrizes.forEach(prize => {
    for (let i = 0; i < prize.count; i++) {
      allItems.push(prize);
    }
  });
  
  console.log('–°–æ–∑–¥–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–∑–æ–≤:', allItems.length);
  
  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
  allItems.sort(() => Math.random() - 0.5);
  
  // –°–æ–∑–¥–∞–µ–º –ë–ï–°–ö–û–ù–ï–ß–ù–£–Æ –ª–µ–Ω—Ç—É –∏–∫–æ–Ω–æ–∫ –¥–ª—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
  const totalItems = allItems.length * 20; // –ü–æ–≤—Ç–æ—Ä—è–µ–º 20 —Ä–∞–∑ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  
  console.log('–°–æ–∑–¥–∞–µ–º', totalItems, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è...');
  
  for (let i = 0; i < totalItems; i++) {
    const prize = allItems[i % allItems.length];
    const item = document.createElement('div');
    item.className = 'roulette-item';
    item.dataset.prize = prize.id;
    
    // –î–ª—è –∞–≤—Ç–æ—Ä—Å–∫–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
    if (currentRouletteDesign === 'author') {
      const randomRotation = (Math.random() - 0.5) * 20; // –æ—Ç -10 –¥–æ +10 –≥—Ä–∞–¥—É—Å–æ–≤
      item.style.setProperty('--random-rotation', `${randomRotation}deg`);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∫–æ–Ω–∫–∏
    const symbol = document.createElement('div');
    symbol.className = 'icon-symbol';
    symbol.textContent = prize.icon;
    
    const label = document.createElement('div');
    label.className = 'icon-label';
    label.textContent = prize.name;
    
    item.appendChild(symbol);
    item.appendChild(label);
    items.appendChild(item);
  }
  
  console.log('‚úÖ –≠–ª–µ–º–µ–Ω—Ç—ã —Ä—É–ª–µ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:', items.children.length);
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –ø—Ä–∏–∑–æ–≤
  console.log('–°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –ø—Ä–∏–∑–æ–≤...');
  currentPrizes.forEach(prize => {
    const previewItem = document.createElement('div');
    previewItem.className = 'preview-item';
    
    const icon = document.createElement('span');
    icon.className = 'preview-icon';
    icon.textContent = prize.icon;
    
    const name = document.createElement('span');
    name.textContent = prize.name;
    
    previewItem.appendChild(icon);
    previewItem.appendChild(name);
    preview.appendChild(previewItem);
  });
  
  console.log('‚úÖ –ü—Ä–µ–≤—å—é –ø—Ä–∏–∑–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:', preview.children.length);
  console.log('=== –†–£–õ–ï–¢–ö–ê –°–û–ó–î–ê–ù–ê –£–°–ü–ï–®–ù–û ===');
}

function getSectorColor(prizeId) {
  const colors = {
    subscription: 'linear-gradient(45deg, #FFD700, #FFA500)',
    discount500: 'linear-gradient(45deg, #FF6B6B, #FF8E8E)',
    discount100: 'linear-gradient(45deg, #4ECDC4, #44A08D)',
    discount50: 'linear-gradient(45deg, #A8E6CF, #7FCDCD)',
    quest24h: 'linear-gradient(45deg, #FFEAA7, #DDA0DD)',
    frodCourse: 'linear-gradient(45deg, #6C5CE7, #A29BFE)'
  };
  return colors[prizeId] || 'linear-gradient(45deg, #74B9FF, #0984E3)';
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —Ä—É–ª–µ—Ç–∫–∏
let rouletteCurrentPosition = 0;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∑–∞–π–Ω–∞ —Ä—É–ª–µ—Ç–∫–∏
let currentRouletteDesign = 'standard';

// –ò–∫–æ–Ω–∫–∏ –ø—Ä–∏–∑–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–æ–≤
const ROULETTE_PRIZES_DESIGNS = {
  standard: [
    { id: 'subscription', name: '–ü–æ–¥–ø–∏—Å–∫–∞', icon: 'üëë', count: 3, probability: 0.03 },
    { id: 'discount500', name: '500‚ÇΩ', icon: 'üíé', count: 1, probability: 0.10 },
    { id: 'discount100', name: '100‚ÇΩ', icon: 'üíµ', count: 3, probability: 0.15 },
    { id: 'discount50', name: '50‚ÇΩ', icon: 'üí∞', count: 4, probability: 0.20 },
    { id: 'quest24h', name: '–ö–≤–µ—Å—Ç 24—á', icon: 'üéØ', count: 5, probability: 0.75 },
    { id: 'frodCourse', name: '–ö—É—Ä—Å', icon: 'üìö', count: 1, probability: 0.0005 }
  ],
  casino: [
    { id: 'subscription', name: '–ù–ï–û-–ü–û–î–ü–ò–°–ö–ê', icon: '‚ö°', count: 3, probability: 0.03 },
    { id: 'discount500', name: '500 CREDITS', icon: 'üîÆ', count: 1, probability: 0.10 },
    { id: 'discount100', name: '100 CREDITS', icon: 'üí†', count: 3, probability: 0.15 },
    { id: 'discount50', name: '50 CREDITS', icon: '‚öôÔ∏è', count: 4, probability: 0.20 },
    { id: 'quest24h', name: 'HACK 24H', icon: 'üéÆ', count: 5, probability: 0.75 },
    { id: 'frodCourse', name: 'MATRIX', icon: 'üåê', count: 1, probability: 0.0005 }
  ],
  author: [
    { id: 'subscription', name: '–ü–û–î–ü–ò–°–ö–ê', icon: 'üåü', count: 3, probability: 0.03 },
    { id: 'discount500', name: '500 –†–£–ë', icon: 'üåà', count: 1, probability: 0.10 },
    { id: 'discount100', name: '100 –†–£–ë', icon: 'üé™', count: 3, probability: 0.15 },
    { id: 'discount50', name: '50 –†–£–ë', icon: 'üé®', count: 4, probability: 0.20 },
    { id: 'quest24h', name: '–ö–í–ï–°–¢–ò–ö', icon: 'üé≠', count: 5, probability: 0.75 },
    { id: 'frodCourse', name: '–ö–£–†–°–ò–ö', icon: 'üìñ', count: 1, probability: 0.0005 }
  ]
};

function spinRoulette(isFree = false) {
  const items = $("#rouletteItems");
  const spinBtn = $("#spinRoulette");
  const buyBtn = $("#buySpin");
  
  if (!items || !spinBtn) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–∞ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
  if (isFree && !canSpinFree() && !isAdmin()) {
    toast("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Ä—É—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å!", "error");
    return;
  }
  
  // –°–ø–∏—Å—ã–≤–∞–µ–º mulacoin —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Ä—É—Ç –∏ –Ω–µ –∞–¥–º–∏–Ω
  if (!isFree && !isAdmin() && userData.mulacoin < SPIN_COST) {
    toast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mulacoin –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏!", "error");
    return;
  }
  
  if (!isFree && !isAdmin()) {
    userData.mulacoin -= SPIN_COST;
    updateCurrencyDisplay();
  } else if (isFree && !isAdmin()) {
    userData.lastFreeSpin = new Date().toISOString();
    updateRouletteButton();
  } else if (isAdmin()) {
    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫—Ä—É—Ç—è—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    toast("üéØ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Ä—É—Ç", "success");
  }
  
  saveUserData();
  
  spinBtn.disabled = true;
  buyBtn.disabled = true;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏—è
  spinBtn.classList.add("spinning");
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è 15 —Å–µ–∫—É–Ω–¥)
  const baseDistance = 6000 + Math.random() * 4000; // 6000-10000px –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è 15 —Å–µ–∫—É–Ω–¥
  const extraDistance = Math.random() * 2000; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  let spinDistance = baseDistance + extraDistance;
  
  // –î–ª—è –¥–∏–∑–∞–π–Ω–∞ –õ–µ–±–µ–¥–µ–≤–∞ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –Ω–∞–ª–µ–≤–æ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
  if (currentRouletteDesign === 'author') {
    spinDistance = -spinDistance;
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏)
  const newPosition = rouletteCurrentPosition + spinDistance;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Å–∫–æ–ª—å–∂–µ–Ω–∏—è
  items.classList.add('spinning');
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é —Å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
  items.style.transform = `translateX(-${newPosition}px)`;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–∂–∏–¥–∞–Ω–∏—è
  setTimeout(() => {
    spinBtn.classList.remove("spinning");
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Ä—É–ª–µ—Ç–∫–∏
    rouletteCurrentPosition = newPosition;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏ (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç)
    const centerPrize = determinePrizeByArrowPosition();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–∏–∑–æ–º, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª–∫–∞
    showPrizeModal(centerPrize, isFree);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
    spinBtn.textContent = "üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É";
    spinBtn.disabled = false;
    buyBtn.disabled = false;
    updateRouletteButton();
    
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å spinning, –Ω–æ –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
    setTimeout(() => {
      items.classList.remove('spinning');
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏–Ω–∞
      items.style.transition = 'transform 8s ease-out';
    }, 1000);
  }, 8000);
}

function selectPrizeByProbability() {
  const rand = Math.random();
  let cumulative = 0;
  
  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∑–∞–π–Ω–∞
  const currentPrizes = ROULETTE_PRIZES_DESIGNS[currentRouletteDesign] || ROULETTE_PRIZES_DESIGNS.standard;
  
  for (const prize of currentPrizes) {
    cumulative += prize.probability;
    if (rand <= cumulative) {
      return prize;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π –ø—Ä–∏–∑
  return currentPrizes[4]; // quest24h
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏
function determinePrizeByArrowPosition() {
  console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏...');
  console.log('–¢–µ–∫—É—â–∏–π –¥–∏–∑–∞–π–Ω:', currentRouletteDesign);
  
  const items = $("#rouletteItems");
  if (!items) {
    const currentPrizes = ROULETTE_PRIZES_DESIGNS[currentRouletteDesign] || ROULETTE_PRIZES_DESIGNS.standard;
    return currentPrizes[0];
  }
  
  const allItems = items.querySelectorAll('.roulette-item');
  if (allItems.length === 0) {
    const currentPrizes = ROULETTE_PRIZES_DESIGNS[currentRouletteDesign] || ROULETTE_PRIZES_DESIGNS.standard;
    return currentPrizes[0];
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ç—Ä–µ–ª–∫–∏ (—Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞)
  const containerWidth = items.offsetWidth || 600;
  const centerX = containerWidth / 2;
  
  // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ
  let centerItem = null;
  let minDistance = Infinity;
  
  allItems.forEach((item, index) => {
    const itemRect = item.getBoundingClientRect();
    const itemCenterX = itemRect.left + itemRect.width / 2;
    const distance = Math.abs(itemCenterX - centerX);
    
    if (distance < minDistance) {
      minDistance = distance;
      centerItem = item;
    }
  });
  
  if (centerItem) {
    const prizeId = centerItem.dataset.prize;
    const currentPrizes = ROULETTE_PRIZES_DESIGNS[currentRouletteDesign] || ROULETTE_PRIZES_DESIGNS.standard;
    const prize = currentPrizes.find(p => p.id === prizeId);
    if (prize) {
      console.log('–ü—Ä–∏–∑ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏:', prize.name, 'ID:', prize.id, '–ü–æ–∑–∏—Ü–∏—è:', rouletteCurrentPosition);
      return prize;
    }
  }
  
  // Fallback –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
  console.log('Fallback –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑');
  return selectPrizeByProbability();
}

async function showPrizeModal(prize, isFree = false) {
  const modal = $("#prizeModal");
  const icon = $("#prizeIcon");
  const title = $("#prizeTitle");
  const description = $("#prizeDescription");
  const content = $("#prizeContent");
  
  icon.textContent = prize.icon;
  title.textContent = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!";
  description.textContent = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${prize.name}`;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä—É–ª–µ—Ç–∫–∏
  const isAdminSpin = isAdmin();
  await saveRouletteHistory(prize.id, prize.name, isFree || isAdminSpin, isFree || isAdminSpin ? 0 : SPIN_COST);
  
  let contentHTML = '';
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º mulacoin –ø—Ä–∏–∑—ã —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥
  if (prize.id.startsWith('mulacoin')) {
    const mulacoinAmount = parseInt(prize.id.replace('mulacoin', ''));
    const expAmount = Math.round(mulacoinAmount / 10); // 1 –æ–ø—ã—Ç –∑–∞ –∫–∞–∂–¥—ã–µ 10 mulacoin
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥
    await addRewards(mulacoinAmount, expAmount, 'roulette', prize.name, 'easy');
    
    contentHTML = `
      <p style="font-size: 16px; color: var(--accent); font-weight: bold;">
        +${mulacoinAmount} MULACOIN –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É!
      </p>
      <p style="font-size: 14px; color: var(--text-muted);">
        +${expAmount} –æ–ø—ã—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ!
      </p>
      <p style="font-size: 14px; color: var(--text-muted);">
        –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${userData.mulacoin} MULACOIN
      </p>
    `;
  } else if (prize.id === 'subscription' || prize.id.startsWith('discount')) {
    const promoCode = generatePromoCode(prize);
    
    // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—ã—Ç –∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ã
    const expAmount = prize.id === 'subscription' ? 50 : 25;
    await addRewards(0, expAmount, 'roulette', prize.name, 'easy');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await savePromocode(prize, promoCode);
    
    contentHTML = `
      <div class="promo-code" id="promoCode" onclick="copyPromoCode()">${promoCode}</div>
      <p style="font-size: 14px; color: var(--text-muted); margin: 8px 0;">
        –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
      </p>
      <p style="font-size: 14px; color: var(--text-muted);">
        +${expAmount} –æ–ø—ã—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ!
      </p>
      <a href="https://t.me/acqu1red?text=${encodeURIComponent(getPromoMessage(prize, promoCode))}" 
         class="use-button" id="useButton" style="display: none;">
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      </a>
    `;
  } else if (prize.id === 'quest24h') {
    // –î–∞–µ–º –æ–ø—ã—Ç –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç
    await addRewards(0, 30, 'roulette', prize.name, 'easy');
    
    contentHTML = `
      <p style="font-size: 14px; color: var(--text-muted);">
        –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç –Ω–∞ 24 —á–∞—Å–∞!
      </p>
      <p style="font-size: 14px; color: var(--text-muted);">
        +30 –æ–ø—ã—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ!
      </p>
    `;
    activateQuest24h();
  } else if (prize.id === 'frodCourse') {
    const promoCode = generatePromoCode(prize);
    
    // –î–∞–µ–º –æ–ø—ã—Ç –∑–∞ –∫—É—Ä—Å —Ñ—Ä–æ–¥–∞
    await addRewards(0, 100, 'roulette', prize.name, 'easy');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await savePromocode(prize, promoCode);
    
    contentHTML = `
      <div class="promo-code" id="promoCode" onclick="copyPromoCode()">${promoCode}</div>
      <p style="font-size: 14px; color: var(--text-muted); margin: 8px 0;">
        –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
      </p>
      <p style="font-size: 14px; color: var(--text-muted);">
        +100 –æ–ø—ã—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ!
      </p>
      <a href="https://t.me/acqu1red?text=${encodeURIComponent(getPromoMessage(prize, promoCode))}" 
         class="use-button" id="useButton" style="display: none;">
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      </a>
    `;
  }
  
  content.innerHTML = contentHTML;
  modal.classList.add('show');
}

function generatePromoCode(prize) {
  const prefix = prize.id === 'subscription' ? 'SUB' : 
                prize.id === 'frodCourse' ? 'FROD' : 'DIS';
  const rand = Math.random().toString(36).slice(2, 8).toUpperCase();
  return `${prefix}-${rand}`;
}

function getPromoMessage(prize, code) {
  const messages = {
    subscription: `üéâ –í—ã–∏–≥—Ä–∞–ª 1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏!\n\n–ü—Ä–æ–º–æ–∫–æ–¥: ${code}\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π.`,
    discount500: `üéâ –í—ã–∏–≥—Ä–∞–ª —Å–∫–∏–¥–∫—É 500 —Ä—É–±–ª–µ–π!\n\n–ü—Ä–æ–º–æ–∫–æ–¥: ${code}\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç 7 –¥–Ω–µ–π.`,
    discount100: `üéâ –í—ã–∏–≥—Ä–∞–ª —Å–∫–∏–¥–∫—É 100 —Ä—É–±–ª–µ–π!\n\n–ü—Ä–æ–º–æ–∫–æ–¥: ${code}\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç 7 –¥–Ω–µ–π.`,
    discount50: `üéâ –í—ã–∏–≥—Ä–∞–ª —Å–∫–∏–¥–∫—É 50 —Ä—É–±–ª–µ–π!\n\n–ü—Ä–æ–º–æ–∫–æ–¥: ${code}\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç 7 –¥–Ω–µ–π.`,
    frodCourse: `üéâ –í—ã–∏–≥—Ä–∞–ª –ü–û–õ–ù–´–ô –ö–£–†–° –ü–û –§–†–û–î–£!\n\n–ü—Ä–æ–º–æ–∫–æ–¥: ${code}\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç 60 –¥–Ω–µ–π.`
  };
  return messages[prize.id] || `–ü—Ä–æ–º–æ–∫–æ–¥: ${code}`;
}

function copyPromoCode() {
  const promoCode = $("#promoCode");
  if (!promoCode) return;
  
  const text = promoCode.textContent;
  navigator.clipboard.writeText(text).then(() => {
    promoCode.classList.add('copied');
    promoCode.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
    
    setTimeout(() => {
      promoCode.style.display = 'none';
      const useButton = $("#useButton");
      if (useButton) {
        useButton.style.display = 'inline-block';
        useButton.style.animation = 'fadeIn 0.5s ease';
      }
    }, 1000);
    
    toast('–ü—Ä–æ–º–æ–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ò—Å—Ç–æ—Ä–∏–∏.', 'success');
  });
}

function activateQuest24h() {
  // –õ–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
  toast('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 24 —á–∞—Å–∞!', 'success');
}

async function saveUserData() {
  console.log('=== –°–¢–ê–†–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===');
  console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
  console.log('Supabase –¥–æ—Å—Ç—É–ø–µ–Ω:', !!supabase);
  console.log('Telegram ID:', userData.telegramId);
  console.log('Mulacoin –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', userData.mulacoin);
  console.log('Experience –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', userData.exp);
  console.log('Level –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', userData.level);
  
  // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ fallback
  const dataToSave = {
    mulacoin: userData.mulacoin || 0,
    exp: userData.exp || 0,
    level: userData.level || 1,
    lastFreeSpin: userData.lastFreeSpin,
    telegramId: userData.telegramId
  };
  
  localStorage.setItem('userData', JSON.stringify(dataToSave));
  console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', dataToSave);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
  if (supabase && userData.telegramId) {
    try {
      const userDataToSave = {
        telegram_id: userData.telegramId,
        mulacoin: userData.mulacoin || 0,
        experience: userData.exp || 0,
        level: userData.level || 1,
        last_free_spin: userData.lastFreeSpin,
        updated_at: new Date().toISOString()
      };
      
      console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', userDataToSave);
      
      const { data, error } = await supabase
        .from('bot_user')
        .upsert(userDataToSave)
        .select();
      
      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error);
        toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É', 'error');
      } else {
        console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase:', data);
        toast('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É', 'success');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
      toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
  } else {
    console.log('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID');
    if (!supabase) console.log('–ü—Ä–∏—á–∏–Ω–∞: Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    if (!userData.telegramId) console.log('–ü—Ä–∏—á–∏–Ω–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID');
  }
}

async function loadUserData(userId) {
  console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
  console.log('Supabase –¥–æ—Å—Ç—É–ø–µ–Ω:', !!supabase);
  console.log('Telegram ID:', userData.telegramId);
  
  userData.userId = userId;
  
  // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage –∫–∞–∫ fallback
  const saved = localStorage.getItem('userData');
  if (saved) {
    try {
      const parsed = JSON.parse(saved);
      userData.mulacoin = parsed.mulacoin || 0;
      userData.exp = parsed.exp || 0;
      userData.level = parsed.level || 1;
      userData.lastFreeSpin = parsed.lastFreeSpin;
      console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', parsed);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ localStorage:', error);
    }
  }
  
  // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Supabase
  if (supabase && userData.telegramId) {
    try {
      console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Supabase –¥–ª—è Telegram ID:', userData.telegramId);
      
      const { data, error } = await supabase
        .from('bot_user')
        .select('*')
        .eq('telegram_id', userData.telegramId)
        .single();
      
      if (data && !error) {
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Supabase:', data);
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase (–æ–Ω–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        userData.mulacoin = data.mulacoin || userData.mulacoin || 0;
        userData.exp = data.experience || userData.exp || 0;
        userData.level = data.level || userData.level || 1;
        userData.lastFreeSpin = data.last_free_spin || userData.lastFreeSpin;
        toast('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'success');
      } else {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Supabase:', error);
      toast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
  } else {
    console.log('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage');
    if (!supabase) console.log('–ü—Ä–∏—á–∏–Ω–∞: Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    if (!userData.telegramId) console.log('–ü—Ä–∏—á–∏–Ω–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID');
    
    // Fallback –Ω–∞ localStorage
    const saved = localStorage.getItem(`userData_${userId}`);
    if (saved) {
      const parsed = JSON.parse(saved);
      userData = { ...userData, ...parsed };
      console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', parsed);
    }
  }
  
  console.log('–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
  updateCurrencyDisplay();
  updateRouletteButton();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞
async function saveQuestHistory(questId, questName, difficulty, mulacoinEarned, experienceEarned) {
  console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞:', { questId, questName, difficulty, mulacoinEarned, experienceEarned });
  console.log('Supabase –¥–æ—Å—Ç—É–ø–µ–Ω:', !!supabase);
  console.log('Telegram ID:', userData.telegramId);
  
  if (supabase && userData.telegramId) {
    try {
      const questData = {
        user_id: userData.telegramId,
        quest_id: questId,
        quest_name: questName,
        difficulty: difficulty,
        mulacoin_earned: mulacoinEarned,
        experience_earned: experienceEarned
        // completed_at –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ now() –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      };
      
      console.log('–î–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', questData);
      
      const { data, error } = await supabase
        .from('quest_history')
        .insert(questData)
        .select();
      
      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞:', error);
        toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞', 'error');
      } else {
        console.log('–ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase:', data);
        toast('–ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞:', error);
      toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞', 'error');
    }
  } else {
    console.error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞');
    if (!supabase) console.log('–ü—Ä–∏—á–∏–Ω–∞: Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    if (!userData.telegramId) console.log('–ü—Ä–∏—á–∏–Ω–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä—É–ª–µ—Ç–∫–∏
async function saveRouletteHistory(prizeType, prizeName, isFree, mulacoinSpent, promoCodeId = null) {
  const isAdminSpin = isAdmin();
  console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä—É–ª–µ—Ç–∫–∏:', { prizeType, prizeName, isFree, mulacoinSpent, promoCodeId, isAdminSpin });
  
  if (supabase && userData.telegramId) {
    try {
      const rouletteData = {
        user_id: userData.telegramId,
        prize_type: prizeType,
        prize_name: isAdminSpin ? `${prizeName} (–ê–¥–º–∏–Ω)` : prizeName,
        is_free: isFree,
        mulacoin_spent: mulacoinSpent,
        promo_code_id: promoCodeId
        // won_at –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ now() –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      };
      
      console.log('–î–∞–Ω–Ω—ã–µ —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', rouletteData);
      
      const { data, error } = await supabase
        .from('roulette_history')
        .insert(rouletteData)
        .select();
      
      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä—É–ª–µ—Ç–∫–∏:', error);
        toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä—É–ª–µ—Ç–∫–∏', 'error');
      } else {
        console.log('–ò—Å—Ç–æ—Ä–∏—è —Ä—É–ª–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase:', data);
        toast('–ò—Å—Ç–æ—Ä–∏—è —Ä—É–ª–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä—É–ª–µ—Ç–∫–∏:', error);
      toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏', 'error');
    }
  } else {
    console.error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä—É–ª–µ—Ç–∫–∏');
    if (!supabase) console.log('–ü—Ä–∏—á–∏–Ω–∞: Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    if (!userData.telegramId) console.log('–ü—Ä–∏—á–∏–Ω–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function savePromocode(prize, promoCode) {
  console.log('=== –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–û–ú–û–ö–û–î–ê ===');
  console.log('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', { prize, promoCode, telegramId: userData.telegramId });
  
  if (!supabase) {
    console.error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    toast('–û—à–∏–±–∫–∞: Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'error');
    return;
  }
  
  if (!userData.telegramId) {
    console.error('Telegram ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    toast('–û—à–∏–±–∫–∞: Telegram ID –Ω–µ –ø–æ–ª—É—á–µ–Ω', 'error');
    return;
  }
  
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞
    let promoType = 'discount';
    let promoValue = 0;
    
    if (prize.id === 'subscription') {
      promoType = 'subscription';
      promoValue = 30; // 30 –¥–Ω–µ–π
    } else if (prize.id === 'frodCourse') {
      promoType = 'frod_course';
      promoValue = 60; // 60 –¥–Ω–µ–π
    } else if (prize.id === 'discount500') {
      promoValue = 500;
    } else if (prize.id === 'discount100') {
      promoValue = 100;
    } else if (prize.id === 'discount50') {
      promoValue = 50;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + (prize.id === 'subscription' ? 30 : 7));
    
    const promoData = {
      code: promoCode,
      type: promoType,
      value: promoValue,
      issued_to: userData.telegramId,
      expires_at: expiresAt.toISOString()
      // status –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ 'issued' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      // issued_at –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ now() –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    };
    
    console.log('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', promoData);
    console.log('Telegram ID –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:', userData.telegramId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü—É promocodes
    const { data, error } = await supabase
      .from('promocodes')
      .insert(promoData)
      .select();
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ promocodes:', error);
      toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', 'error');
      return;
    }
    
    console.log('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ promocodes:', data);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä—É–ª–µ—Ç–∫–∏
    await saveRouletteHistory(prize.id, prize.name, false, SPIN_COST, promoCode);
    
    toast('‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏!', 'success');
    console.log('=== –ü–†–û–ú–û–ö–û–î –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù ===');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
  }
}

function dayIndex(){ return Math.floor(Date.now() / (24*60*60*1000)); }
function variationIndex(){ return dayIndex() % VARIATIONS_PER_QUEST; }
function groupIndex(){ return dayIndex() % 2; } // 2 –≥—Ä—É–ø–ø—ã –ø–æ 5 –∫–≤–µ—Å—Ç–æ–≤

/* ====== Parallax particles ====== */
function fireflies(){
  const canvas = $("#fireflies");
  if(!canvas) return;
  const ctx = canvas.getContext("2d");
  let W,H; 
  function resize(){ 
    W=canvas.width=canvas.clientWidth; 
    H=canvas.height=canvas.clientHeight; 
  } 
  resize();
  window.addEventListener("resize", resize);
  
  const N = 32;
  const parts = Array.from({length:N},()=>({
    x:Math.random()*W,
    y:Math.random()*H, 
    vx:(Math.random()-.5)*.4, 
    vy:(Math.random()-.5)*.4, 
    r:1.5+Math.random()*3, 
    a:.6+Math.random()*.4 
  }));
  
  function step(){
    ctx.clearRect(0,0,W,H);
    parts.forEach(p=>{
      p.x+=p.vx; p.y+=p.vy;
      if(p.x<0||p.x>W) p.vx*=-1;
      if(p.y<0||p.y>H) p.vy*=-1;
      ctx.beginPath();
      const g = ctx.createRadialGradient(p.x,p.y,0,p.x,p.y,p.r*10);
      g.addColorStop(0, `rgba(102,247,213,${0.9*p.a})`);
      g.addColorStop(1, `rgba(102,247,213,0)`);
      ctx.fillStyle=g;
      ctx.arc(p.x,p.y,p.r*4,0,Math.PI*2);
      ctx.fill();
    });
    requestAnimationFrame(step);
  }
  step();
}
fireflies();

/* ====== Quests model (10 –∫–≤–µ—Å—Ç–æ–≤) ====== */
const QUESTS = [
    { 
     id: "psychology", 
     theme: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", 
     style: "neo", 
     name: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞", 
     intro: "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤.", 
     description: "–í–µ–¥–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–∏–º–µ–Ω—è–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –¥–µ–Ω—å–≥–∏ —á–µ—Ä–µ–∑ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏.",
     type: "interactive", 
     difficulty: "medium",
     rewards: { fragments: 3, experience: 500 },
     available: true,
     url: "quests/psychology.html"
   },
  { 
    id: "cyber", 
    theme: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", 
    style: "synthwave", 
    name: "–ö–∏–±–µ—Ä‚Äë–≤–∑–ª–æ–º", 
    intro: "–ü–æ–¥–±–µ—Ä–∏ –ø–∞—Ç—Ç–µ—Ä–Ω, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —à–ª—é–∑.", 
    description: "–í–∑–ª–æ–º–∞–π –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –ø–æ–¥–±–∏—Ä–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.",
    type: "minigame", 
    difficulty: "medium",
    rewards: { fragments: 3, experience: 75 },
    available: true,
    url: "quests/cyber.html"
  },
  { 
    id: "bodylang", 
    theme: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", 
    style: "neo", 
    name: "–Ø–∑—ã–∫ —Ç–µ–ª–∞", 
    intro: "–†–∞—Å–ø–æ–∑–Ω–∞–π –Ω–µ–≤–µ—Ä–±–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã 2D‚Äë–ø–µ—Ä—Å–æ–Ω–∞–∂–∞.", 
    description: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞ –∏ –∂–µ—Å—Ç—ã, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.",
    type: "analysis", 
    difficulty: "medium",
    rewards: { fragments: 2, experience: 60 },
    available: true,
    url: "quests/bodylang.html"
  },
  { 
    id: "profiling", 
    theme: "–°–æ—Ü—Å–µ—Ç–∏", 
    style: "neo", 
    name: "–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞", 
    intro: "–û—Ü–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—ã–±–µ—Ä–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.", 
    description: "–ò–∑—É—á–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    type: "analysis", 
    difficulty: "hard",
    rewards: { fragments: 4, experience: 100 },
    available: false,
    url: "quests/profiling.html"
  },
  { 
    id: "roi", 
    theme: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", 
    style: "neo", 
    name: "ROI‚Äë–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", 
    intro: "–í—ã–±–µ—Ä–∏ –∫–∞–º–ø–∞–Ω–∏—é —Å –ª—É—á—à–µ–π –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å—é.", 
    description: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–±—ã–ª—å–Ω—É—é.",
    type: "puzzle", 
    difficulty: "medium",
    rewards: { fragments: 3, experience: 80 },
    available: false,
    url: "quests/roi.html"
  },
  { 
    id: "funnel", 
    theme: "–ü—Ä–æ–¥–∞–∂–∏", 
    style: "neo", 
    name: "–í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π", 
    intro: "–ù–∞–π–¥–∏ —Å–∞–º–æ–µ —É–∑–∫–æ–µ –º–µ—Å—Ç–æ.", 
    description: "–ò—Å—Å–ª–µ–¥—É–π –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.",
    type: "puzzle", 
    difficulty: "easy",
    rewards: { fragments: 2, experience: 45 },
    available: false,
    url: "quests/funnel.html"
  },
  { 
    id: "copy", 
    theme: "–ö–æ–Ω—Ç–µ–Ω—Ç", 
    style: "neo", 
    name: "A/B –∑–∞–≥–æ–ª–æ–≤–∫–∏", 
    intro: "–í—ã–±–µ—Ä–∏ –≤—ã–∏–≥—Ä–∞–≤—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º.", 
    description: "–°—Ä–∞–≤–Ω–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ A/B —Ç–µ—Å—Ç–µ.",
    type: "quiz", 
    difficulty: "easy",
    rewards: { fragments: 2, experience: 40 },
    available: false,
    url: "quests/copy.html"
  },
  { 
    id: "audience", 
    theme: "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è", 
    style: "neo", 
    name: "–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏", 
    intro: "–ò–∑—É—á–∏ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.", 
    description: "–ò–∑—É—á–∏ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ.",
    type: "analysis", 
    difficulty: "medium",
    rewards: { fragments: 3, experience: 70 },
    available: false,
    url: "quests/audience.html"
  },
  { 
    id: "competitors", 
    theme: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", 
    style: "neo", 
    name: "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", 
    intro: "–ò–∑—É—á–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å—Ä–µ–¥—É.", 
    description: "–ò–∑—É—á–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å—Ä–µ–¥—É –∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –≤ –æ—Ç—Ä–∞—Å–ª–∏.",
    type: "analysis", 
    difficulty: "hard",
    rewards: { fragments: 5, experience: 120 },
    available: false,
    url: "quests/competitors.html"
  },
  { 
    id: "trends", 
    theme: "–†—ã–Ω–æ–∫", 
    style: "neo", 
    name: "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤", 
    intro: "–ò–∑—É—á–∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã.", 
    description: "–ò–∑—É—á–∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.",
    type: "analysis", 
    difficulty: "hard",
    rewards: { fragments: 4, experience: 90 },
    available: false,
    url: "quests/trends.html"
  }
];

/* ====== Subscription + Admin check ====== */
async function loadState(){
  let userId = null;
  let username = null;
  
  try{ 
    if (tg && tg.initDataUnsafe && tg.initDataUnsafe.user) {
      userId = String(tg.initDataUnsafe.user.id);
      username = tg.initDataUnsafe.user.username;
    }
  } catch(e) { console.warn("TG user data fail", e); }
  
  let isSubscribed = false;
  let isAdmin = false;
  
  console.log('=== –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê ===');
  console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, username });
  console.log('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:', ADMIN_IDS);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ username –∏ telegramId)
  if ((username && ADMIN_IDS.includes(username)) || (userId && ADMIN_IDS.includes(userId))) {
    isAdmin = true;
    isSubscribed = true; // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–≤–µ—Å—Ç–∞–º
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!');
  } else {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Supabase
  if(supabase && userId){
    try{
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É admins
      console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É admins...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã admins
      const { data: adminsStructure, error: adminsStructureError } = await supabase
        .from('admins')
        .select("*")
        .limit(1);
      
      if (!adminsStructureError && adminsStructure && adminsStructure.length > 0) {
        const adminsColumns = Object.keys(adminsStructure[0]);
        console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã admins:', adminsColumns);
        
        // –ò—â–µ–º –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const possibleIdFields = ['telegram_id', 'user_id', 'tg_id', 'id', 'userid', 'telegramid'];
        let foundAdminField = null;
        
        for (const field of possibleIdFields) {
          if (adminsColumns.includes(field)) {
            foundAdminField = field;
            break;
          }
        }
        
        if (foundAdminField) {
          console.log('üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è ID –≤ admins:', foundAdminField);
          
          const { data: adminsData, error: adminsError } = await supabase
            .from('admins')
            .select("*")
            .eq(foundAdminField, userId)
            .maybeSingle();
          
          if(!adminsError && adminsData) {
            isAdmin = true;
            isSubscribed = true;
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ admins:', adminsData);
          } else {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ admins:', adminsError);
          }
        } else {
          console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø–æ–ª–µ –¥–ª—è ID –≤ —Ç–∞–±–ª–∏—Ü–µ admins');
        }
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã admins:', adminsStructureError);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É subscriptions
      console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É subscriptions...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã subscriptions
      const { data: subStructure, error: subStructureError } = await supabase
        .from(SUBSCRIPTIONS_TABLE)
        .select("*")
        .limit(1);
      
      if (!subStructureError && subStructure && subStructure.length > 0) {
        const subColumns = Object.keys(subStructure[0]);
        console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã subscriptions:', subColumns);
        
        // –ò—â–µ–º –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const possibleIdFields = ['telegram_id', 'user_id', 'tg_id', 'id', 'userid', 'telegramid'];
        let foundSubField = null;
        
        for (const field of possibleIdFields) {
          if (subColumns.includes(field)) {
            foundSubField = field;
            break;
          }
        }
        
        if (foundSubField) {
          console.log('üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è ID –≤ subscriptions:', foundSubField);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
          const { data: subData, error: subError } = await supabase
            .from(SUBSCRIPTIONS_TABLE)
            .select("*")
            .eq(foundSubField, userId)
            .eq('status', 'active')
            .maybeSingle();
          
          if(!subError && subData) {
            isSubscribed = true;
            console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ subscriptions:', subData);
          } else {
            console.log('‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ subscriptions:', subError);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É (–Ω–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—É—é)
            const { data: anySubData, error: anySubError } = await supabase
              .from(SUBSCRIPTIONS_TABLE)
              .select("*")
              .eq(foundSubField, userId)
              .maybeSingle();
            
            if(!anySubError && anySubData) {
              console.log('‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:', anySubData);
            } else {
              console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ subscriptions:', anySubError);
            }
          }
        } else {
          console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø–æ–ª–µ –¥–ª—è ID –≤ —Ç–∞–±–ª–∏—Ü–µ subscriptions');
        }
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã subscriptions:', subStructureError);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü...');
      const { data: tableInfo, error: tableError } = await supabase
        .from(SUBSCRIPTIONS_TABLE)
        .select("*")
        .limit(1);
      
      if(!tableError && tableInfo && tableInfo.length > 0) {
        console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã subscriptions:', Object.keys(tableInfo[0]));
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ admins –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const { data: allAdmins, error: adminsTableError } = await supabase
        .from('admins')
        .select("*")
        .limit(5);
      
      if(!adminsTableError && allAdmins) {
        console.log('üìä –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ admins:', allAdmins);
      }
      
    } catch(e){ 
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Supabase:", e); 
    }
  } else {
    console.log('‚ùå Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  }
  
  console.log('üìä –ò–¢–û–ì–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:', { userId, username, isSubscribed, isAdmin });
  console.log('=== –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê ===');
  
  return { userId, username, isSubscribed, isAdmin };
}

/* ====== Rotation + gating ====== */
function featuredQuests(state){
  console.log('=== FEATURED QUESTS ===');
  console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', state);
  console.log('–í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:', QUESTS.length);
  console.log('–ö–≤–µ—Å—Ç—ã:', QUESTS.map(q => ({ id: q.id, name: q.name, available: q.available })));
  
  if(state.isSubscribed || state.isAdmin) {
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∞–¥–º–∏–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï –∫–≤–µ—Å—Ç—ã');
    console.log('üìä –°—Ç–∞—Ç—É—Å:', { isSubscribed: state.isSubscribed, isAdmin: state.isAdmin });
    return QUESTS;
  }
  
  // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
  const availableQuests = QUESTS.filter(q => q.available);
  console.log('‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤:', availableQuests.length);
  console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:', availableQuests.map(q => q.name));
  console.log('üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:', QUESTS.filter(q => !q.available).map(q => q.name));
  return availableQuests;
}

/* ====== Cards ====== */
function buildCards(state){
  const container = $("#quests");
  container.innerHTML = "";
  
  console.log('=== BUILD CARDS ===');
  console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', state);
  console.log('–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞:', { isSubscribed: state.isSubscribed, isAdmin: state.isAdmin });
  
  const list = featuredQuests(state);
  console.log('üìä –ö–≤–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', list.length);
  console.log('üìã –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤:', list.map(q => q.name));
  
  list.forEach((q, index) => {
    const card = document.createElement("div");
    card.className = "card fade-in";
    card.style.animationDelay = `${index * 0.1}s`;
    
    card.innerHTML = `
      ${state.isAdmin ? '<div class="premium-indicator">üëë</div>' : ''}
      <div class="label">${q.theme}</div>
      <h3>${q.name}</h3>
      <div class="description">${q.description}</div>
      <div class="meta">
        <div class="tag ${q.difficulty}">${getDifficultyText(q.difficulty)}</div>
      <div class="tag">–í–∞—Ä–∏–∞—Ü–∏—è #${variationIndex()+1}/10</div>
      </div>
      <div class="cta">
        <button class="btn primary start">–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç</button>
        <button class="btn ghost details">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
      </div>
    `;
    
    card.querySelector(".start").addEventListener("click", ()=>startQuest(q, state));
    card.querySelector(".details").addEventListener("click", ()=>{
      showQuestDetails(q, state);
    });
    
    container.appendChild(card);
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if(!state.isSubscribed && !state.isAdmin){
    const others = QUESTS.filter(q => !q.available);
    others.forEach((q, index) => {
      const card = document.createElement("div");
      card.className = "card locked fade-in";
      card.style.animationDelay = `${(list.length + index) * 0.1}s`;
      
      card.innerHTML = `
        <div class="lock">üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
        <div class="label">${q.theme}</div>
        <h3>${q.name}</h3>
        <div class="description">${q.description}</div>
        <div class="tag ${q.difficulty}">${getDifficultyText(q.difficulty)}</div>
        <div class="cta">
          <button class="btn ghost locked-access-btn">–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</button>
        </div>
      `;
      
      container.appendChild(card);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
    document.querySelectorAll('.locked-access-btn').forEach(btn => {
      btn.addEventListener('click', showSubscriptionPrompt);
    });
  }
}

function getDifficultyText(difficulty) {
  const texts = {
    easy: "–õ–µ–≥–∫–∏–π",
    medium: "–°—Ä–µ–¥–Ω–∏–π", 
    hard: "–°–ª–æ–∂–Ω—ã–π"
  };
  return texts[difficulty] || difficulty;
}

function showQuestDetails(q, state) {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  modalBody.innerHTML = `
    <div class="questIntro">
      <h3>${q.name}</h3>
      <p>${q.intro}</p>
    </div>
    <div class="questBody">
      <div class="banner">
        <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${q.description}
      </div>
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px;">
        <div class="glass" style="padding: 12px; text-align: center;">
          <div style="font-size: 12px; color: var(--text-muted);">–°–ª–æ–∂–Ω–æ—Å—Ç—å</div>
          <div style="font-weight: 600; color: var(--glow1);">${getDifficultyText(q.difficulty)}</div>
        </div>
        <div class="glass" style="padding: 12px; text-align: center;">
          <div style="font-size: 12px; color: var(--text-muted);">–§—Ä–∞–≥–º–µ–Ω—Ç—ã</div>
          <div style="font-weight: 600; color: var(--accent);">+${q.rewards.fragments}</div>
        </div>
        <div class="glass" style="padding: 12px; text-align: center;">
          <div style="font-size: 12px; color: var(--text-muted);">–û–ø—ã—Ç</div>
          <div style="font-weight: 600; color: var(--glow2);">+${q.rewards.experience}</div>
        </div>
      </div>
      ${!state.isSubscribed && !state.isAdmin ? `
        <div class="banner warning">
          <strong>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–≤–µ—Å—Ç–∞–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!
        </div>
      ` : ''}
    </div>
    <div class="questActions">
      <button class="btn primary" id="startQuestBtn">–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç</button>
      <button class="btn ghost" id="closeModalBtn">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;
  
  modal.classList.add("show");
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
  const startQuestBtn = modal.querySelector("#startQuestBtn");
  const closeModalBtn = modal.querySelector("#closeModalBtn");
  
  if (startQuestBtn) {
    startQuestBtn.addEventListener("click", () => startQuest(q, state));
  }
  
  if (closeModalBtn) {
    closeModalBtn.addEventListener("click", closeModal);
  }
}

function showSubscriptionPrompt() {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  modalBody.innerHTML = `
    <div class="questIntro">
      <h3>üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h3>
      <p>–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</p>
      </div>
    <div class="questBody">
      <div class="banner success">
        <strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</strong>
        <ul style="margin: 8px 0; padding-left: 20px;">
          <li>–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º 10 –∫–≤–µ—Å—Ç–∞–º</li>
          <li>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</li>
          <li>–ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</li>
          <li>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</li>
        </ul>
      </div>
    </div>
    <div class="questActions">
      <button class="btn primary" id="openSubscriptionBtn">–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</button>
      <button class="btn ghost" id="closeSubscriptionBtn">–ü–æ–∑–∂–µ</button>
    </div>
  `;
  
  modal.classList.add("show");
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
  const openSubscriptionBtn = modal.querySelector("#openSubscriptionBtn");
  const closeSubscriptionBtn = modal.querySelector("#closeSubscriptionBtn");
  
  if (openSubscriptionBtn) {
    openSubscriptionBtn.addEventListener("click", openSubscription);
  }
  
  if (closeSubscriptionBtn) {
    closeSubscriptionBtn.addEventListener("click", closeModal);
  }
}

function openSubscription() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.location.href –≤–º–µ—Å—Ç–æ tg.openLink –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ Mini App
  window.location.href = PAYMENT_URL;
  closeModal();
}

/* ====== Start quest ====== */
function startQuest(q, state) {
  const questId = typeof q === 'string' ? q : q.id;
  const quest = QUESTS.find(q => q.id === questId);
  
  console.log('startQuest –≤—ã–∑–≤–∞–Ω–∞:', { questId, quest, state });
  
  if (!quest) {
    toast("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "error");
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–≤–µ—Å—Ç—É
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:', { 
    isSubscribed: state.isSubscribed, 
    isAdmin: state.isAdmin, 
    questAvailable: quest.available 
  });
  
  if (!state.isSubscribed && !state.isAdmin && !quest.available) {
    console.log('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–¥–ø–∏—Å–∫–∏');
    showSubscriptionPrompt();
    return;
  }
  
  console.log('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–≤–µ—Å—Ç');
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–≤–µ—Å—Ç –≤–Ω—É—Ç—Ä–∏ Mini App
  const questUrl = `./quests/${questId}.html`;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.location.href –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ Mini App
  // tg.openLink –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –∞ –Ω–∞–º –Ω—É–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ Mini App
  window.location.href = questUrl;
}

/* ====== Modal functions ====== */
function closeModal() {
  const modal = $("#modal");
  modal.classList.remove("show");
}

$("#modalClose").addEventListener("click", closeModal);

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
$("#modal").addEventListener("click", (e) => {
  if (e.target.id === "modal") {
    closeModal();
  }
});

/* ====== Promo system ====== */
function recordDayVisit(){
  const key="qh_days";
  const d = String(dayIndex());
  let set=new Set((localStorage.getItem(key)||"").split(",").filter(Boolean));
  set.add(d);
  localStorage.setItem(key, Array.from(set).join(","));
  return set.size;
}

async function maybeOfferPromo(state){
  if(state.isSubscribed || state.isAdmin) return;
  const days = recordDayVisit();
  if(days>=10){
    const claim = document.createElement("div");
    claim.className="glass success-animation";
    claim.style.margin="16px";
    claim.style.padding="20px";
    claim.innerHTML = `
      <div style="text-align: center;">
        <div style="font-size: 24px; margin-bottom: 8px;">üéâ</div>
        <h3 style="margin-bottom: 8px;">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
        <p>–¢—ã –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –∫–≤–µ—Å—Ç—ã –∑–∞ 10 –¥–Ω–µ–π. –ó–∞–±–µ—Ä–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ -50% (–¥–µ–π—Å—Ç–≤—É–µ—Ç 60 –¥–Ω–µ–π).</p>
      </div>
    `;
    const btn = document.createElement("button"); 
    btn.className="btn primary"; 
    btn.textContent="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥";
    btn.style.marginTop = "12px";
    btn.onclick = async ()=>{
      const code = genCode(state.userId);
      await savePromo(code, state.userId);
      const box = document.createElement("div"); 
      box.className="banner success";
      box.innerHTML = `
        <strong>–ü—Ä–æ–º–æ–∫–æ–¥: ${code}</strong><br>
        –î–µ–π—Å—Ç–≤—É–µ—Ç 60 –¥–Ω–µ–π. –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É 
        <a href="https://t.me/${ADMIN_USERNAME}" target="_blank" style="color: var(--accent);">@${ADMIN_USERNAME}</a>
      `;
      claim.appendChild(box);
    };
    claim.appendChild(btn);
    $(".app").insertAdjacentElement("afterbegin", claim);
  }
}

function genCode(uid){
  const rand = Math.random().toString(36).slice(2,8).toUpperCase();
  return ("QH-"+(uid||"GUEST").slice(-4)+"-"+rand).replace(/[^A-Z0-9\-]/g,"");
}

async function savePromo(code, uid){
  if(!supabase){ 
    toast("–ü—Ä–æ–º–æ–∫–æ–¥: "+code, "success"); 
    return true; 
  }
  const expires = new Date(Date.now()+60*24*60*60*1000).toISOString();
  const { data, error } = await supabase.from(PROMOCODES_TABLE).insert({ 
    code, 
    tg_id: uid, 
    status:"unused", 
    issued_at: new Date().toISOString(), 
    expires_at: expires 
  });
  if(error){ 
    console.warn(error); 
    toast("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ –∫–æ–¥: "+code, "warning"); 
    return false; 
  }
  toast("–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", "success");
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
function isAdmin() {
  if (!userData.telegramId) return false;
  
  const userId = userData.telegramId.toString();
  const username = userData.username || '';
  
  const isAdminUser = ADMIN_IDS.includes(userId) || ADMIN_IDS.includes(username);
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞:', { userId, username, isAdminUser, ADMIN_IDS });
  
  return isAdminUser;
}

function canSpinFree() {
  if (isAdmin()) return true; // –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∫—Ä—É—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤—Å–µ–≥–¥–∞
  if (!userData.lastFreeSpin) return true;
  const now = new Date();
  const lastSpin = new Date(userData.lastFreeSpin);
  const diffTime = now - lastSpin;
  const diffDays = diffTime / (1000 * 60 * 60 * 24);
  return diffDays >= 1;
}

function updateRouletteButton() {
  const spinBtn = $("#spinRoulette");
  const buyBtn = $("#buySpin");
  
  if (!spinBtn || !buyBtn) return;
  
  if (isAdmin()) {
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    spinBtn.textContent = "üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É (‚àû)";
    spinBtn.disabled = false;
    spinBtn.classList.remove("disabled");
    spinBtn.title = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏";
  } else if (canSpinFree()) {
    spinBtn.textContent = "üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É";
    spinBtn.disabled = false;
    spinBtn.classList.remove("disabled");
  } else {
    spinBtn.textContent = "‚è∞ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω";
    spinBtn.disabled = true;
    spinBtn.classList.add("disabled");
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
  buyBtn.textContent = `–ö—Ä—É—Ç–∏—Ç—å –∑–∞ ${SPIN_COST} MULACOIN`;
}

/* ====== Header buttons ====== */
$("#btnSubscribe").addEventListener("click", ()=>{
  openSubscription();
});

$("#btnHistory").addEventListener("click", ()=>{ 
  showHistory();
});

// –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä—É–ª–µ—Ç–∫–∏
const originalSpinHandler = () => {
  if (canSpinFree()) {
    spinRoulette(true);
  } else if (userData.mulacoin >= SPIN_COST) {
    spinRoulette(false);
  } else {
    toast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mulacoin –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏!", "error");
  }
};

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä—É–ª–µ—Ç–∫–∏
function initializeRouletteHandlers() {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä—É–ª–µ—Ç–∫–∏...');
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä—É–ª–µ—Ç–∫–∏
  const spinBtn = $("#spinRoulette");
  const buyBtn = $("#buySpin");
  const closePrizeBtn = $("#closePrize");
  const previewHeader = $("#previewHeader");
  
  if (spinBtn) {
    spinBtn.addEventListener("click", originalSpinHandler);
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É" –¥–æ–±–∞–≤–ª–µ–Ω');
  } else {
    console.error('‚ùå –ö–Ω–æ–ø–∫–∞ "–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  if (buyBtn) {
    buyBtn.addEventListener("click", ()=>{
      if (userData.mulacoin >= SPIN_COST) {
        spinRoulette(false);
      } else {
        toast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mulacoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∞!", "error");
      }
    });
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Ä—É—Ç" –¥–æ–±–∞–≤–ª–µ–Ω');
  } else {
    console.error('‚ùå –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å –ø—Ä–æ–∫—Ä—É—Ç" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∞ –ø—Ä–∏–∑–∞
  if (closePrizeBtn) {
    closePrizeBtn.addEventListener("click", ()=>{
      $("#prizeModal").classList.remove("show");
    });
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∞ –ø—Ä–∏–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω');
  } else {
    console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∞ –ø—Ä–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–µ–≤—å—é –ø—Ä–∏–∑–æ–≤
  if (previewHeader) {
    previewHeader.addEventListener("click", ()=>{
      const content = $("#previewContent");
      const toggle = $("#previewHeader .preview-toggle");
      
      if (content.classList.contains("expanded")) {
        content.classList.remove("expanded");
        toggle.classList.remove("expanded");
      } else {
        content.classList.add("expanded");
        toggle.classList.add("expanded");
      }
    });
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–≤—å—é –ø—Ä–∏–∑–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω');
  } else {
    console.error('‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–≤—å—é –ø—Ä–∏–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–æ–≤
  document.querySelectorAll('.design-option').forEach(option => {
    option.addEventListener('click', () => {
      const design = option.dataset.design;
      switchRouletteDesign(design);
    });
  });
  
  console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä—É–ª–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞ —Ä—É–ª–µ—Ç–∫–∏
function switchRouletteDesign(design) {
  console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ —Ä—É–ª–µ—Ç–∫–∏ –Ω–∞:', design);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –æ–ø—Ü–∏—é
  document.querySelectorAll('.design-option').forEach(option => {
    option.classList.remove('active');
  });
  
  const activeOption = document.querySelector(`[data-design="${design}"]`);
  if (activeOption) {
    activeOption.classList.add('active');
  }
  
  // –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  const items = $("#rouletteItems");
  if (items) {
    items.classList.add('changing');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∑–∞–π–Ω
  currentRouletteDesign = design;
  
  // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ä—É–ª–µ—Ç–∫—É —Å –Ω–æ–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  setTimeout(() => {
    createRouletteWheel();
    
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
    if (items) {
      setTimeout(() => {
        items.classList.remove('changing');
      }, 100);
    }
  }, 150);
  
  // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä - –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
  // localStorage.setItem('rouletteDesign', design);
  
  toast(`–î–∏–∑–∞–π–Ω —Ä—É–ª–µ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${design}`, 'success');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é
$("#levelDisplay").addEventListener("click", ()=>{
  showLevelInfo();
});

function showHistory() {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  modalBody.innerHTML = `
    <div style="text-align: center; padding: 20px;">
      <div style="font-size: 48px; margin-bottom: 16px;">üìä</div>
      <h3 style="margin-bottom: 16px;">–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</h3>
      <p style="color: var(--text-muted); margin-bottom: 20px;">
        –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      </p>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–í–∞–ª—é—Ç–∞ –∏ –æ–ø—ã—Ç</div>
        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px;">
          <div style="text-align: center;">
            <div style="font-size: 24px; font-weight: 700; color: var(--glow1);">${userData.mulacoin}</div>
            <div style="font-size: 12px; color: var(--text-muted);">Mulacoin</div>
          </div>
          <div style="text-align: center;">
            <div style="font-size: 24px; font-weight: 700; color: var(--glow2);">${userData.exp}</div>
            <div style="font-size: 12px; color: var(--text-muted);">–û–ø—ã—Ç</div>
          </div>
        </div>
      </div>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–£—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å</div>
        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px;">
          <div style="text-align: center;">
            <div style="font-size: 24px; font-weight: 700; color: var(--accent);">${userData.level}</div>
            <div style="font-size: 12px; color: var(--text-muted);">–£—Ä–æ–≤–µ–Ω—å</div>
          </div>
          <div style="text-align: center;">
            <div style="font-size: 24px; font-weight: 700; color: var(--success);">${Math.min(userData.level, 5)}</div>
            <div style="font-size: 12px; color: var(--text-muted);">–ë–æ–Ω—É—Å mulacoin</div>
          </div>
        </div>
      </div>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–ü—Ä–æ–º–æ–∫–æ–¥—ã</div>
        <p style="font-size: 12px; color: var(--text-muted);">
          –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∑–¥–µ—Å—å –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        </p>
      </div>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
        <div style="display: grid; grid-template-columns: 1fr; gap: 8px; margin-bottom: 12px;">
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>Supabase:</span>
            <span style="color: ${supabase ? 'var(--success)' : 'var(--error)'}; font-weight: 600;">
              ${supabase ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
            </span>
          </div>
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>Telegram ID:</span>
            <span style="color: var(--text-muted); font-weight: 600;">
              ${userData.telegramId || '–ù–µ –ø–æ–ª—É—á–µ–Ω'}
            </span>
          </div>
        </div>
        <button class="btn ghost" onclick="testSupabaseConnection()" style="width: 100%; margin-top: 8px;">
          üîß –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        </button>
        <button class="btn ghost" onclick="forceSaveData()" style="width: 100%; margin-top: 8px;">
          üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        </button>
      </div>
      <button class="btn primary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;
  
  modal.classList.add("show");
}

function showLevelInfo() {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  const expForNext = getExpForNextLevel(userData.level);
  const currentLevelExp = userData.level > 1 ? LEVEL_EXP[userData.level - 2] : 0;
  const progress = userData.exp - currentLevelExp;
  const total = expForNext - currentLevelExp;
  const percentage = Math.round((progress / total) * 100);
  
  modalBody.innerHTML = `
    <div style="text-align: center; padding: 20px;">
      <div style="font-size: 48px; margin-bottom: 16px;">‚≠ê</div>
      <h3 style="margin-bottom: 16px;">–£—Ä–æ–≤–µ–Ω—å ${userData.level}</h3>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è</div>
        <div style="background: var(--bg1); border-radius: 4px; height: 8px; margin: 8px 0; overflow: hidden;">
          <div style="background: linear-gradient(90deg, var(--glow1), var(--glow2)); height: 100%; width: ${percentage}%; transition: width 0.5s ease;"></div>
        </div>
        <div style="font-size: 16px; font-weight: 700; color: var(--glow1);">${progress} / ${total} (${percentage}%)</div>
      </div>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–ë–æ–Ω—É—Å—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å</div>
        <div style="display: grid; grid-template-columns: 1fr; gap: 8px;">
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ mulacoin:</span>
            <span style="color: var(--glow1); font-weight: 600;">+${Math.min(userData.level, 5)}</span>
          </div>
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>–®–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö –ø—Ä–∏–∑–æ–≤:</span>
            <span style="color: var(--glow2); font-weight: 600;">+${Math.min(userData.level * 2, 20)}%</span>
          </div>
        </div>
      </div>
      <button class="btn primary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;
  
  modal.classList.add("show");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
async function testSupabaseConnection() {
  console.log('=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE ===');
  console.log('Supabase –¥–æ—Å—Ç—É–ø–µ–Ω:', !!supabase);
  console.log('Telegram ID:', userData.telegramId);
  
  if (!supabase) {
    toast('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'error');
    console.error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return;
  }
  
  try {
    toast('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...', 'info');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ subscriptions (–∫–æ—Ç–æ—Ä–∞—è —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ subscriptions...');
    const { data: subData, error: subError } = await supabase.from('subscriptions').select('*').limit(1);
    
    if (subError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ subscriptions:', subError);
      toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ subscriptions —É—Å–ø–µ—à–Ω–æ:', subData);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ promocodes
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ promocodes...');
    const { data: promoData, error: promoError } = await supabase.from('promocodes').select('*').limit(1);
    
    if (promoError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ promocodes:', promoError);
      toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ promocodes', 'error');
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ promocodes —É—Å–ø–µ—à–Ω–æ:', promoData);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ bot_user
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ bot_user...');
    const { data: userData, error: userError } = await supabase.from('bot_user').select('*').limit(1);
    
    if (userError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ bot_user:', userError);
      toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ bot_user', 'error');
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bot_user —É—Å–ø–µ—à–Ω–æ:', userData);
    
    // –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    toast('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
    console.log('=== –í–°–ï –¢–ï–°–¢–´ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û ===');
    
    // –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (userData.telegramId) {
      console.log('–ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      await saveUserData();
    } else {
      console.log('Telegram ID –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function forceSaveData() {
  console.log('=== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï ===');
  console.log('–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', userData);
  console.log('Supabase –¥–æ—Å—Ç—É–ø–µ–Ω:', !!supabase);
  console.log('Telegram ID:', userData.telegramId);
  
  if (!userData.telegramId) {
    toast('Telegram ID –Ω–µ –ø–æ–ª—É—á–µ–Ω', 'error');
    console.error('Telegram ID –Ω–µ –ø–æ–ª—É—á–µ–Ω');
    return;
  }
  
  if (!supabase) {
    toast('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'error');
    console.error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return;
  }
  
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    userData.mulacoin += 10;
    userData.exp += 50;
    userData.level = calculateLevel(userData.exp);
    
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', userData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await saveUserData();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –∫–≤–µ—Å—Ç–∞
    await saveQuestHistory('test', '–¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç', 'easy', 10, 50);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é —Ä—É–ª–µ—Ç–∫–∏
    await saveRouletteHistory('test', '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–∑', true, 0);
    
    toast('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
    console.log('=== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'error');
  }
}

/* ====== Init ====== */
loadState().then(async state=>{
  buildCards(state);
  maybeOfferPromo(state);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await loadUserData(state.userId);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  updateCurrencyDisplay();
  
  // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ —Ä—É–ª–µ—Ç–∫–∏
  currentRouletteDesign = 'standard';
  console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω —Ä—É–ª–µ—Ç–∫–∏');
  
  // –°–æ–∑–¥–∞–µ–º —Ä—É–ª–µ—Ç–∫—É
  createRouletteWheel();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏
  initializeRouletteHandlers();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
window.questSystem = {
  toast,
  closeModal,
  startQuest,
  loadState
};

// –î–µ–ª–∞–µ–º addRewards –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤
window.addRewards = addRewards;
