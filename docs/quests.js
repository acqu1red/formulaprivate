
/* ====== CONFIG ====== */
const SUPABASE_URL = window.SUPABASE_URL || "https://uhhsrtmmuwoxsdquimaa.supabase.co";
const SUPABASE_ANON_KEY = window.SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8";
const SUBSCRIPTIONS_TABLE = "subscriptions";
const PROMOCODES_TABLE = "promocodes";
const ADMIN_USERNAME = "@acqu1red";
const ADMIN_IDS = ["acqu1red", "123456789"]; // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

const PAYMENT_URL = "https://acqu1red.github.io/formulaprivate/payment.html";
const ISLAND_MINIAPP_URL = "./island.html";

const MAX_DAILY_FREE = 5;
const TOTAL_QUESTS = 10; // –£–º–µ–Ω—å—à–∏–ª –¥–æ 10 –∫–≤–µ—Å—Ç–æ–≤
const VARIATIONS_PER_QUEST = 10;

// –°–∏—Å—Ç–µ–º–∞ —Ä—É–ª–µ—Ç–∫–∏ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å mulacoin –ø—Ä–∏–∑–∞–º–∏
const ROULETTE_PRIZES = [
  { id: "subscription", name: "1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏", icon: "üëë", count: 2, probability: 0.02, color: "#FFD700" },
  { id: "discount500", name: "–°–∫–∏–¥–∫–∞ 500‚ÇΩ", icon: "üí∞", count: 1, probability: 0.05, color: "#FF6B6B" },
  { id: "discount100", name: "–°–∫–∏–¥–∫–∞ 100‚ÇΩ", icon: "üíµ", count: 2, probability: 0.08, color: "#4ECDC4" },
  { id: "discount50", name: "–°–∫–∏–¥–∫–∞ 50‚ÇΩ", icon: "ü™ô", count: 3, probability: 0.12, color: "#A8E6CF" },
  { id: "mulacoin100", name: "100 MULACOIN", icon: "ü™ô", count: 4, probability: 0.15, color: "#FFEAA7" },
  { id: "mulacoin50", name: "50 MULACOIN", icon: "ü™ô", count: 5, probability: 0.18, color: "#DDA0DD" },
  { id: "mulacoin25", name: "25 MULACOIN", icon: "ü™ô", count: 6, probability: 0.20, color: "#98D8C8" },
  { id: "quest24h", name: "+1 –∫–≤–µ—Å—Ç 24—á", icon: "üéØ", count: 3, probability: 0.15, color: "#F7DC6F" },
  { id: "frodCourse", name: "–ö–£–†–° –§–†–û–î–ê", icon: "üìö", count: 1, probability: 0.0001, color: "#6C5CE7" }
];

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
const LEVEL_EXP = [
  100, 300, 600, 1000, 1500, 2100, 2800, 3600, 4500, 5500,
  6600, 7800, 9100, 10500, 12000, 13600, 15300, 17100, 19000, 21000
];

// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∫–≤–µ—Å—Ç—ã
const QUEST_REWARDS = {
  easy: { mulacoin: 1, exp: 150 },
  medium: { mulacoin: 3, exp: 500 },
  hard: { mulacoin: 5, exp: 1000 }
};

const SPIN_COST = 13;

/* ====== Telegram init ====== */
let tg = null;
function initTG(){
  try{
    tg = window.Telegram && window.Telegram.WebApp ? window.Telegram.WebApp : null;
    if(tg){
      tg.expand();
      tg.enableClosingConfirmation();
      document.body.classList.add("tg-ready");
      
      // –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
        userData.telegramId = tg.initDataUnsafe.user.id;
      }
    }
  }catch(e){ console.log("TG init fail", e); }
}
initTG();

/* ====== Supabase ====== */
const supabase = window.supabase ? window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY) : null;

/* ====== Utils ====== */
const $ = (sel, el=document)=>el.querySelector(sel);
const $$ = (sel, el=document)=>Array.from(el.querySelectorAll(sel));
const toast = (msg, type = 'info')=>{ 
  const t = $("#toast"); 
  t.textContent = msg; 
  t.className = `toast ${type}`;
  t.classList.add("show"); 
  setTimeout(()=>t.classList.remove("show"), 3000); 
};

// –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª—é—Ç –∏ —É—Ä–æ–≤–Ω–µ–π
let userData = {
  mulacoin: 0,
  exp: 0,
  level: 1,
  userId: null,
  lastFreeSpin: null, // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–∞
  telegramId: null
};

function calculateLevel(exp) {
  let level = 1;
  for (let i = 0; i < LEVEL_EXP.length; i++) {
    if (exp >= LEVEL_EXP[i]) {
      level = i + 2;
    } else {
      break;
    }
  }
  return level;
}

function getExpForNextLevel(level) {
  if (level <= LEVEL_EXP.length) {
    return LEVEL_EXP[level - 1];
  }
  return LEVEL_EXP[LEVEL_EXP.length - 1] + (level - LEVEL_EXP.length) * 1000;
}

function updateCurrencyDisplay() {
  const mulacoinEl = $("#mulacoinAmount");
  const userMulacoinEl = $("#userMulacoin");
  const levelEl = $("#currentLevel");
  const progressEl = $("#levelProgress");
  
  if (mulacoinEl) mulacoinEl.textContent = userData.mulacoin;
  if (userMulacoinEl) userMulacoinEl.textContent = userData.mulacoin;
  if (levelEl) levelEl.textContent = userData.level;
  
  const expForNext = getExpForNextLevel(userData.level);
  const currentLevelExp = userData.level > 1 ? LEVEL_EXP[userData.level - 2] : 0;
  const progress = userData.exp - currentLevelExp;
  const total = expForNext - currentLevelExp;
  
  if (progressEl) progressEl.textContent = `${progress}/${total}`;
}

async function addRewards(mulacoin, exp, questId = null, questName = null, difficulty = null) {
  const oldLevel = userData.level;
  
  userData.mulacoin += mulacoin;
  userData.exp += exp;
  userData.level = calculateLevel(userData.exp);
  
  updateCurrencyDisplay();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
  if (userData.level > oldLevel) {
    toast(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${userData.level} —É—Ä–æ–≤–Ω—è!`, 'success');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
  await saveUserData();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–≤–µ—Å—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (questId && questName && difficulty) {
    await saveQuestHistory(questId, questName, difficulty, mulacoin, exp);
  }
}

// –°–∏—Å—Ç–µ–º–∞ —Ä—É–ª–µ—Ç–∫–∏ - –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ —Å –∏–∫–æ–Ω–∫–∞–º–∏
function createRouletteWheel() {
  const field = $("#rouletteField");
  if (!field) return;
  
  field.innerHTML = '';
  
  // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–∑–æ–≤
  let icons = [];
  ROULETTE_PRIZES.forEach(prize => {
    for (let i = 0; i < prize.count; i++) {
      icons.push(prize);
    }
  });
  
  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
  icons.sort(() => Math.random() - 0.5);
  
  // –°–æ–∑–¥–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ª–µ–Ω—Ç—É –∏–∫–æ–Ω–æ–∫ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
  const totalIcons = icons.length * 3; // –ü–æ–≤—Ç–æ—Ä—è–µ–º 3 —Ä–∞–∑–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
  
  for (let i = 0; i < totalIcons; i++) {
    const prize = icons[i % icons.length];
    const icon = document.createElement('div');
    icon.className = 'roulette-icon';
    icon.dataset.prize = prize.id;
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
    icon.style.left = `${i * 80}px`; // 80px –º–µ–∂–¥—É –∏–∫–æ–Ω–∫–∞–º–∏
    icon.style.top = '50%';
    icon.style.transform = 'translateY(-50%)';
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∫–æ–Ω–∫–∏
    const content = document.createElement('div');
    content.className = 'icon-content';
    
    const symbol = document.createElement('div');
    symbol.className = 'icon-symbol';
    symbol.textContent = prize.icon;
    
    const label = document.createElement('div');
    label.className = 'icon-label';
    label.textContent = prize.name;
    
    content.appendChild(symbol);
    content.appendChild(label);
    icon.appendChild(content);
    field.appendChild(icon);
  }
}

function getSectorColor(prizeId) {
  const colors = {
    subscription: 'linear-gradient(45deg, #FFD700, #FFA500)',
    discount500: 'linear-gradient(45deg, #FF6B6B, #FF8E8E)',
    discount100: 'linear-gradient(45deg, #4ECDC4, #44A08D)',
    discount50: 'linear-gradient(45deg, #A8E6CF, #7FCDCD)',
    quest24h: 'linear-gradient(45deg, #FFEAA7, #DDA0DD)',
    frodCourse: 'linear-gradient(45deg, #6C5CE7, #A29BFE)'
  };
  return colors[prizeId] || 'linear-gradient(45deg, #74B9FF, #0984E3)';
}

function spinRoulette(isFree = false) {
  const field = $("#rouletteField");
  const spinBtn = $("#spinRoulette");
  const buyBtn = $("#buySpin");
  
  if (!field || !spinBtn) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–∞
  if (isFree && !canSpinFree()) {
    toast("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Ä—É—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å!", "error");
    return;
  }
  
  // –°–ø–∏—Å—ã–≤–∞–µ–º mulacoin —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Ä—É—Ç
  if (!isFree && userData.mulacoin < SPIN_COST) {
    toast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mulacoin –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏!", "error");
    return;
  }
  
  if (!isFree) {
    userData.mulacoin -= SPIN_COST;
    updateCurrencyDisplay();
  } else {
    userData.lastFreeSpin = new Date().toISOString();
    updateRouletteButton();
  }
  
  saveUserData();
  
  spinBtn.disabled = true;
  buyBtn.disabled = true;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∏—è
  spinBtn.classList.add("spinning");
  
  // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
  const prize = selectPrizeByProbability();
  
  // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–∑–∞
  const icons = field.querySelectorAll('.roulette-icon');
  let targetIcon = null;
  let targetIndex = 0;
  
  icons.forEach((icon, index) => {
    if (icon.dataset.prize === prize.id) {
      targetIcon = icon;
      targetIndex = index;
    }
  });
  
  if (!targetIcon) return;
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –Ω—É–∂–Ω–æ–π –∏–∫–æ–Ω–∫–µ
  const iconWidth = 80; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∏–∫–æ–Ω–∫–∞–º–∏
  const centerOffset = 160; // –°–º–µ—â–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É (320px / 2)
  const targetPosition = targetIndex * iconWidth + centerOffset;
  const slideDistance = 2000 - targetPosition; // –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–∏–Ω—É—Å –ø–æ–∑–∏—Ü–∏—è —Ü–µ–ª–∏
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Å–∫–æ–ª—å–∂–µ–Ω–∏—è
  field.style.transition = 'transform 5s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
  field.style.transform = `translateX(-${slideDistance}px)`;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ–∂–∏–¥–∞–Ω–∏—è
  setTimeout(() => {
    spinBtn.classList.remove("spinning");
    
    // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–∏–∑–æ–º
    showPrizeModal(prize);
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏
    spinBtn.textContent = "üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É";
    spinBtn.disabled = false;
    buyBtn.disabled = false;
    updateRouletteButton();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏–Ω–∞
    setTimeout(() => {
      field.style.transition = 'none';
      field.style.transform = 'translateX(0)';
      setTimeout(() => {
        field.style.transition = 'transform 5s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
      }, 50);
    }, 1000);
  }, 5000);
}

function selectPrizeByProbability() {
  const rand = Math.random();
  let cumulative = 0;
  
  for (const prize of ROULETTE_PRIZES) {
    cumulative += prize.probability;
    if (rand <= cumulative) {
      return prize;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π –ø—Ä–∏–∑
  return ROULETTE_PRIZES[4]; // quest24h
}

async function showPrizeModal(prize) {
  const modal = $("#prizeModal");
  const icon = $("#prizeIcon");
  const title = $("#prizeTitle");
  const description = $("#prizeDescription");
  const content = $("#prizeContent");
  
  icon.textContent = prize.icon;
  title.textContent = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!";
  description.textContent = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${prize.name}`;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä—É–ª–µ—Ç–∫–∏
  await saveRouletteHistory(prize.id, prize.name, false, SPIN_COST);
  
  let contentHTML = '';
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º mulacoin –ø—Ä–∏–∑—ã
  if (prize.id.startsWith('mulacoin')) {
    const mulacoinAmount = parseInt(prize.id.replace('mulacoin', ''));
    userData.mulacoin += mulacoinAmount;
    updateCurrencyDisplay();
    await saveUserData();
    
    contentHTML = `
      <p style="font-size: 16px; color: var(--accent); font-weight: bold;">
        +${mulacoinAmount} MULACOIN –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É!
      </p>
      <p style="font-size: 14px; color: var(--text-muted);">
        –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${userData.mulacoin} MULACOIN
      </p>
    `;
  } else if (prize.id === 'subscription' || prize.id.startsWith('discount')) {
    const promoCode = generatePromoCode(prize);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await savePromocode(prize, promoCode);
    
    contentHTML = `
      <div class="promo-code" id="promoCode" onclick="copyPromoCode()">${promoCode}</div>
      <p style="font-size: 14px; color: var(--text-muted); margin: 8px 0;">
        –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
      </p>
      <a href="https://t.me/acqu1red?text=${encodeURIComponent(getPromoMessage(prize, promoCode))}" 
         class="use-button" id="useButton" style="display: none;">
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      </a>
    `;
  } else if (prize.id === 'quest24h') {
    contentHTML = `
      <p style="font-size: 14px; color: var(--text-muted);">
        –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç –Ω–∞ 24 —á–∞—Å–∞!
      </p>
    `;
    activateQuest24h();
  } else if (prize.id === 'frodCourse') {
    const promoCode = generatePromoCode(prize);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await savePromocode(prize, promoCode);
    
    contentHTML = `
      <div class="promo-code" id="promoCode" onclick="copyPromoCode()">${promoCode}</div>
      <p style="font-size: 14px; color: var(--text-muted); margin: 8px 0;">
        –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
      </p>
      <a href="https://t.me/acqu1red?text=${encodeURIComponent(getPromoMessage(prize, promoCode))}" 
         class="use-button" id="useButton" style="display: none;">
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
      </a>
    `;
  }
  
  content.innerHTML = contentHTML;
  modal.classList.add('show');
}

function generatePromoCode(prize) {
  const prefix = prize.id === 'subscription' ? 'SUB' : 
                prize.id === 'frodCourse' ? 'FROD' : 'DIS';
  const rand = Math.random().toString(36).slice(2, 8).toUpperCase();
  return `${prefix}-${rand}`;
}

function getPromoMessage(prize, code) {
  const messages = {
    subscription: `üéâ –í—ã–∏–≥—Ä–∞–ª 1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏!\n\n–ü—Ä–æ–º–æ–∫–æ–¥: ${code}\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π.`,
    discount500: `üéâ –í—ã–∏–≥—Ä–∞–ª —Å–∫–∏–¥–∫—É 500 —Ä—É–±–ª–µ–π!\n\n–ü—Ä–æ–º–æ–∫–æ–¥: ${code}\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç 7 –¥–Ω–µ–π.`,
    discount100: `üéâ –í—ã–∏–≥—Ä–∞–ª —Å–∫–∏–¥–∫—É 100 —Ä—É–±–ª–µ–π!\n\n–ü—Ä–æ–º–æ–∫–æ–¥: ${code}\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç 7 –¥–Ω–µ–π.`,
    discount50: `üéâ –í—ã–∏–≥—Ä–∞–ª —Å–∫–∏–¥–∫—É 50 —Ä—É–±–ª–µ–π!\n\n–ü—Ä–æ–º–æ–∫–æ–¥: ${code}\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç 7 –¥–Ω–µ–π.`,
    frodCourse: `üéâ –í—ã–∏–≥—Ä–∞–ª –ü–û–õ–ù–´–ô –ö–£–†–° –ü–û –§–†–û–î–£!\n\n–ü—Ä–æ–º–æ–∫–æ–¥: ${code}\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç 60 –¥–Ω–µ–π.`
  };
  return messages[prize.id] || `–ü—Ä–æ–º–æ–∫–æ–¥: ${code}`;
}

function copyPromoCode() {
  const promoCode = $("#promoCode");
  if (!promoCode) return;
  
  const text = promoCode.textContent;
  navigator.clipboard.writeText(text).then(() => {
    promoCode.classList.add('copied');
    promoCode.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
    
    setTimeout(() => {
      promoCode.style.display = 'none';
      const useButton = $("#useButton");
      if (useButton) {
        useButton.style.display = 'inline-block';
        useButton.style.animation = 'fadeIn 0.5s ease';
      }
    }, 1000);
    
    toast('–ü—Ä–æ–º–æ–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ò—Å—Ç–æ—Ä–∏–∏.', 'success');
  });
}

function activateQuest24h() {
  // –õ–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞
  toast('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–≤–µ—Å—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 24 —á–∞—Å–∞!', 'success');
}

async function saveUserData() {
  if (userData.userId) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ fallback
    localStorage.setItem(`userData_${userData.userId}`, JSON.stringify(userData));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (supabase && userData.telegramId) {
      try {
        const { error } = await supabase
          .from('bot_user')
          .upsert({
            telegram_id: userData.telegramId,
            mulacoin: userData.mulacoin,
            experience: userData.exp,
            level: userData.level,
            last_free_spin: userData.lastFreeSpin
          });
        
        if (error) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
      }
    }
  }
}

async function loadUserData(userId) {
  userData.userId = userId;
  
  // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Supabase
  if (supabase && userData.telegramId) {
    try {
      const { data, error } = await supabase
        .from('bot_user')
        .select('*')
        .eq('telegram_id', userData.telegramId)
        .single();
      
      if (data && !error) {
        userData.mulacoin = data.mulacoin || 0;
        userData.exp = data.experience || 0;
        userData.level = data.level || 1;
        userData.lastFreeSpin = data.last_free_spin;
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ Supabase, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
        const saved = localStorage.getItem(`userData_${userId}`);
        if (saved) {
          const parsed = JSON.parse(saved);
          userData = { ...userData, ...parsed };
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Supabase:', error);
      // Fallback –Ω–∞ localStorage
      const saved = localStorage.getItem(`userData_${userId}`);
      if (saved) {
        const parsed = JSON.parse(saved);
        userData = { ...userData, ...parsed };
      }
    }
  } else {
    // Fallback –Ω–∞ localStorage
    const saved = localStorage.getItem(`userData_${userId}`);
    if (saved) {
      const parsed = JSON.parse(saved);
      userData = { ...userData, ...parsed };
    }
  }
  
  updateCurrencyDisplay();
  updateRouletteButton();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞
async function saveQuestHistory(questId, questName, difficulty, mulacoinEarned, experienceEarned) {
  if (supabase && userData.telegramId) {
    try {
      const { error } = await supabase
        .from('quest_history')
        .insert({
          user_id: userData.telegramId,
          quest_id: questId,
          quest_name: questName,
          difficulty: difficulty,
          mulacoin_earned: mulacoinEarned,
          experience_earned: experienceEarned
        });
      
      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞:', error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞:', error);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä—É–ª–µ—Ç–∫–∏
async function saveRouletteHistory(prizeType, prizeName, isFree, mulacoinSpent, promoCodeId = null) {
  if (supabase && userData.telegramId) {
    try {
      const { error } = await supabase
        .from('roulette_history')
        .insert({
          user_id: userData.telegramId,
          prize_type: prizeType,
          prize_name: prizeName,
          is_free: isFree,
          mulacoin_spent: mulacoinSpent,
          promo_code_id: promoCodeId
        });
      
      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä—É–ª–µ—Ç–∫–∏:', error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä—É–ª–µ—Ç–∫–∏:', error);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function savePromocode(prize, promoCode) {
  console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', { prize, promoCode, telegramId: userData.telegramId });
  
  if (supabase && userData.telegramId) {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞
      let promoType = 'discount';
      let promoValue = 0;
      
      if (prize.id === 'subscription') {
        promoType = 'subscription';
        promoValue = 30; // 30 –¥–Ω–µ–π
      } else if (prize.id === 'frodCourse') {
        promoType = 'frod_course';
        promoValue = 60; // 60 –¥–Ω–µ–π
      } else if (prize.id === 'discount500') {
        promoValue = 500;
      } else if (prize.id === 'discount100') {
        promoValue = 100;
      } else if (prize.id === 'discount50') {
        promoValue = 50;
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + (prize.id === 'subscription' ? 30 : 7));
      
      const promoData = {
        code: promoCode,
        type: promoType,
        value: promoValue,
        issued_to: userData.telegramId,
        expires_at: expiresAt.toISOString(),
        status: 'issued'
      };
      
      console.log('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', promoData);
      
      const { data, error } = await supabase
        .from('promocodes')
        .insert(promoData)
        .select();
      
      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
        toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', 'error');
      } else {
        console.log('–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', data);
        toast('–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏–∏!', 'success');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
      toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
  } else {
    console.error('Supabase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID:', { 
      supabase: !!supabase, 
      telegramId: userData.telegramId 
    });
  }
}

function dayIndex(){ return Math.floor(Date.now() / (24*60*60*1000)); }
function variationIndex(){ return dayIndex() % VARIATIONS_PER_QUEST; }
function groupIndex(){ return dayIndex() % 2; } // 2 –≥—Ä—É–ø–ø—ã –ø–æ 5 –∫–≤–µ—Å—Ç–æ–≤

/* ====== Parallax particles ====== */
function fireflies(){
  const canvas = $("#fireflies");
  if(!canvas) return;
  const ctx = canvas.getContext("2d");
  let W,H; 
  function resize(){ 
    W=canvas.width=canvas.clientWidth; 
    H=canvas.height=canvas.clientHeight; 
  } 
  resize();
  window.addEventListener("resize", resize);
  
  const N = 32;
  const parts = Array.from({length:N},()=>({
    x:Math.random()*W,
    y:Math.random()*H, 
    vx:(Math.random()-.5)*.4, 
    vy:(Math.random()-.5)*.4, 
    r:1.5+Math.random()*3, 
    a:.6+Math.random()*.4 
  }));
  
  function step(){
    ctx.clearRect(0,0,W,H);
    parts.forEach(p=>{
      p.x+=p.vx; p.y+=p.vy;
      if(p.x<0||p.x>W) p.vx*=-1;
      if(p.y<0||p.y>H) p.vy*=-1;
      ctx.beginPath();
      const g = ctx.createRadialGradient(p.x,p.y,0,p.x,p.y,p.r*10);
      g.addColorStop(0, `rgba(102,247,213,${0.9*p.a})`);
      g.addColorStop(1, `rgba(102,247,213,0)`);
      ctx.fillStyle=g;
      ctx.arc(p.x,p.y,p.r*4,0,Math.PI*2);
      ctx.fill();
    });
    requestAnimationFrame(step);
  }
  step();
}
fireflies();

/* ====== Quests model (10 –∫–≤–µ—Å—Ç–æ–≤) ====== */
const QUESTS = [
  { 
    id: "treasure", 
    theme: "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", 
    style: "artdeco", 
    name: "–ü–æ–∏—Å–∫ —Å–æ–∫—Ä–æ–≤–∏—â", 
    intro: "–°–æ–±–µ—Ä–∏ –∫–∞—Ä—Ç—É –∏ –Ω–∞–π–¥–∏ –∫–ª–∞–¥ —Ä–∞–Ω—å—à–µ –¥—Ä—É–≥–∏—Ö.", 
    description: "–ò—Å—Å–ª–µ–¥—É–π –∑–∞–≥–∞–¥–æ—á–Ω—É—é –∫–∞—Ä—Ç—É –∏ —Å–ª–µ–¥—É–π –∑–∞ –≤—Å–ø—ã—à–∫–∞–º–∏ —Å–≤–µ—Ç–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞.",
    type: "puzzle", 
    difficulty: "easy",
    rewards: { fragments: 2, experience: 50 },
    available: true,
    url: "quests/treasure.html"
  },
  { 
    id: "cyber", 
    theme: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", 
    style: "synthwave", 
    name: "–ö–∏–±–µ—Ä‚Äë–≤–∑–ª–æ–º", 
    intro: "–ü–æ–¥–±–µ—Ä–∏ –ø–∞—Ç—Ç–µ—Ä–Ω, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —à–ª—é–∑.", 
    description: "–í–∑–ª–æ–º–∞–π –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –ø–æ–¥–±–∏—Ä–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.",
    type: "minigame", 
    difficulty: "medium",
    rewards: { fragments: 3, experience: 75 },
    available: true,
    url: "quests/cyber.html"
  },
  { 
    id: "bodylang", 
    theme: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", 
    style: "neo", 
    name: "–Ø–∑—ã–∫ —Ç–µ–ª–∞", 
    intro: "–†–∞—Å–ø–æ–∑–Ω–∞–π –Ω–µ–≤–µ—Ä–±–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã 2D‚Äë–ø–µ—Ä—Å–æ–Ω–∞–∂–∞.", 
    description: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞ –∏ –∂–µ—Å—Ç—ã, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.",
    type: "analysis", 
    difficulty: "medium",
    rewards: { fragments: 2, experience: 60 },
    available: true,
    url: "quests/bodylang.html"
  },
  { 
    id: "profiling", 
    theme: "–°–æ—Ü—Å–µ—Ç–∏", 
    style: "neo", 
    name: "–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞", 
    intro: "–û—Ü–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—ã–±–µ—Ä–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.", 
    description: "–ò–∑—É—á–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    type: "analysis", 
    difficulty: "hard",
    rewards: { fragments: 4, experience: 100 },
    available: false,
    url: "quests/profiling.html"
  },
  { 
    id: "roi", 
    theme: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", 
    style: "neo", 
    name: "ROI‚Äë–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", 
    intro: "–í—ã–±–µ—Ä–∏ –∫–∞–º–ø–∞–Ω–∏—é —Å –ª—É—á—à–µ–π –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å—é.", 
    description: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–±—ã–ª—å–Ω—É—é.",
    type: "puzzle", 
    difficulty: "medium",
    rewards: { fragments: 3, experience: 80 },
    available: false,
    url: "quests/roi.html"
  },
  { 
    id: "funnel", 
    theme: "–ü—Ä–æ–¥–∞–∂–∏", 
    style: "neo", 
    name: "–í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π", 
    intro: "–ù–∞–π–¥–∏ —Å–∞–º–æ–µ —É–∑–∫–æ–µ –º–µ—Å—Ç–æ.", 
    description: "–ò—Å—Å–ª–µ–¥—É–π –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.",
    type: "puzzle", 
    difficulty: "easy",
    rewards: { fragments: 2, experience: 45 },
    available: false,
    url: "quests/funnel.html"
  },
  { 
    id: "copy", 
    theme: "–ö–æ–Ω—Ç–µ–Ω—Ç", 
    style: "neo", 
    name: "A/B –∑–∞–≥–æ–ª–æ–≤–∫–∏", 
    intro: "–í—ã–±–µ—Ä–∏ –≤—ã–∏–≥—Ä–∞–≤—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º.", 
    description: "–°—Ä–∞–≤–Ω–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ A/B —Ç–µ—Å—Ç–µ.",
    type: "quiz", 
    difficulty: "easy",
    rewards: { fragments: 2, experience: 40 },
    available: false,
    url: "quests/copy.html"
  },
  { 
    id: "audience", 
    theme: "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è", 
    style: "neo", 
    name: "–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏", 
    intro: "–ò–∑—É—á–∏ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.", 
    description: "–ò–∑—É—á–∏ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ.",
    type: "analysis", 
    difficulty: "medium",
    rewards: { fragments: 3, experience: 70 },
    available: false,
    url: "quests/audience.html"
  },
  { 
    id: "competitors", 
    theme: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", 
    style: "neo", 
    name: "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", 
    intro: "–ò–∑—É—á–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å—Ä–µ–¥—É.", 
    description: "–ò–∑—É—á–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å—Ä–µ–¥—É –∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –≤ –æ—Ç—Ä–∞—Å–ª–∏.",
    type: "analysis", 
    difficulty: "hard",
    rewards: { fragments: 5, experience: 120 },
    available: false,
    url: "quests/competitors.html"
  },
  { 
    id: "trends", 
    theme: "–†—ã–Ω–æ–∫", 
    style: "neo", 
    name: "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤", 
    intro: "–ò–∑—É—á–∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã.", 
    description: "–ò–∑—É—á–∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.",
    type: "analysis", 
    difficulty: "hard",
    rewards: { fragments: 4, experience: 90 },
    available: false,
    url: "quests/trends.html"
  }
];

/* ====== Subscription + Admin check ====== */
async function loadState(){
  let userId = null;
  let username = null;
  
  try{ 
    if (tg && tg.initDataUnsafe && tg.initDataUnsafe.user) {
      userId = String(tg.initDataUnsafe.user.id);
      username = tg.initDataUnsafe.user.username;
    }
  } catch(e) { console.warn("TG user data fail", e); }
  
  let isSubscribed = false;
  let isAdmin = false;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (username && ADMIN_IDS.includes(username)) {
    isAdmin = true;
    isSubscribed = true; // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–≤–µ—Å—Ç–∞–º
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Supabase
  if(supabase && userId && !isAdmin){
    try{
      const { data, error } = await supabase
        .from(SUBSCRIPTIONS_TABLE)
        .select("*")
        .eq("tg_id", userId)
        .maybeSingle();
      
      if(!error && data){ 
        isSubscribed = true; 
      }
    } catch(e){ 
      console.warn("supabase check fail", e); 
    }
  }
  
  return { userId, username, isSubscribed, isAdmin };
}

/* ====== Rotation + gating ====== */
function featuredQuests(state){
  if(state.isSubscribed || state.isAdmin) return QUESTS;
  // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã
  return QUESTS.filter(q => q.available);
}

/* ====== Cards ====== */
function buildCards(state){
  const container = $("#quests");
  container.innerHTML = "";
  
  const list = featuredQuests(state);
  
  list.forEach((q, index) => {
    const card = document.createElement("div");
    card.className = "card fade-in";
    card.style.animationDelay = `${index * 0.1}s`;
    
    card.innerHTML = `
      ${state.isAdmin ? '<div class="premium-indicator">üëë</div>' : ''}
      <div class="label">${q.theme}</div>
      <h3>${q.name}</h3>
      <div class="description">${q.description}</div>
      <div class="meta">
        <div class="tag ${q.difficulty}">${getDifficultyText(q.difficulty)}</div>
      <div class="tag">–í–∞—Ä–∏–∞—Ü–∏—è #${variationIndex()+1}/10</div>
      </div>
      <div class="cta">
        <button class="btn primary start">–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç</button>
        <button class="btn ghost details">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
      </div>
    `;
    
    card.querySelector(".start").addEventListener("click", ()=>startQuest(q, state));
    card.querySelector(".details").addEventListener("click", ()=>{
      showQuestDetails(q, state);
    });
    
    container.appendChild(card);
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if(!state.isSubscribed && !state.isAdmin){
    const others = QUESTS.filter(q => !q.available);
    others.forEach((q, index) => {
      const card = document.createElement("div");
      card.className = "card locked fade-in";
      card.style.animationDelay = `${(list.length + index) * 0.1}s`;
      
      card.innerHTML = `
        <div class="lock">üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
        <div class="label">${q.theme}</div>
        <h3>${q.name}</h3>
        <div class="description">${q.description}</div>
        <div class="tag ${q.difficulty}">${getDifficultyText(q.difficulty)}</div>
        <div class="cta">
          <button class="btn ghost" onclick="showSubscriptionPrompt()">–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø</button>
        </div>
      `;
      
      container.appendChild(card);
    });
  }
}

function getDifficultyText(difficulty) {
  const texts = {
    easy: "–õ–µ–≥–∫–∏–π",
    medium: "–°—Ä–µ–¥–Ω–∏–π", 
    hard: "–°–ª–æ–∂–Ω—ã–π"
  };
  return texts[difficulty] || difficulty;
}

function showQuestDetails(q, state) {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  modalBody.innerHTML = `
    <div class="questIntro">
      <h3>${q.name}</h3>
      <p>${q.intro}</p>
    </div>
    <div class="questBody">
      <div class="banner">
        <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${q.description}
      </div>
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px;">
        <div class="glass" style="padding: 12px; text-align: center;">
          <div style="font-size: 12px; color: var(--text-muted);">–°–ª–æ–∂–Ω–æ—Å—Ç—å</div>
          <div style="font-weight: 600; color: var(--glow1);">${getDifficultyText(q.difficulty)}</div>
        </div>
        <div class="glass" style="padding: 12px; text-align: center;">
          <div style="font-size: 12px; color: var(--text-muted);">–§—Ä–∞–≥–º–µ–Ω—Ç—ã</div>
          <div style="font-weight: 600; color: var(--accent);">+${q.rewards.fragments}</div>
        </div>
        <div class="glass" style="padding: 12px; text-align: center;">
          <div style="font-size: 12px; color: var(--text-muted);">–û–ø—ã—Ç</div>
          <div style="font-weight: 600; color: var(--glow2);">+${q.rewards.experience}</div>
        </div>
      </div>
      ${!state.isSubscribed && !state.isAdmin ? `
        <div class="banner warning">
          <strong>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–≤–µ—Å—Ç–∞–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!
        </div>
      ` : ''}
    </div>
    <div class="questActions">
      <button class="btn primary" onclick="startQuest('${q.id}', ${JSON.stringify(state)})">–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç</button>
      <button class="btn ghost" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;
  
  modal.classList.add("show");
}

function showSubscriptionPrompt() {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  modalBody.innerHTML = `
    <div class="questIntro">
      <h3>üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h3>
      <p>–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</p>
      </div>
    <div class="questBody">
      <div class="banner success">
        <strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</strong>
        <ul style="margin: 8px 0; padding-left: 20px;">
          <li>–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º 10 –∫–≤–µ—Å—Ç–∞–º</li>
          <li>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</li>
          <li>–ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</li>
          <li>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</li>
        </ul>
      </div>
    </div>
    <div class="questActions">
      <button class="btn primary" onclick="openSubscription()">–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</button>
      <button class="btn ghost" onclick="closeModal()">–ü–æ–∑–∂–µ</button>
    </div>
  `;
  
  modal.classList.add("show");
}

function openSubscription() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.location.href –≤–º–µ—Å—Ç–æ tg.openLink –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ Mini App
  window.location.href = PAYMENT_URL;
  closeModal();
}

/* ====== Start quest ====== */
function startQuest(q, state) {
  const questId = typeof q === 'string' ? q : q.id;
  const quest = QUESTS.find(q => q.id === questId);
  
  if (!quest) {
    toast("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "error");
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–≤–µ—Å—Ç—É
  if (!state.isSubscribed && !state.isAdmin && !quest.available) {
    showSubscriptionPrompt();
    return;
  }
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–≤–µ—Å—Ç –≤–Ω—É—Ç—Ä–∏ Mini App
  const questUrl = `./quests/${questId}.html`;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.location.href –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ Mini App
  // tg.openLink –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –∞ –Ω–∞–º –Ω—É–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ Mini App
  window.location.href = questUrl;
}

/* ====== Modal functions ====== */
function closeModal() {
  const modal = $("#modal");
  modal.classList.remove("show");
}

$("#modalClose").addEventListener("click", closeModal);

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
$("#modal").addEventListener("click", (e) => {
  if (e.target.id === "modal") {
    closeModal();
  }
});

/* ====== Promo system ====== */
function recordDayVisit(){
  const key="qh_days";
  const d = String(dayIndex());
  let set=new Set((localStorage.getItem(key)||"").split(",").filter(Boolean));
  set.add(d);
  localStorage.setItem(key, Array.from(set).join(","));
  return set.size;
}

async function maybeOfferPromo(state){
  if(state.isSubscribed || state.isAdmin) return;
  const days = recordDayVisit();
  if(days>=10){
    const claim = document.createElement("div");
    claim.className="glass success-animation";
    claim.style.margin="16px";
    claim.style.padding="20px";
    claim.innerHTML = `
      <div style="text-align: center;">
        <div style="font-size: 24px; margin-bottom: 8px;">üéâ</div>
        <h3 style="margin-bottom: 8px;">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
        <p>–¢—ã –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –∫–≤–µ—Å—Ç—ã –∑–∞ 10 –¥–Ω–µ–π. –ó–∞–±–µ—Ä–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ -50% (–¥–µ–π—Å—Ç–≤—É–µ—Ç 60 –¥–Ω–µ–π).</p>
      </div>
    `;
    const btn = document.createElement("button"); 
    btn.className="btn primary"; 
    btn.textContent="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥";
    btn.style.marginTop = "12px";
    btn.onclick = async ()=>{
      const code = genCode(state.userId);
      await savePromo(code, state.userId);
      const box = document.createElement("div"); 
      box.className="banner success";
      box.innerHTML = `
        <strong>–ü—Ä–æ–º–æ–∫–æ–¥: ${code}</strong><br>
        –î–µ–π—Å—Ç–≤—É–µ—Ç 60 –¥–Ω–µ–π. –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É 
        <a href="https://t.me/${ADMIN_USERNAME}" target="_blank" style="color: var(--accent);">@${ADMIN_USERNAME}</a>
      `;
      claim.appendChild(box);
    };
    claim.appendChild(btn);
    $(".app").insertAdjacentElement("afterbegin", claim);
  }
}

function genCode(uid){
  const rand = Math.random().toString(36).slice(2,8).toUpperCase();
  return ("QH-"+(uid||"GUEST").slice(-4)+"-"+rand).replace(/[^A-Z0-9\-]/g,"");
}

async function savePromo(code, uid){
  if(!supabase){ 
    toast("–ü—Ä–æ–º–æ–∫–æ–¥: "+code, "success"); 
    return true; 
  }
  const expires = new Date(Date.now()+60*24*60*60*1000).toISOString();
  const { data, error } = await supabase.from(PROMOCODES_TABLE).insert({ 
    code, 
    tg_id: uid, 
    status:"unused", 
    issued_at: new Date().toISOString(), 
    expires_at: expires 
  });
  if(error){ 
    console.warn(error); 
    toast("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ –∫–æ–¥: "+code, "warning"); 
    return false; 
  }
  toast("–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", "success");
  return true;
}

function canSpinFree() {
  if (!userData.lastFreeSpin) return true;
  const now = new Date();
  const lastSpin = new Date(userData.lastFreeSpin);
  const diffTime = now - lastSpin;
  const diffDays = diffTime / (1000 * 60 * 60 * 24);
  return diffDays >= 1;
}

function updateRouletteButton() {
  const spinBtn = $("#spinRoulette");
  const buyBtn = $("#buySpin");
  
  if (!spinBtn || !buyBtn) return;
  
  if (canSpinFree()) {
    spinBtn.textContent = "üé∞ –ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É";
    spinBtn.disabled = false;
    spinBtn.classList.remove("disabled");
  } else {
    spinBtn.textContent = "‚è∞ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω";
    spinBtn.disabled = true;
    spinBtn.classList.add("disabled");
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
  buyBtn.textContent = `–ö—Ä—É—Ç–∏—Ç—å –∑–∞ ${SPIN_COST} MULACOIN`;
}

/* ====== Header buttons ====== */
$("#btnSubscribe").addEventListener("click", ()=>{
  openSubscription();
});

$("#btnHistory").addEventListener("click", ()=>{ 
  showHistory();
});

// –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä—É–ª–µ—Ç–∫–∏
const originalSpinHandler = () => {
  if (canSpinFree()) {
    spinRoulette(true);
  } else if (userData.mulacoin >= SPIN_COST) {
    spinRoulette(false);
  } else {
    toast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mulacoin –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏!", "error");
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä—É–ª–µ—Ç–∫–∏
$("#spinRoulette").addEventListener("click", originalSpinHandler);

$("#buySpin").addEventListener("click", ()=>{
  if (userData.mulacoin >= SPIN_COST) {
    spinRoulette(false);
  } else {
    toast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ mulacoin –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∞!", "error");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∞ –ø—Ä–∏–∑–∞
$("#closePrize").addEventListener("click", ()=>{
  $("#prizeModal").classList.remove("show");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é
$("#levelDisplay").addEventListener("click", ()=>{
  showLevelInfo();
});

function showHistory() {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  modalBody.innerHTML = `
    <div style="text-align: center; padding: 20px;">
      <div style="font-size: 48px; margin-bottom: 16px;">üìä</div>
      <h3 style="margin-bottom: 16px;">–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</h3>
      <p style="color: var(--text-muted); margin-bottom: 20px;">
        –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      </p>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–í–∞–ª—é—Ç–∞ –∏ –æ–ø—ã—Ç</div>
        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px;">
          <div style="text-align: center;">
            <div style="font-size: 24px; font-weight: 700; color: var(--glow1);">${userData.mulacoin}</div>
            <div style="font-size: 12px; color: var(--text-muted);">Mulacoin</div>
          </div>
          <div style="text-align: center;">
            <div style="font-size: 24px; font-weight: 700; color: var(--glow2);">${userData.exp}</div>
            <div style="font-size: 12px; color: var(--text-muted);">–û–ø—ã—Ç</div>
          </div>
        </div>
      </div>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–£—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å</div>
        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px;">
          <div style="text-align: center;">
            <div style="font-size: 24px; font-weight: 700; color: var(--accent);">${userData.level}</div>
            <div style="font-size: 12px; color: var(--text-muted);">–£—Ä–æ–≤–µ–Ω—å</div>
          </div>
          <div style="text-align: center;">
            <div style="font-size: 24px; font-weight: 700; color: var(--success);">${Math.min(userData.level, 5)}</div>
            <div style="font-size: 12px; color: var(--text-muted);">–ë–æ–Ω—É—Å mulacoin</div>
          </div>
        </div>
      </div>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–ü—Ä–æ–º–æ–∫–æ–¥—ã</div>
        <p style="font-size: 12px; color: var(--text-muted);">
          –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∑–¥–µ—Å—å –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        </p>
      </div>
      <button class="btn primary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;
  
  modal.classList.add("show");
}

function showLevelInfo() {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  const expForNext = getExpForNextLevel(userData.level);
  const currentLevelExp = userData.level > 1 ? LEVEL_EXP[userData.level - 2] : 0;
  const progress = userData.exp - currentLevelExp;
  const total = expForNext - currentLevelExp;
  const percentage = Math.round((progress / total) * 100);
  
  modalBody.innerHTML = `
    <div style="text-align: center; padding: 20px;">
      <div style="font-size: 48px; margin-bottom: 16px;">‚≠ê</div>
      <h3 style="margin-bottom: 16px;">–£—Ä–æ–≤–µ–Ω—å ${userData.level}</h3>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è</div>
        <div style="background: var(--bg1); border-radius: 4px; height: 8px; margin: 8px 0; overflow: hidden;">
          <div style="background: linear-gradient(90deg, var(--glow1), var(--glow2)); height: 100%; width: ${percentage}%; transition: width 0.5s ease;"></div>
        </div>
        <div style="font-size: 16px; font-weight: 700; color: var(--glow1);">${progress} / ${total} (${percentage}%)</div>
      </div>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–ë–æ–Ω—É—Å—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å</div>
        <div style="display: grid; grid-template-columns: 1fr; gap: 8px;">
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ mulacoin:</span>
            <span style="color: var(--glow1); font-weight: 600;">+${Math.min(userData.level, 5)}</span>
          </div>
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>–®–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö –ø—Ä–∏–∑–æ–≤:</span>
            <span style="color: var(--glow2); font-weight: 600;">+${Math.min(userData.level * 2, 20)}%</span>
          </div>
        </div>
      </div>
      <button class="btn primary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;
  
  modal.classList.add("show");
}

/* ====== Init ====== */
loadState().then(state=>{
  buildCards(state);
  maybeOfferPromo(state);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  loadUserData(state.userId);
  
  // –°–æ–∑–¥–∞–µ–º —Ä—É–ª–µ—Ç–∫—É
  createRouletteWheel();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
window.questSystem = {
  toast,
  closeModal,
  startQuest,
  loadState
};
