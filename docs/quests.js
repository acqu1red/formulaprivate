
/* ====== CONFIG ====== */
const SUPABASE_URL = window.SUPABASE_URL || "https://uhhsrtmmuwoxsdquimaa.supabase.co";
const SUPABASE_ANON_KEY = window.SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8";
const SUBSCRIPTIONS_TABLE = "subscriptions";
const PROMOCODES_TABLE = "promocodes";
const ADMIN_USERNAME = "@acqu1red";
const ADMIN_IDS = ["acqu1red", "123456789", "708907063", "7365307696"]; // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

const PAYMENT_URL = "https://acqu1red.github.io/formulaprivate/payment.html";
const ISLAND_MINIAPP_URL = "./island.html";

const MAX_DAILY_FREE = 5;
const TOTAL_QUESTS = 10; // –£–º–µ–Ω—å—à–∏–ª –¥–æ 10 –∫–≤–µ—Å—Ç–æ–≤
const VARIATIONS_PER_QUEST = 10;

// –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
const LEVEL_EXP = [
  100, 300, 600, 1000, 1500, 2100, 2800, 3600, 4500, 5500,
  6600, 7800, 9100, 10500, 12000, 13600, 15300, 17100, 19000, 21000
];

// –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∫–≤–µ—Å—Ç—ã
const QUEST_REWARDS = {
  easy: { mulacoin: 1, exp: 150 },
  medium: { mulacoin: 3, exp: 500 },
  hard: { mulacoin: 5, exp: 1000 }
};

/* ====== Telegram init ====== */
let tg = null;
function initTG(){
  try{
    tg = window.Telegram && window.Telegram.WebApp ? window.Telegram.WebApp : null;
    if(tg){
      tg.expand();
      tg.enableClosingConfirmation();
      document.body.classList.add("tg-ready");
      
      // –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
        userData.telegramId = tg.initDataUnsafe.user.id;
        console.log('Telegram ID –ø–æ–ª—É—á–µ–Ω:', userData.telegramId);
      }
    }
  }catch(e){ console.log("TG init fail", e); }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
initTG();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  setTimeout(async () => {
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ Supabase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!supabase && window.supabase) {
      await initSupabase();
    }
    
    if (supabase) {
      console.log('Supabase –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      try {
        const { data, error } = await supabase.from('bot_user').select('count').limit(1);
        if (error) {
          console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Supabase:', error);
          toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
        } else {
          console.log('–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase —É—Å–ø–µ—à–µ–Ω');
          toast('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Supabase:', error);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å Telegram ID
      if (userData.telegramId) {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Telegram ID:', userData.telegramId);
        await loadUserData(userData.telegramId);
      } else {
        console.log('Telegram ID –Ω–µ –ø–æ–ª—É—á–µ–Ω, –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      }
    } else {
      console.error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      toast('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∫–µ–π—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    try { initMysteryCase(); } catch(e){ console.warn('initMysteryCase error', e); }
  }, 1000);
});

/* ====== Supabase ====== */
let supabase = null;

async function initSupabase() {
  try {
    if (window.supabase) {
      supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
      console.log('Supabase –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const { data, error } = await supabase.from('bot_user').select('count').limit(1);
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
      } else {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
      }
    } else {
      console.error('Supabase –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
initSupabase();

/* ====== Utils ====== */
const $ = (sel, el=document)=>el.querySelector(sel);
const $$ = (sel, el=document)=>Array.from(el.querySelectorAll(sel));
const toast = (msg, type = 'info')=>{ 
  const t = $("#toast"); 
  t.textContent = msg; 
  t.className = `toast ${type}`;
  t.classList.add("show"); 
  setTimeout(()=>t.classList.remove("show"), 3000); 
};

// –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª—é—Ç –∏ —É—Ä–æ–≤–Ω–µ–π
let userData = {
  mulacoin: 0,
  exp: 0,
  level: 1,
  userId: null,
  
  telegramId: null
};

function calculateLevel(exp) {
  let level = 1;
  for (let i = 0; i < LEVEL_EXP.length; i++) {
    if (exp >= LEVEL_EXP[i]) {
      level = i + 2;
    } else {
      break;
    }
  }
  console.log(`calculateLevel: exp=${exp}, calculated level=${level}`);
  return level;
}

function getExpForNextLevel(level) {
  if (level <= LEVEL_EXP.length) {
    return LEVEL_EXP[level - 1];
  }
  return LEVEL_EXP[LEVEL_EXP.length - 1] + (level - LEVEL_EXP.length) * 1000;
}

function updateCurrencyDisplay() {
  console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã:', userData);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º mulacoin –≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
  const mulacoinElements = [
    $("#mulacoinAmount"),
    $("#userMulacoin"),
    $("#currentMulacoin"),
    document.querySelector('[data-mulacoin]')
  ];
  
  const levelEl = $("#currentLevel");
  const progressEl = $("#levelProgress");
  
  console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã mulacoin:', mulacoinElements.map(el => !!el));
  console.log('Level —ç–ª–µ–º–µ–Ω—Ç:', !!levelEl);
  console.log('Progress —ç–ª–µ–º–µ–Ω—Ç:', !!progressEl);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å mulacoin
  mulacoinElements.forEach(el => {
    if (el) {
      el.textContent = userData.mulacoin || 0;
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç mulacoin:', el.textContent);
    }
  });
  
  if (levelEl) {
    levelEl.textContent = userData.level || 1;
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω currentLevel:', userData.level);
  }
  
  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–≤–Ω—è
  const expForNext = getExpForNextLevel(userData.level);
  const currentLevelExp = userData.level > 1 ? LEVEL_EXP[userData.level - 2] : 0;
  const progress = Math.max(0, userData.exp - currentLevelExp);
  const total = expForNext - currentLevelExp;
  
  if (progressEl) {
    progressEl.textContent = `${progress}/${total}`;
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω levelProgress:', `${progress}/${total}`);
  }
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
  setTimeout(() => {
    const mulacoinElements = [
      $("#mulacoinAmount"),
      $("#userMulacoin"),
      $("#currentMulacoin"),
      document.querySelector('[data-mulacoin]')
    ];
    
    mulacoinElements.forEach(el => {
      if (el) {
        el.textContent = userData.mulacoin || 0;
      }
    });
  }, 100);
}

async function addRewards(mulacoin, exp, questId = null, questName = null, difficulty = null) {
  console.log('=== –°–¢–ê–†–¢ ADDREWARDS ===');
  console.log('addRewards –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { mulacoin, exp, questId, questName, difficulty });
  console.log('–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
  console.log('Supabase –¥–æ—Å—Ç—É–ø–µ–Ω:', !!supabase);
  console.log('Telegram ID:', userData.telegramId);
  
  const oldLevel = userData.level || 1;
  const oldExp = userData.exp || 0;
  const oldMulacoin = userData.mulacoin || 0;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
  userData.mulacoin = oldMulacoin + mulacoin;
  userData.exp = oldExp + exp;
  userData.level = calculateLevel(userData.exp);
  
  console.log('–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
    oldLevel,
    newLevel: userData.level,
    oldExp,
    newExp: userData.exp,
    oldMulacoin,
    newMulacoin: userData.mulacoin
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  updateCurrencyDisplay();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
  if (userData.level > oldLevel) {
    toast(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${userData.level} —É—Ä–æ–≤–Ω—è!`, 'success');
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
  console.log('–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
  await saveUserData();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–≤–µ—Å—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (questId && questName && difficulty) {
    console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–≤–µ—Å—Ç–∞...');
    await saveQuestHistory(questId, questName, difficulty, mulacoin, exp);
  }
  
  console.log('addRewards –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –†—É–ª–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª





async function saveUserData() {
  console.log('=== –°–¢–ê–†–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===');
  console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
  console.log('Supabase –¥–æ—Å—Ç—É–ø–µ–Ω:', !!supabase);
  console.log('Telegram ID:', userData.telegramId);
  console.log('Mulacoin –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', userData.mulacoin);
  console.log('Experience –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', userData.exp);
  console.log('Level –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', userData.level);
  
  // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∫–∞–∫ fallback
  const dataToSave = {
    mulacoin: userData.mulacoin || 0,
    exp: userData.exp || 0,
    level: userData.level || 1,

    telegramId: userData.telegramId
  };
  
  localStorage.setItem('userData', JSON.stringify(dataToSave));
  console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', dataToSave);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
  if (supabase && userData.telegramId) {
    try {
      const userDataToSave = {
        telegram_id: userData.telegramId,
        mulacoin: userData.mulacoin || 0,
        experience: userData.exp || 0,
        level: userData.level || 1,
    
        updated_at: new Date().toISOString()
      };
      
      console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', userDataToSave);
      
      const { data, error } = await supabase
        .from('bot_user')
        .upsert(userDataToSave)
        .select();
      
      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:', error);
        toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É', 'error');
      } else {
        console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase:', data);
        toast('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É', 'success');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
      toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
  } else {
    console.log('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID');
    if (!supabase) console.log('–ü—Ä–∏—á–∏–Ω–∞: Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    if (!userData.telegramId) console.log('–ü—Ä–∏—á–∏–Ω–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID');
  }
}

async function loadUserData(userId) {
  console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
  console.log('Supabase –¥–æ—Å—Ç—É–ø–µ–Ω:', !!supabase);
  console.log('Telegram ID:', userData.telegramId);
  
  userData.userId = userId;
  
  // –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ Telegram WebApp (–∫–∞–∫ –≤ subscription.html)
  const telegram_id = (tg && tg.initDataUnsafe && tg.initDataUnsafe.user && tg.initDataUnsafe.user.id) ? tg.initDataUnsafe.user.id : null;
  if (telegram_id) {
    userData.telegramId = telegram_id.toString();
    console.log('‚úÖ Telegram ID –ø–æ–ª—É—á–µ–Ω –∏–∑ WebApp:', userData.telegramId);
  } else {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Telegram ID –∏–∑ WebApp');
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
  const telegramIdForQuery = telegram_id ? telegram_id.toString() : userData.telegramId;
  
  // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage –∫–∞–∫ fallback
  const saved = localStorage.getItem('userData');
  if (saved) {
    try {
      const parsed = JSON.parse(saved);
      userData.mulacoin = parsed.mulacoin || 0;
      userData.exp = parsed.exp || 0;
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
      userData.level = calculateLevel(userData.exp);

      console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', parsed);
      console.log('–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞:', userData.level);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ localStorage:', error);
    }
  }
  
  // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Supabase
  if (supabase && telegramIdForQuery) {
    try {
      console.log('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Supabase –¥–ª—è Telegram ID:', telegramIdForQuery);
      
      const { data, error } = await supabase
        .from('bot_user')
        .select('*')
        .eq('telegram_id', telegramIdForQuery)
        .single();
      
      if (data && !error) {
        console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Supabase:', data);
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase (–æ–Ω–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        userData.mulacoin = data.mulacoin || userData.mulacoin || 0;
        userData.exp = data.experience || userData.exp || 0;
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
        userData.level = calculateLevel(userData.exp);

        console.log('–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞:', userData.level);
        toast('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'success');
      } else {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Supabase:', error);
      toast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
  } else {
    console.log('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage');
    if (!supabase) console.log('–ü—Ä–∏—á–∏–Ω–∞: Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    if (!userData.telegramId) console.log('–ü—Ä–∏—á–∏–Ω–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID');
    
    // Fallback –Ω–∞ localStorage
    const saved = localStorage.getItem(`userData_${userId}`);
    if (saved) {
      const parsed = JSON.parse(saved);
      userData = { ...userData, ...parsed };
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
      userData.level = calculateLevel(userData.exp || 0);
      console.log('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', parsed);
      console.log('–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞:', userData.level);
    }
  }
  
  console.log('–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
  updateCurrencyDisplay();
  setTimeout(() => updateCurrencyDisplay(), 100);
  setTimeout(() => updateCurrencyDisplay(), 500);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞
async function saveQuestHistory(questId, questName, difficulty, mulacoinEarned, experienceEarned) {
  console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞:', { questId, questName, difficulty, mulacoinEarned, experienceEarned });
  console.log('Supabase –¥–æ—Å—Ç—É–ø–µ–Ω:', !!supabase);
  console.log('Telegram ID:', userData.telegramId);
  
  if (supabase && userData.telegramId) {
    try {
      const questData = {
        user_id: userData.telegramId,
        quest_id: questId,
        quest_name: questName,
        difficulty: difficulty,
        mulacoin_earned: mulacoinEarned,
        experience_earned: experienceEarned
        // completed_at –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ now() –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      };
      
      console.log('–î–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', questData);
      
      const { data, error } = await supabase
        .from('quest_history')
        .insert(questData)
        .select();
      
      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞:', error);
        toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞', 'error');
      } else {
        console.log('–ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Supabase:', data);
        toast('–ò—Å—Ç–æ—Ä–∏—è –∫–≤–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞:', error);
      toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞', 'error');
    }
  } else {
    console.error('Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–≤–µ—Å—Ç–∞');
    if (!supabase) console.log('–ü—Ä–∏—á–∏–Ω–∞: Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    if (!userData.telegramId) console.log('–ü—Ä–∏—á–∏–Ω–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram ID');
  }
}



function dayIndex(){ return Math.floor(Date.now() / (24*60*60*1000)); }
function variationIndex(){ return dayIndex() % VARIATIONS_PER_QUEST; }
function groupIndex(){ return dayIndex() % 2; } // 2 –≥—Ä—É–ø–ø—ã –ø–æ 5 –∫–≤–µ—Å—Ç–æ–≤



/* ====== Quests model (10 –∫–≤–µ—Å—Ç–æ–≤) ====== */
const QUESTS = [
    { 
     id: "psychology", 
     theme: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", 
     style: "neo", 
     name: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞", 
     intro: "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤.", 
     description: "–í–µ–¥–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–∏–º–µ–Ω—è–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –¥–µ–Ω—å–≥–∏ —á–µ—Ä–µ–∑ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏.",
     type: "interactive", 
     difficulty: "medium",
     rewards: { fragments: 3, experience: 500 },
     available: true,
     url: "quests/psychology.html"
   },
  { 
    id: "world-government", 
    theme: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", 
    style: "conspiracy", 
    name: "–ú–∏—Ä–æ–≤–æ–µ —Ç–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ", 
    intro: "–°–æ–∑–¥–∞–π –º–∏—Ä–æ–≤–æ–µ —Ç–∞–π–Ω–æ–µ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ —Å–µ–∫—Ç–æ—Ä–∞–º.", 
    description: "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –ø—è—Ç–∏ —Å–µ–∫—Ç–æ—Ä–∞–º: –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π, –≤–æ–µ–Ω–Ω—ã–π, —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—á–µ—Å–∫–∏–π. –ö–∞–∂–¥—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–º–µ–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≤–æ–µ–º—É —Å–µ–∫—Ç–æ—Ä—É.",
    type: "strategy", 
    difficulty: "hard",
    rewards: { fragments: 5, experience: 1000 },
    available: true,
    url: "quests/world-government.html"
  },
  { 
    id: "bodylang", 
    theme: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", 
    style: "neo", 
    name: "–Ø–∑—ã–∫ —Ç–µ–ª–∞", 
    intro: "–†–∞—Å–ø–æ–∑–Ω–∞–π –Ω–µ–≤–µ—Ä–±–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã 2D‚Äë–ø–µ—Ä—Å–æ–Ω–∞–∂–∞.", 
    description: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞ –∏ –∂–µ—Å—Ç—ã, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.",
    type: "analysis", 
    difficulty: "medium",
    rewards: { fragments: 2, experience: 60 },
    available: true,
    url: "quests/bodylang.html"
  },
  { 
    id: "profiling", 
    theme: "–°–æ—Ü—Å–µ—Ç–∏", 
    style: "neo", 
    name: "–ü—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –∞–∫–∫–∞—É–Ω—Ç–∞", 
    intro: "–û—Ü–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏ –≤—ã–±–µ—Ä–∏ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.", 
    description: "–ò–∑—É—á–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    type: "analysis", 
    difficulty: "hard",
    rewards: { fragments: 4, experience: 100 },
    available: false,
    url: "quests/profiling.html"
  },
  { 
    id: "roi", 
    theme: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", 
    style: "neo", 
    name: "ROI‚Äë–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", 
    intro: "–í—ã–±–µ—Ä–∏ –∫–∞–º–ø–∞–Ω–∏—é —Å –ª—É—á—à–µ–π –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å—é.", 
    description: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–±—ã–ª—å–Ω—É—é.",
    type: "puzzle", 
    difficulty: "medium",
    rewards: { fragments: 3, experience: 80 },
    available: false,
    url: "quests/roi.html"
  },
  { 
    id: "funnel", 
    theme: "–ü—Ä–æ–¥–∞–∂–∏", 
    style: "neo", 
    name: "–í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–π", 
    intro: "–ù–∞–π–¥–∏ —Å–∞–º–æ–µ —É–∑–∫–æ–µ –º–µ—Å—Ç–æ.", 
    description: "–ò—Å—Å–ª–µ–¥—É–π –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.",
    type: "puzzle", 
    difficulty: "easy",
    rewards: { fragments: 2, experience: 45 },
    available: false,
    url: "quests/funnel.html"
  },
  { 
    id: "copy", 
    theme: "–ö–æ–Ω—Ç–µ–Ω—Ç", 
    style: "neo", 
    name: "A/B –∑–∞–≥–æ–ª–æ–≤–∫–∏", 
    intro: "–í—ã–±–µ—Ä–∏ –≤—ã–∏–≥—Ä–∞–≤—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º.", 
    description: "–°—Ä–∞–≤–Ω–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤—ã–±–µ—Ä–∏ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ A/B —Ç–µ—Å—Ç–µ.",
    type: "quiz", 
    difficulty: "easy",
    rewards: { fragments: 2, experience: 40 },
    available: false,
    url: "quests/copy.html"
  },
  { 
    id: "audience", 
    theme: "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è", 
    style: "neo", 
    name: "–ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏—Ç–æ—Ä–∏–∏", 
    intro: "–ò–∑—É—á–∏ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.", 
    description: "–ò–∑—É—á–∏ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ.",
    type: "analysis", 
    difficulty: "medium",
    rewards: { fragments: 3, experience: 70 },
    available: false,
    url: "quests/audience.html"
  },
  { 
    id: "competitors", 
    theme: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", 
    style: "neo", 
    name: "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", 
    intro: "–ò–∑—É—á–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å—Ä–µ–¥—É.", 
    description: "–ò–∑—É—á–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å—Ä–µ–¥—É –∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –≤ –æ—Ç—Ä–∞—Å–ª–∏.",
    type: "analysis", 
    difficulty: "hard",
    rewards: { fragments: 5, experience: 120 },
    available: false,
    url: "quests/competitors.html"
  },
  { 
    id: "trends", 
    theme: "–†—ã–Ω–æ–∫", 
    style: "neo", 
    name: "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤", 
    intro: "–ò–∑—É—á–∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã.", 
    description: "–ò–∑—É—á–∏ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.",
    type: "analysis", 
    difficulty: "hard",
    rewards: { fragments: 4, experience: 90 },
    available: false,
    url: "quests/trends.html"
  }
];

/* ====== Subscription + Admin check ====== */
async function loadState(){
  let userId = null;
  let username = null;
  
  try{ 
    if (tg && tg.initDataUnsafe && tg.initDataUnsafe.user) {
      userId = String(tg.initDataUnsafe.user.id);
      username = tg.initDataUnsafe.user.username;
      console.log('‚úÖ Telegram –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', { userId, username });
    } else {
      console.log('‚ùå Telegram –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }
  } catch(e) { 
    console.warn("TG user data fail", e); 
  }
  
  // –ü–æ–ª—É—á–∞–µ–º telegram_id —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ subscription.html
  const telegram_id = (tg && tg.initDataUnsafe && tg.initDataUnsafe.user && tg.initDataUnsafe.user.id) ? tg.initDataUnsafe.user.id : null;
  console.log('üîç Telegram ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', telegram_id);
  
  let isSubscribed = false;
  let isAdmin = false;
  
  console.log('=== –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê ===');
  console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { userId, username });
  console.log('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:', ADMIN_IDS);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ username –∏ telegramId)
  if ((username && ADMIN_IDS.includes(username)) || (userId && ADMIN_IDS.includes(userId))) {
    isAdmin = true;
    isSubscribed = true; // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–≤–µ—Å—Ç–∞–º
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!');
  } else {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Supabase (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ subscription.html)
  if(supabase && telegram_id){
    try{
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegram_id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É admins (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
      console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É admins...');
      const { data: adminsData, error: adminsError } = await supabase
        .from('admins')
        .select("*")
        .eq('telegram_id', telegram_id.toString())
        .maybeSingle();
      
      if(!adminsError && adminsData) {
        isAdmin = true;
        isSubscribed = true;
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ admins:', adminsData);
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ admins');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É subscriptions (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ subscription.html)
      console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É subscriptions...');
      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:');
      console.log('- telegram_id:', telegram_id);
      console.log('- telegram_id.toString():', telegram_id.toString());
      console.log('- SUPABASE_TABLE:', SUBSCRIPTIONS_TABLE);
      
      let { data: subscriptions, error } = await supabase
        .from(SUBSCRIPTIONS_TABLE)
        .select('*')
        .eq('user_id', telegram_id.toString())
        .eq('status', 'active')
        .order('created_at', { ascending: false })
        .limit(1);
      
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:');
      console.log('- error:', error);
      console.log('- subscriptions:', subscriptions);
      console.log('- subscriptions.length:', subscriptions ? subscriptions.length : 'null');
      
      if (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      } else if (!subscriptions || subscriptions.length === 0) {
        // Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ telegram_id –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        console.log('‚ÑπÔ∏è –ü–æ user_id –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–±—É–µ–º fallback –ø–æ telegram_id...');
        const fb = await supabase
          .from(SUBSCRIPTIONS_TABLE)
          .select('*')
          .eq('telegram_id', telegram_id.toString())
          .eq('status', 'active')
          .order('created_at', { ascending: false })
          .limit(1);
        if (!fb.error) {
          subscriptions = fb.data;
        } else {
          console.log('‚ùå –û—à–∏–±–∫–∞ fallback-–∑–∞–ø—Ä–æ—Å–∞ –ø–æ telegram_id:', fb.error);
        }
      }

      if (subscriptions && subscriptions.length > 0) {
        const subscription = subscriptions[0];
        console.log('üìã –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞:', subscription);
        
        const endDate = new Date(subscription.end_date);
        const now = new Date();
        
        console.log('üìÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç:');
        console.log('- endDate:', endDate);
        console.log('- now:', now);
        console.log('- endDate > now:', endDate > now);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞
        if (endDate > now) {
          isSubscribed = true;
          console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', subscription);
          console.log('üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:', subscription.end_date);
          console.log('üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞:', now.toISOString());
        } else {
          console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞:', subscription.end_date);
        }
      } else {
        console.log('‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ');
        console.log('- –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ "active"');
        console.log('- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id');
      }
      
    } catch(e){ 
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Supabase:", e); 
    }
  } else {
    console.log('‚ùå Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ userId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  }
  
  console.log('üìä –ò–¢–û–ì–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:', { userId, username, isSubscribed, isAdmin });
  console.log('=== –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê ===');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
  if (isSubscribed) {
    console.log('üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É!');
  } else {
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏');
  }
  
  if (isAdmin) {
    console.log('üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!');
  } else {
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º');
  }
  
  return { userId, username, isSubscribed, isAdmin };
}

/* ====== Rotation + gating ====== */
function featuredQuests(state){
  console.log('=== FEATURED QUESTS ===');
  console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', state);
  console.log('–í—Å–µ–≥–æ –∫–≤–µ—Å—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:', QUESTS.length);
  console.log('–ö–≤–µ—Å—Ç—ã:', QUESTS.map(q => ({ id: q.id, name: q.name, available: q.available })));
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:');
  console.log('- isSubscribed:', state.isSubscribed);
  console.log('- isAdmin:', state.isAdmin);
  console.log('- –£—Å–ª–æ–≤–∏–µ (isSubscribed || isAdmin):', state.isSubscribed || state.isAdmin);
  
  if(state.isSubscribed || state.isAdmin) {
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –∞–¥–º–∏–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï –∫–≤–µ—Å—Ç—ã');
    console.log('üìä –°—Ç–∞—Ç—É—Å:', { isSubscribed: state.isSubscribed, isAdmin: state.isAdmin });
    console.log('üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–≤–µ—Å—Ç–æ–≤:', QUESTS.length);
    return QUESTS;
  }
  
  // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 –∫–≤–µ—Å—Ç–∞
  const freeQuests = QUESTS.slice(0, 4);
  console.log('‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤:', freeQuests.length);
  console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:', freeQuests.map(q => q.name));
  console.log('üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:', QUESTS.slice(4).map(q => q.name));
  return freeQuests;
}

/* ====== Cards ====== */
function buildCards(state){
  const container = $("#quests");
  container.innerHTML = "";
  
  console.log('=== BUILD CARDS ===');
  console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', state);
  console.log('–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞:', { isSubscribed: state.isSubscribed, isAdmin: state.isAdmin });
  
  const list = featuredQuests(state);
  console.log('üìä –ö–≤–µ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', list.length);
  console.log('üìã –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤:', list.map(q => q.name));
  console.log('üîç –î–µ—Ç–∞–ª–∏ —Å–ø–∏—Å–∫–∞:');
  console.log('- –¢–∏–ø list:', typeof list);
  console.log('- –î–ª–∏–Ω–∞ list:', list.length);
  console.log('- –ü–µ—Ä–≤—ã–µ 3 –∫–≤–µ—Å—Ç–∞:', list.slice(0, 3).map(q => q.name));
  
  list.forEach((q, index) => {
    const card = document.createElement("div");
    card.className = "card fade-in";
    card.setAttribute("data-style", q.style);
    card.style.animationDelay = `${index * 0.1}s`;
    
    card.innerHTML = `
      ${state.isAdmin ? '<div class="premium-indicator">üëë –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø</div>' : ''}
      <div class="label">${q.theme}</div>
      <h3>${q.name}</h3>
      <div class="description">${q.description}</div>
      <div class="meta">
        <div class="tag ${q.difficulty}">${getDifficultyText(q.difficulty)}</div>
      <div class="tag">–í–∞—Ä–∏–∞—Ü–∏—è #${variationIndex()+1}/10</div>
      </div>
      <div class="cta">
        <button class="btn primary start">–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç</button>
        <button class="btn ghost details">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
      </div>
    `;
    
    card.querySelector(".start").addEventListener("click", ()=>startQuest(q, state));
    card.querySelector(".details").addEventListener("click", ()=>{
      showQuestDetails(q, state);
    });
    
    container.appendChild(card);
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–æ –Ω–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  if(!state.isSubscribed && !state.isAdmin){
    const lockedQuests = QUESTS.slice(4); // –ö–≤–µ—Å—Ç—ã —Å 5-–≥–æ –∏ –¥–∞–ª–µ–µ
    lockedQuests.forEach((q, index) => {
      const card = document.createElement("div");
      card.className = "card locked fade-in";
      card.setAttribute("data-style", q.style);
      card.style.animationDelay = `${(list.length + index) * 0.1}s`;
      
      card.innerHTML = `
        <div class="lock">üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞</div>
        <div class="label">${q.theme}</div>
        <h3>${q.name}</h3>
        <div class="description">${q.description}</div>
        <div class="tag ${q.difficulty}">${getDifficultyText(q.difficulty)}</div>
        <div class="cta">
          <button class="btn ghost locked-access-btn">–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</button>
        </div>
      `;
      
      container.appendChild(card);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤
    document.querySelectorAll('.locked-access-btn').forEach(btn => {
      btn.addEventListener('click', showSubscriptionPrompt);
    });
  }
}

function getDifficultyText(difficulty) {
  const texts = {
    easy: "–õ–µ–≥–∫–∏–π",
    medium: "–°—Ä–µ–¥–Ω–∏–π", 
    hard: "–°–ª–æ–∂–Ω—ã–π"
  };
  return texts[difficulty] || difficulty;
}

function showQuestDetails(q, state) {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  modalBody.innerHTML = `
    <div class="questIntro">
      <h3>${q.name}</h3>
      <p>${q.intro}</p>
    </div>
    <div class="questBody">
      <div class="banner">
        <strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${q.description}
      </div>
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px;">
        <div class="glass" style="padding: 12px; text-align: center;">
          <div style="font-size: 12px; color: var(--text-muted);">–°–ª–æ–∂–Ω–æ—Å—Ç—å</div>
          <div style="font-weight: 600; color: var(--glow1);">${getDifficultyText(q.difficulty)}</div>
        </div>
        <div class="glass" style="padding: 12px; text-align: center;">
          <div style="font-size: 12px; color: var(--text-muted);">–§—Ä–∞–≥–º–µ–Ω—Ç—ã</div>
          <div style="font-weight: 600; color: var(--accent);">+${q.rewards.fragments}</div>
        </div>
        <div class="glass" style="padding: 12px; text-align: center;">
          <div style="font-size: 12px; color: var(--text-muted);">–û–ø—ã—Ç</div>
          <div style="font-weight: 600; color: var(--glow2);">+${q.rewards.experience}</div>
        </div>
      </div>
      ${!state.isSubscribed && !state.isAdmin ? `
        <div class="banner warning">
          <strong>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–≤–µ—Å—Ç–∞–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã!
        </div>
      ` : ''}
    </div>
    <div class="questActions">
      <button class="btn primary" id="startQuestBtn">–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç</button>
      <button class="btn ghost" id="closeModalBtn">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;
  
  modal.classList.add("show");
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
  const startQuestBtn = modal.querySelector("#startQuestBtn");
  const closeModalBtn = modal.querySelector("#closeModalBtn");
  
  if (startQuestBtn) {
    startQuestBtn.addEventListener("click", () => startQuest(q, state));
  }
  
  if (closeModalBtn) {
    closeModalBtn.addEventListener("click", closeModal);
  }
}

function showSubscriptionPrompt() {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  modalBody.innerHTML = `
    <div class="questIntro">
      <h3>üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</h3>
      <p>–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</p>
      </div>
    <div class="questBody">
      <div class="banner success">
        <strong>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</strong>
        <ul style="margin: 8px 0; padding-left: 20px;">
          <li>–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º 10 –∫–≤–µ—Å—Ç–∞–º</li>
          <li>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</li>
          <li>–ù–æ–≤—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</li>
          <li>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</li>
        </ul>
      </div>
    </div>
    <div class="questActions">
      <button class="btn primary" id="openSubscriptionBtn">–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</button>
      <button class="btn ghost" id="closeSubscriptionBtn">–ü–æ–∑–∂–µ</button>
    </div>
  `;
  
  modal.classList.add("show");
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
  const openSubscriptionBtn = modal.querySelector("#openSubscriptionBtn");
  const closeSubscriptionBtn = modal.querySelector("#closeSubscriptionBtn");
  
  if (openSubscriptionBtn) {
    openSubscriptionBtn.addEventListener("click", openSubscription);
  }
  
  if (closeSubscriptionBtn) {
    closeSubscriptionBtn.addEventListener("click", closeModal);
  }
}

function openSubscription() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.location.href –≤–º–µ—Å—Ç–æ tg.openLink –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ Mini App
  window.location.href = PAYMENT_URL;
  closeModal();
}

/* ====== Start quest ====== */
function startQuest(q, state) {
  const questId = typeof q === 'string' ? q : q.id;
  const quest = QUESTS.find(q => q.id === questId);
  
  console.log('startQuest –≤—ã–∑–≤–∞–Ω–∞:', { questId, quest, state });
  
  if (!quest) {
    toast("–ö–≤–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "error");
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–≤–µ—Å—Ç—É
  const questIndex = QUESTS.findIndex(q => q.id === questId);
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞:', { 
    isSubscribed: state.isSubscribed, 
    isAdmin: state.isAdmin, 
    questIndex: questIndex,
    questAvailable: questIndex < 5 || state.isSubscribed || state.isAdmin
  });
  
  if (!state.isSubscribed && !state.isAdmin && questIndex >= 4) {
    console.log('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–¥–ø–∏—Å–∫–∏');
    showSubscriptionPrompt();
    return;
  }
  
  console.log('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–≤–µ—Å—Ç');
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–≤–µ—Å—Ç –≤–Ω—É—Ç—Ä–∏ Mini App
  const questUrl = `./quests/${questId}.html`;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º window.location.href –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ Mini App
  // tg.openLink –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –∞ –Ω–∞–º –Ω—É–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è –≤ Mini App
  window.location.href = questUrl;
}

/* ====== Modal functions ====== */
function closeModal() {
  const modal = $("#modal");
  modal.classList.remove("show");
}

$("#modalClose").addEventListener("click", closeModal);

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
$("#modal").addEventListener("click", (e) => {
  if (e.target.id === "modal") {
    closeModal();
  }
});

/* ====== Promo system ====== */
function recordDayVisit(){
  const key="qh_days";
  const d = String(dayIndex());
  let set=new Set((localStorage.getItem(key)||"").split(",").filter(Boolean));
  set.add(d);
  localStorage.setItem(key, Array.from(set).join(","));
  return set.size;
}

async function maybeOfferPromo(state){
  if(state.isSubscribed || state.isAdmin) return;
  const days = recordDayVisit();
  if(days>=10){
    const claim = document.createElement("div");
    claim.className="glass success-animation";
    claim.style.margin="16px";
    claim.style.padding="20px";
    claim.innerHTML = `
      <div style="text-align: center;">
        <div style="font-size: 24px; margin-bottom: 8px;">üéâ</div>
        <h3 style="margin-bottom: 8px;">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
        <p>–¢—ã –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –∫–≤–µ—Å—Ç—ã –∑–∞ 10 –¥–Ω–µ–π. –ó–∞–±–µ—Ä–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ -50% (–¥–µ–π—Å—Ç–≤—É–µ—Ç 60 –¥–Ω–µ–π).</p>
      </div>
    `;
    const btn = document.createElement("button"); 
    btn.className="btn primary"; 
    btn.textContent="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥";
    btn.style.marginTop = "12px";
    btn.onclick = async ()=>{
      const code = genCode(state.userId);
      await savePromo(code, state.userId);
      const box = document.createElement("div"); 
      box.className="banner success";
      box.innerHTML = `
        <strong>–ü—Ä–æ–º–æ–∫–æ–¥: ${code}</strong><br>
        –î–µ–π—Å—Ç–≤—É–µ—Ç 60 –¥–Ω–µ–π. –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É 
        <a href="https://t.me/${ADMIN_USERNAME}" target="_blank" style="color: var(--accent);">@${ADMIN_USERNAME}</a>
      `;
      claim.appendChild(box);
    };
    claim.appendChild(btn);
    $(".app").insertAdjacentElement("afterbegin", claim);
  }
}

function genCode(uid){
  const rand = Math.random().toString(36).slice(2,8).toUpperCase();
  return ("QH-"+(uid||"GUEST").slice(-4)+"-"+rand).replace(/[^A-Z0-9\-]/g,"");
}

async function savePromo(code, uid){
  if(!supabase){ 
    toast("–ü—Ä–æ–º–æ–∫–æ–¥: "+code, "success"); 
    return true; 
  }
  const expires = new Date(Date.now()+60*24*60*60*1000).toISOString();
  const { data, error } = await supabase.from(PROMOCODES_TABLE).insert({ 
    code, 
    tg_id: uid, 
    status:"unused", 
    issued_at: new Date().toISOString(), 
    expires_at: expires 
  });
  if(error){ 
    console.warn(error); 
    toast("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ –∫–æ–¥: "+code, "warning"); 
    return false; 
  }
  toast("–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", "success");
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
function isAdmin() {
  if (!userData.telegramId) return false;
  
  const userId = userData.telegramId.toString();
  const username = userData.username || '';
  
  const isAdminUser = ADMIN_IDS.includes(userId) || ADMIN_IDS.includes(username);
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞:', { userId, username, isAdminUser, ADMIN_IDS });
  
  return isAdminUser;
}



/* ====== Header buttons ====== */
$("#btnSubscribe").addEventListener("click", ()=>{
  openSubscription();
});

$("#btnHistory").addEventListener("click", ()=>{ 
  showHistory();
});



// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é
$("#levelDisplay").addEventListener("click", ()=>{
  showLevelInfo();
});

async function showHistory() {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
  let subscriptionStatus = '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞';
  let subscriptionDetails = null;
  
  if (supabase && userData.telegramId) {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏...');
      const { data: subscriptions, error } = await supabase
        .from('subscriptions')
        .select('*')
        .eq('user_id', userData.telegramId)
        .eq('status', 'active')
        .order('created_at', { ascending: false })
        .limit(1);
      
      if (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        subscriptionStatus = '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏';
      } else if (subscriptions && subscriptions.length > 0) {
        const subscription = subscriptions[0];
        const endDate = new Date(subscription.end_date);
        const now = new Date();
        
        if (endDate > now) {
          subscriptionStatus = '–ê–∫—Ç–∏–≤–Ω–∞';
          subscriptionDetails = subscription;
          console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', subscription);
        } else {
          subscriptionStatus = '–ò—Å—Ç–µ–∫–ª–∞';
          subscriptionDetails = subscription;
          console.log('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞:', subscription.end_date);
        }
      } else {
        subscriptionStatus = '–ù–µ –Ω–∞–π–¥–µ–Ω–∞';
        console.log('‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      subscriptionStatus = '–û—à–∏–±–∫–∞';
    }
  } else {
    subscriptionStatus = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    console.log('‚ùå Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç Telegram ID');
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let promocodes = [];
  if (supabase && userData.telegramId) {
    try {
      const { data, error } = await supabase
        .from('promocodes')
        .select('*')
        .eq('issued_to', userData.telegramId)
        .order('issued_at', { ascending: false });
      
      if (!error && data) {
        promocodes = data;
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–º–æ–∫–æ–¥—ã:', promocodes);
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error);
    }
  }
  

  
  modalBody.innerHTML = `
    <div style="text-align: center; padding: 20px;">
      <div style="font-size: 48px; margin-bottom: 16px;">üìä</div>
      <h3 style="margin-bottom: 16px;">–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</h3>
      <p style="color: var(--text-muted); margin-bottom: 20px;">
        –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      </p>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–í–∞–ª—é—Ç–∞ –∏ –æ–ø—ã—Ç</div>
        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px;">
          <div style="text-align: center;">
            <div style="font-size: 24px; font-weight: 700; color: var(--glow1);">${userData.mulacoin}</div>
            <div style="font-size: 12px; color: var(--text-muted);">Mulacoin</div>
          </div>
          <div style="text-align: center;">
            <div style="font-size: 24px; font-weight: 700; color: var(--glow2);">${userData.exp}</div>
            <div style="font-size: 12px; color: var(--text-muted);">–û–ø—ã—Ç</div>
          </div>
        </div>
      </div>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–£—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å</div>
        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px;">
          <div style="text-align: center;">
            <div style="font-size: 24px; font-weight: 700; color: var(--accent);">${userData.level}</div>
            <div style="font-size: 12px; color: var(--text-muted);">–£—Ä–æ–≤–µ–Ω—å</div>
          </div>
          <div style="text-align: center;">
            <div style="font-size: 24px; font-weight: 700; color: var(--success);">${Math.min(userData.level, 5)}</div>
            <div style="font-size: 12px; color: var(--text-muted);">–ë–æ–Ω—É—Å mulacoin</div>
          </div>
        </div>
      </div>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–ü—Ä–æ–º–æ–∫–æ–¥—ã (${promocodes.length})</div>
        ${promocodes.length > 0 ? `
          <div style="max-height: 200px; overflow-y: auto; margin: 8px 0;">
            ${promocodes.map(promo => `
              <div style="background: var(--bg1); border-radius: 4px; padding: 8px; margin: 4px 0; cursor: pointer;" 
                   onclick="showPromoDetails('${promo.code}', '${promo.type}', '${promo.value}', '${promo.expires_at}', '${promo.status}')">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                  <span style="font-weight: 600; color: var(--accent);">${promo.code}</span>
                  <span style="font-size: 12px; color: ${promo.status === 'used' ? 'var(--error)' : 'var(--success)'};">
                    ${promo.status === 'used' ? '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : '–ê–∫—Ç–∏–≤–µ–Ω'}
                  </span>
                </div>
                <div style="font-size: 12px; color: var(--text-muted); margin-top: 4px;">
                  ${getPromoTypeText(promo.type)} - ${promo.value}${promo.type === 'discount' ? '‚ÇΩ' : ' –¥–Ω–µ–π'}
                </div>
              </div>
            `).join('')}
          </div>
        ` : `
          <p style="font-size: 12px; color: var(--text-muted);">
            –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.
          </p>
        `}
      </div>

      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</div>
        <div style="display: grid; grid-template-columns: 1fr; gap: 8px; margin-bottom: 12px;">
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>–°—Ç–∞—Ç—É—Å:</span>
            <span style="color: ${subscriptionStatus === '–ê–∫—Ç–∏–≤–Ω–∞' ? 'var(--success)' : subscriptionStatus === '–ò—Å—Ç–µ–∫–ª–∞' ? 'var(--warning)' : 'var(--error)'}; font-weight: 600;">
              ${subscriptionStatus === '–ê–∫—Ç–∏–≤–Ω–∞' ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : subscriptionStatus === '–ò—Å—Ç–µ–∫–ª–∞' ? '‚ö†Ô∏è –ò—Å—Ç–µ–∫–ª–∞' : subscriptionStatus === '–ù–µ –Ω–∞–π–¥–µ–Ω–∞' ? '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞' : subscriptionStatus === '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏' ? '‚ùå –û—à–∏–±–∫–∞' : subscriptionStatus === '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' ? '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' : '‚ùå –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞'}
            </span>
          </div>
          ${subscriptionDetails ? `
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <span>–¢–∞—Ä–∏—Ñ:</span>
              <span style="color: var(--text-muted); font-weight: 600;">
                ${subscriptionDetails.tariff || '–ù–µ —É–∫–∞–∑–∞–Ω'}
              </span>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <span>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</span>
              <span style="color: var(--text-muted); font-weight: 600;">
                ${new Date(subscriptionDetails.end_date).toLocaleDateString()}
              </span>
            </div>
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <span>User ID –≤ –ë–î:</span>
              <span style="color: var(--text-muted); font-weight: 600;">
                ${subscriptionDetails.user_id || '–ù–µ —É–∫–∞–∑–∞–Ω'}
              </span>
            </div>
          ` : ''}
        </div>
      </div>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
        <div style="display: grid; grid-template-columns: 1fr; gap: 8px; margin-bottom: 12px;">
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>Supabase:</span>
            <span style="color: ${supabase ? 'var(--success)' : 'var(--error)'}; font-weight: 600;">
              ${supabase ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
            </span>
          </div>
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>Telegram ID:</span>
            <span style="color: var(--text-muted); font-weight: 600;">
              ${userData.telegramId || '–ù–µ –ø–æ–ª—É—á–µ–Ω'}
            </span>
          </div>
        </div>
        <button class="btn ghost" onclick="testSupabaseConnection()" style="width: 100%; margin-top: 8px;">
          üîß –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        </button>
        <button class="btn ghost" onclick="forceSaveData()" style="width: 100%; margin-top: 8px;">
          üíæ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        </button>
      </div>
      <button class="btn primary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;
  
  modal.classList.add("show");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–∏–ø–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
function getPromoTypeText(type) {
  const types = {
    'subscription': '–ü–æ–¥–ø–∏—Å–∫–∞',
    'discount': '–°–∫–∏–¥–∫–∞',
    'frod_course': '–ö—É—Ä—Å –§—Ä–æ–¥–∞'
  };
  return types[type] || type;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
function showPromoDetails(code, type, value, expiresAt, status) {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  const expiresDate = new Date(expiresAt);
  const isExpired = expiresDate < new Date();
  const statusText = status === 'used' ? '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : (isExpired ? '–ò—Å—Ç–µ–∫' : '–ê–∫—Ç–∏–≤–µ–Ω');
  const statusColor = status === 'used' ? 'var(--error)' : (isExpired ? 'var(--warning)' : 'var(--success)');
  
  modalBody.innerHTML = `
    <div style="text-align: center; padding: 20px;">
      <div style="font-size: 48px; margin-bottom: 16px;">üé´</div>
      <h3 style="margin-bottom: 16px;">–ü—Ä–æ–º–æ–∫–æ–¥: ${code}</h3>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ</div>
        <div style="display: grid; grid-template-columns: 1fr; gap: 8px;">
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>–¢–∏–ø:</span>
            <span style="font-weight: 600; color: var(--accent);">${getPromoTypeText(type)}</span>
          </div>
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>–ó–Ω–∞—á–µ–Ω–∏–µ:</span>
            <span style="font-weight: 600; color: var(--glow1);">${value}${type === 'discount' ? '‚ÇΩ' : ' –¥–Ω–µ–π'}</span>
          </div>
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>–°—Ç–∞—Ç—É—Å:</span>
            <span style="font-weight: 600; color: ${statusColor};">${statusText}</span>
          </div>
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</span>
            <span style="font-weight: 600; color: var(--text-muted);">${expiresDate.toLocaleDateString()}</span>
          </div>
        </div>
      </div>
      ${status === 'used' || isExpired ? `
        <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
          <div style="font-size: 14px; color: var(--text-muted);">
            ${status === 'used' ? '–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.' : '–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫ –∏ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.'}
          </div>
        </div>
      ` : `
        <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
          <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</div>
          <p style="font-size: 12px; color: var(--text-muted); margin-bottom: 12px;">
            –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
          </p>
          <button class="btn primary" onclick="copyToClipboard('${code}')" style="width: 100%;">
            üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
          </button>
        </div>
      `}
      <button class="btn ghost" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;
  
  modal.classList.add("show");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copyToClipboard(text) {
  navigator.clipboard.writeText(text).then(() => {
    toast('–ü—Ä–æ–º–æ–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!', 'success');
  }).catch(() => {
    toast('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
  });
}

function showLevelInfo() {
  const modal = $("#modal");
  const modalBody = $("#modalBody");
  
  const expForNext = getExpForNextLevel(userData.level);
  const currentLevelExp = userData.level > 1 ? LEVEL_EXP[userData.level - 2] : 0;
  const progress = userData.exp - currentLevelExp;
  const total = expForNext - currentLevelExp;
  const percentage = Math.round((progress / total) * 100);
  
  modalBody.innerHTML = `
    <div style="text-align: center; padding: 20px;">
      <div style="font-size: 48px; margin-bottom: 16px;">‚≠ê</div>
      <h3 style="margin-bottom: 16px;">–£—Ä–æ–≤–µ–Ω—å ${userData.level}</h3>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è</div>
        <div style="background: var(--bg1); border-radius: 4px; height: 8px; margin: 8px 0; overflow: hidden;">
          <div style="background: linear-gradient(90deg, var(--glow1), var(--glow2)); height: 100%; width: ${percentage}%; transition: width 0.5s ease;"></div>
        </div>
        <div style="font-size: 16px; font-weight: 700; color: var(--glow1);">${progress} / ${total} (${percentage}%)</div>
      </div>
      <div style="background: var(--glass); border-radius: var(--radius-sm); padding: 16px; margin: 16px 0;">
        <div style="font-size: 14px; color: var(--text-muted); margin-bottom: 8px;">–ë–æ–Ω—É—Å—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å</div>
        <div style="display: grid; grid-template-columns: 1fr; gap: 8px;">
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ mulacoin:</span>
            <span style="color: var(--glow1); font-weight: 600;">+${Math.min(userData.level, 5)}</span>
          </div>
          <div style="display: flex; justify-content: space-between; align-items: center;">
            <span>–®–∞–Ω—Å —Ä–µ–¥–∫–∏—Ö –ø—Ä–∏–∑–æ–≤:</span>
            <span style="color: var(--glow2); font-weight: 600;">+${Math.min(userData.level * 2, 20)}%</span>
          </div>
        </div>
      </div>
      <button class="btn primary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;
  
  modal.classList.add("show");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
async function testSupabaseConnection() {
  console.log('=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö SUPABASE ===');
  console.log('Supabase –¥–æ—Å—Ç—É–ø–µ–Ω:', !!supabase);
  console.log('Telegram ID:', userData.telegramId);
  
  if (!supabase) {
    toast('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'error');
    console.error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return;
  }
  
  try {
    toast('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...', 'info');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ subscriptions (–∫–æ—Ç–æ—Ä–∞—è —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ subscriptions...');
    const { data: subData, error: subError } = await supabase.from('subscriptions').select('*').limit(1);
    
    if (subError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ subscriptions:', subError);
      toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ subscriptions —É—Å–ø–µ—à–Ω–æ:', subData);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ promocodes
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ promocodes...');
    const { data: promoData, error: promoError } = await supabase.from('promocodes').select('*').limit(1);
    
    if (promoError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ promocodes:', promoError);
      toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ promocodes', 'error');
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ promocodes —É—Å–ø–µ—à–Ω–æ:', promoData);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ bot_user
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ bot_user...');
    const { data: userData, error: userError } = await supabase.from('bot_user').select('*').limit(1);
    
    if (userError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ bot_user:', userError);
      toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ bot_user', 'error');
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ bot_user —É—Å–ø–µ—à–Ω–æ:', userData);
    
    // –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    toast('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç', 'success');
    console.log('=== –í–°–ï –¢–ï–°–¢–´ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û ===');
    
    // –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (userData.telegramId) {
      console.log('–ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
      await saveUserData();
    } else {
      console.log('Telegram ID –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    toast('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', 'error');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function forceSaveData() {
  console.log('=== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï ===');
  console.log('–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', userData);
  console.log('Supabase –¥–æ—Å—Ç—É–ø–µ–Ω:', !!supabase);
  console.log('Telegram ID:', userData.telegramId);
  
  if (!userData.telegramId) {
    toast('Telegram ID –Ω–µ –ø–æ–ª—É—á–µ–Ω', 'error');
    console.error('Telegram ID –Ω–µ –ø–æ–ª—É—á–µ–Ω');
    return;
  }
  
  if (!supabase) {
    toast('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'error');
    console.error('Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return;
  }
  
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    userData.mulacoin += 10;
    userData.exp += 50;
    userData.level = calculateLevel(userData.exp);
    
    console.log('–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥:', userData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await saveUserData();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –∫–≤–µ—Å—Ç–∞
    await saveQuestHistory('test', '–¢–µ—Å—Ç–æ–≤—ã–π –∫–≤–µ—Å—Ç', 'easy', 10, 50);
    

    
    toast('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
    console.log('=== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'error');
  }
}

/* ====== Init ====== */
loadState().then(async state=>{
  console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===');
  console.log('–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:');
  console.log('- state.isSubscribed:', state.isSubscribed);
  console.log('- state.isAdmin:', state.isAdmin);
  console.log('- state.userId:', state.userId);
  console.log('- state.username:', state.username);
  
  buildCards(state);
  maybeOfferPromo(state);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await loadUserData(state.userId);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  updateCurrencyDisplay();
  

  
  console.log('=== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===');
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
window.questSystem = {
  toast,
  closeModal,
  startQuest,
  loadState
};

// –î–µ–ª–∞–µ–º addRewards –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤
window.addRewards = addRewards;

/* ====== Mystery Case (daily) ====== */
function getCaseStateKey(){
  const uid = (tg && tg.initDataUnsafe && tg.initDataUnsafe.user && tg.initDataUnsafe.user.id) ? tg.initDataUnsafe.user.id : 'guest';
  const day = Math.floor(Date.now() / (24*60*60*1000));
  return `mystery_case_${uid}_${day}`;
}

function isCaseAvailable(){
  return !localStorage.getItem(getCaseStateKey());
}

function markCaseUsed(){
  localStorage.setItem(getCaseStateKey(), '1');
}

function nextMidnightMs(){
  const now = new Date();
  const next = new Date(now);
  next.setHours(24,0,0,0);
  return next - now;
}

function formatCountdown(ms){
  const total = Math.max(0, Math.floor(ms/1000));
  const h = String(Math.floor(total/3600)).padStart(2,'0');
  const m = String(Math.floor((total%3600)/60)).padStart(2,'0');
  const s = String(total%60).padStart(2,'0');
  return `${h}:${m}:${s}`;
}

function initMysteryCase(){
  const btn = document.getElementById('mysteryCaseBtn');
  const imgOpen = document.getElementById('caseImageOpen');
  const imgClosed = document.getElementById('caseImageClosed');
  const caseModal = document.getElementById('caseModal');
  const caseModalClose = document.getElementById('caseModalClose');
  const countdown = document.getElementById('caseCountdown');

  if(!btn || !imgOpen || !imgClosed) return;

  const available = isCaseAvailable();
  imgOpen.style.display = available ? 'block' : 'none';
  imgClosed.style.display = available ? 'none' : 'block';

  btn.addEventListener('click', ()=>{
    if(isCaseAvailable()){
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä—É–ª–µ—Ç–∫–∏/–∫–µ–π—Å–∞
      window.location.href = './rulette.html';
    } else {
      // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º
      if(caseModal){ caseModal.classList.add('show'); }
      const update = ()=>{ if(countdown){ countdown.textContent = formatCountdown(nextMidnightMs()); } };
      update();
      const interval = setInterval(update, 1000);
      const onClose = ()=>{ caseModal.classList.remove('show'); clearInterval(interval); };
      if(caseModalClose){ caseModalClose.onclick = onClose; }
    }
  });

  // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä—É–ª–µ—Ç–∫–∏
  window.markCaseUsed = markCaseUsed;
}
