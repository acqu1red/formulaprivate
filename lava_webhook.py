#!/usr/bin/env python3
"""
Webhook handler for Lava Top payments
"""

import json
import hmac
import hashlib
from flask import Flask, request, jsonify
import requests

app = Flask(__name__)

# Lava Top webhook secret (–ø–æ–ª—É—á–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Lava Top)
LAVA_WEBHOOK_SECRET = "your_webhook_secret_here"

# Telegram bot token
TELEGRAM_BOT_TOKEN = "8354723250:AAEWcX6OojEi_fN-RAekppNMVTAsQDU0wvo"

# Admin chat IDs
ADMIN_IDS = [708907063, 7365307696]

def verify_webhook_signature(payload, signature):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å webhook –æ—Ç Lava Top"""
    expected_signature = hmac.new(
        LAVA_WEBHOOK_SECRET.encode('utf-8'),
        payload,
        hashlib.sha256
    ).hexdigest()
    return hmac.compare_digest(signature, expected_signature)

def send_telegram_message(chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, json=data)
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

@app.route('/lava-webhook', methods=['POST'])
def lava_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Lava Top"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        payload = request.get_data()
        signature = request.headers.get('X-Signature')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
        if LAVA_WEBHOOK_SECRET != "your_webhook_secret_here":
            if not verify_webhook_signature(payload, signature):
                return jsonify({"error": "Invalid signature"}), 400
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        data = json.loads(payload)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_status = data.get('status')
        order_id = data.get('order_id')
        amount = data.get('amount')
        currency = data.get('currency')
        metadata = data.get('metadata', {})
        
        user_id = metadata.get('user_id')
        tariff = metadata.get('tariff')
        email = metadata.get('email')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if payment_status == 'success':
            message = f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            message += f"üí∞ <b>–°—É–º–º–∞:</b> {amount} {currency}\n"
            message += f"üÜî <b>–ó–∞–∫–∞–∑:</b> {order_id}\n"
            message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</b> {user_id}\n"
            message += f"üíµ <b>–¢–∞—Ä–∏—Ñ:</b> {tariff}\n"
            message += f"üìß <b>Email:</b> {email}\n\n"
            message += "üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –§–æ—Ä–º—É–ª–µ –£—Å–ø–µ—Ö–∞!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if user_id:
                send_telegram_message(user_id, 
                    "üéâ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –§–û–†–ú–£–õ–ê!\n"
                    "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n\n"
                    "–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –§–æ—Ä–º—É–ª—ã –£—Å–ø–µ—Ö–∞"
                )
                
        elif payment_status == 'failed':
            message = f"‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª</b>\n\n"
            message += f"üí∞ <b>–°—É–º–º–∞:</b> {amount} {currency}\n"
            message += f"üÜî <b>–ó–∞–∫–∞–∑:</b> {order_id}\n"
            message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</b> {user_id}\n"
            message += f"üíµ <b>–¢–∞—Ä–∏—Ñ:</b> {tariff}\n"
            message += f"üìß <b>Email:</b> {email}\n\n"
            message += "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            
        else:
            message = f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
            message += f"üìä <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {payment_status}\n"
            message += f"üí∞ <b>–°—É–º–º–∞:</b> {amount} {currency}\n"
            message += f"üÜî <b>–ó–∞–∫–∞–∑:</b> {order_id}\n"
            message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</b> {user_id}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            send_telegram_message(admin_id, message)
        
        return jsonify({"status": "success"}), 200
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ webhook"""
    return jsonify({"status": "healthy"}), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
