#!/usr/bin/env python3
"""
Webhook handler for Lava Top payments
"""

import json
import hmac
import hashlib
import os
from flask import Flask, request, jsonify
import requests
from datetime import datetime, timedelta
from supabase import create_client, Client
from email_service import email_service

app = Flask(__name__)

# Lava Top webhook secret (–ø–æ–ª—É—á–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Lava Top)
LAVA_WEBHOOK_SECRET = os.getenv('LAVA_WEBHOOK_SECRET', 'your_webhook_secret_here')

# Telegram bot token
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8354723250:AAEWcX6OojEi_fN-RAekppNMVTAsQDU0wvo')

# Admin chat IDs
ADMIN_IDS = [708907063, 7365307696]

# Supabase configuration
SUPABASE_URL = os.getenv('SUPABASE_URL', 'https://uhhsrtmmuwoxsdquimaa.supabase.co')
SUPABASE_KEY = os.getenv('SUPABASE_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8')
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def verify_webhook_signature(payload, signature):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å webhook –æ—Ç Lava Top"""
    expected_signature = hmac.new(
        LAVA_WEBHOOK_SECRET.encode('utf-8'),
        payload,
        hashlib.sha256
    ).hexdigest()
    return hmac.compare_digest(signature, expected_signature)

def send_telegram_message(chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, json=data)
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

@app.route('/lava-webhook', methods=['POST'])
def lava_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Lava Top"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        payload = request.get_data()
        signature = request.headers.get('X-Signature')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
        if LAVA_WEBHOOK_SECRET != "your_webhook_secret_here":
            if not verify_webhook_signature(payload, signature):
                return jsonify({"error": "Invalid signature"}), 400
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        data = json.loads(payload)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_status = data.get('status')
        order_id = data.get('order_id')
        amount = data.get('amount')
        currency = data.get('currency')
        metadata = data.get('metadata', {})
        
        user_id = metadata.get('user_id')
        tariff = metadata.get('tariff')
        email = metadata.get('email')
        bank = metadata.get('bank')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if payment_status == 'success':
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            subscription_id = create_subscription(user_id, email, tariff, amount, currency, order_id, metadata)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ email
            if subscription_id and email:
                send_channel_invitation(user_id, email, tariff, subscription_id)
            
            message = f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            message += f"üí∞ <b>–°—É–º–º–∞:</b> {amount} {currency}\n"
            message += f"üÜî <b>–ó–∞–∫–∞–∑:</b> {order_id}\n"
            message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</b> {user_id}\n"
            message += f"üíµ <b>–¢–∞—Ä–∏—Ñ:</b> {tariff}\n"
            message += f"üìß <b>Email:</b> {email}\n"
            message += f"üè¶ <b>–ë–∞–Ω–∫:</b> {bank}\n\n"
            message += "üéâ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Å—Å—ã–ª–∫–æ–π-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
            if user_id:
                invite_link = "https://t.me/+6SQb4RwwAmZlMWQ6"
                send_telegram_message(user_id, 
                    f"üéâ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                    f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                    f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É:\n\n"
                    f"üîó <a href='{invite_link}'>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É</a>\n\n"
                    f"üìß –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ email - —Ç–∞–º –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n\n"
                    f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –§–æ—Ä–º—É–ª—ã –£—Å–ø–µ—Ö–∞"
                )
                
        elif payment_status == 'failed':
            message = f"‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª</b>\n\n"
            message += f"üí∞ <b>–°—É–º–º–∞:</b> {amount} {currency}\n"
            message += f"üÜî <b>–ó–∞–∫–∞–∑:</b> {order_id}\n"
            message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</b> {user_id}\n"
            message += f"üíµ <b>–¢–∞—Ä–∏—Ñ:</b> {tariff}\n"
            message += f"üìß <b>Email:</b> {email}\n\n"
            message += "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            
        else:
            message = f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑–º–µ–Ω–µ–Ω</b>\n\n"
            message += f"üìä <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {payment_status}\n"
            message += f"üí∞ <b>–°—É–º–º–∞:</b> {amount} {currency}\n"
            message += f"üÜî <b>–ó–∞–∫–∞–∑:</b> {order_id}\n"
            message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</b> {user_id}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            send_telegram_message(admin_id, message)
        
        return jsonify({"status": "success"}), 200
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return jsonify({"error": str(e)}), 500

def create_subscription(user_id, email, tariff, amount, currency, order_id, metadata):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
        if currency == 'RUB':
            price_rub = int(float(amount))
            price_eur = round(float(amount) / 111.0, 2)  # 1 EUR ‚âà 111 RUB
        else:  # EUR
            price_eur = float(amount)
            price_rub = int(float(amount) * 111.0)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        end_date = datetime.now()
        if tariff == '1_month':
            end_date += timedelta(days=30)
        elif tariff == '6_months':
            end_date += timedelta(days=180)
        elif tariff == '12_months':
            end_date += timedelta(days=365)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription_data = {
            'user_id': int(user_id),
            'email': email,
            'tariff': tariff,
            'price_rub': price_rub,
            'price_eur': price_eur,
            'payment_status': 'completed',
            'subscription_status': 'active',
            'end_date': end_date.isoformat(),
            'order_id': order_id,
            'payment_data': metadata
        }
        
        result = supabase.table('subscriptions').insert(subscription_data).execute()
        
        if result.data:
            subscription_id = result.data[0]['id']
            print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {subscription_id}")
            return subscription_id
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return None

def send_channel_invitation(user_id, email, tariff, subscription_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –Ω–∞ email"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        result = supabase.table('subscriptions').select('*').eq('id', subscription_id).execute()
        
        if result.data:
            subscription = result.data[0]
            end_date = datetime.fromisoformat(subscription['end_date'])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            success = email_service.send_channel_invitation(
                email=email,
                user_name=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}",
                tariff=tariff,
                end_date=end_date
            )
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                supabase.table('subscriptions').update({
                    'channel_invite_sent': True,
                    'updated_at': datetime.now().isoformat()
                }).eq('id', subscription_id).execute()
                
                print(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ {email}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ webhook"""
    return jsonify({"status": "healthy"}), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
