#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import json
import base64

def test_mini_apps_data_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini Apps"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini Apps...")
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Mini Apps
    real_data = {
        "step": "final_data",
        "email": "test@example.com",
        "tariff": "1_month",
        "price": 50.0,
        "userId": "123456789",
        "paymentMethod": "card",
        "bank": "sberbank",
        "bankName": "–°–±–µ—Ä–±–∞–Ω–∫"
    }
    
    print(f"üì§ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps: {json.dumps(real_data, indent=2)}")
    
    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç Mini Apps)
    json_string = json.dumps(real_data)
    base64_data = base64.b64encode(json_string.encode('utf-8')).decode('utf-8')
    
    print(f"üì§ Base64 –¥–∞–Ω–Ω—ã–µ: {base64_data}")
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—à –±–æ—Ç)
    decoded_data = base64.b64decode(base64_data).decode('utf-8')
    parsed_data = json.loads(decoded_data)
    
    print(f"üì§ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(parsed_data, indent=2)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if (parsed_data.get('step') == 'final_data' and 
        parsed_data.get('email') and 
        parsed_data.get('tariff') and 
        parsed_data.get('price')):
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Mini Apps —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Mini Apps")
        return False

def test_lava_url_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é URL –¥–ª—è Lava Top"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é URL –¥–ª—è Lava Top...")
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_id = "123456789"
    email = "test@example.com"
    tariff = "1_month"
    price = 50.0
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Lava Top
    LAVA_SHOP_ID = "1b9f3e05-86aa-4102-9648-268f0f586bb1"
    LAVA_PRODUCT_ID = "302ecdcd-1581-45ad-8353-a168f347b8cc"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º order_id
    import time
    order_id = f"order_{user_id}_{int(time.time())}"
    
    # –°–æ–∑–¥–∞–µ–º metadata
    metadata = {
        "user_id": str(user_id),
        "email": email,
        "tariff": tariff
    }
    
    # –°–æ–∑–¥–∞–µ–º URL
    payment_url = f"https://app.lava.top/ru/products/{LAVA_SHOP_ID}/{LAVA_PRODUCT_ID}?currency=RUB&amount={int(price * 100)}&order_id={order_id}&metadata={json.dumps(metadata)}"
    
    print(f"üì§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL: {payment_url}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (LAVA_SHOP_ID in payment_url and 
        LAVA_PRODUCT_ID in payment_url and 
        'currency=RUB' in payment_url and
        'amount=5000' in payment_url and
        'order_id=' in payment_url and
        'metadata=' in payment_url):
        print("‚úÖ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        return True
    else:
        print("‚ùå URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        return False

def test_data_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –®–∞–≥ 1: –î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        "user_id": "123456789",
        "email": "test@example.com",
        "tariff": "1_month",
        "price": 50.0
    }
    
    print(f"üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {json.dumps(user_data, indent=2)}")
    
    # –®–∞–≥ 2: –î–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps
    mini_apps_data = {
        "step": "final_data",
        "email": user_data["email"],
        "tariff": user_data["tariff"],
        "price": user_data["price"],
        "userId": user_data["user_id"]
    }
    
    print(f"üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps: {json.dumps(mini_apps_data, indent=2)}")
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (mini_apps_data["email"] == user_data["email"] and
        mini_apps_data["tariff"] == user_data["tariff"] and
        mini_apps_data["price"] == user_data["price"] and
        mini_apps_data["userId"] == user_data["user_id"]):
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ Mini Apps")
        return True
    else:
        print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Mini Apps
    mini_apps_ok = test_mini_apps_data_processing()
    
    # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL Lava Top
    lava_url_ok = test_lava_url_generation()
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    data_flow_ok = test_data_flow()
    
    print("\n" + "=" * 60)
    print("üéØ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Mini Apps: {'–†–∞–±–æ—Ç–∞–µ—Ç' if mini_apps_ok else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL Lava Top: {'–†–∞–±–æ—Ç–∞–µ—Ç' if lava_url_ok else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {'–†–∞–±–æ—Ç–∞–µ—Ç' if data_flow_ok else '–û—à–∏–±–∫–∞'}")
    
    if all([mini_apps_ok, lava_url_ok, data_flow_ok]):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üì± –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!")
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ:")
        print("1. Railway –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("2. Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("3. API endpoint –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("4. –ë–æ—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        if not mini_apps_ok:
            print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö Mini Apps")
        if not lava_url_ok:
            print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π URL Lava Top")
        if not data_flow_ok:
            print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ—Ç–æ–∫–æ–º –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()
