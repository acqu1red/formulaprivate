#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ bot_webhook.py
"""

import sys
import os

def test_syntax():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å bot_webhook.py"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å bot_webhook.py...")
        
        with open('bot_webhook.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–±—É–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
        compile(content, 'bot_webhook.py', 'exec')
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True
        
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üìã –°—Ç—Ä–æ–∫–∞: {e.lineno}, –ü–æ–∑–∏—Ü–∏—è: {e.offset}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
        return False

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã (–±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)"""
    try:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
        required_modules = [
            'os', 'logging', 'requests', 'json', 'base64', 'asyncio',
            'datetime', 'flask', 'telegram', 'supabase'
        ]
        
        missing_modules = []
        for module in required_modules:
            try:
                __import__(module)
                print(f"‚úÖ {module}")
            except ImportError:
                missing_modules.append(module)
                print(f"‚ùå {module} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if missing_modules:
            print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {missing_modules}")
            print("–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤: {e}")
        return False

def test_variables():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    try:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...")
        
        with open('bot_webhook.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        required_vars = [
            'TELEGRAM_BOT_TOKEN',
            'LAVA_SHOP_ID', 
            'LAVA_PRODUCT_ID',
            'ADMIN_IDS',
            'app'
        ]
        
        missing_vars = []
        for var in required_vars:
            if var not in content:
                missing_vars.append(var)
                print(f"‚ùå {var} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚úÖ {var}")
        
        if missing_vars:
            print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bot_webhook.py")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –°–∏–Ω—Ç–∞–∫—Å–∏—Å
    syntax_ok = test_syntax()
    
    # –¢–µ—Å—Ç 2: –ò–º–ø–æ—Ä—Ç—ã
    imports_ok = test_imports()
    
    # –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    variables_ok = test_variables()
    
    print("\n" + "=" * 50)
    print("üéØ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å: {'–ö–æ—Ä—Ä–µ–∫—Ç–µ–Ω' if syntax_ok else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç—ã: {'–ü—Ä–æ–≤–µ—Ä–µ–Ω—ã' if imports_ok else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {'–û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã' if variables_ok else '–û—à–∏–±–∫–∞'}")
    
    if syntax_ok and variables_ok:
        print("\nüéâ bot_webhook.py –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!")
        print("üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   - Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        print("   - –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
        print("   - –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        if not syntax_ok:
            print("   - –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ")
        if not variables_ok:
            print("   - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

if __name__ == "__main__":
    main()
