from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Updater, CommandHandler, CallbackContext, MessageHandler, filters
from queue import Queue
from telegram.ext import ApplicationBuilder
import pytz
from telegram.ext import CallbackQueryHandler
from supabase import create_client, Client
import asyncio
import json
import uuid
import time
from lava_integration import lava_api

MINIAPP_URL = "https://acqu1red.github.io/tourmalineGG/"
PAYMENT_MINIAPP_URL = "https://acqu1red.github.io/tourmalineGG/payment.html"

# Supabase configuration
SUPABASE_URL = "https://uhhsrtmmuwoxsdquimaa.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –°–ø–∏—Å–æ–∫ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_USERNAMES = [
    "acqu1red",
    "cashm3thod",
]

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
ADMIN_IDS = [
    708907063,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    7365307696,
]

# ---------- Admin notification functions ----------

async def save_message_to_db(user, message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            'telegram_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = supabase.table('users').upsert(user_data).execute()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
        conversation_result = supabase.table('conversations').select('id').eq('user_id', user.id).execute()
        
        if conversation_result.data:
            conversation_id = conversation_result.data[0]['id']
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            conversation_data = {
                'user_id': user.id,
                'status': 'open'
            }
            conversation_result = supabase.table('conversations').insert(conversation_data).execute()
            conversation_id = conversation_result.data[0]['id']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        message_type = 'text'
        content = message.text or ''
        
        if message.photo:
            message_type = 'image'
            content = message.caption or '[–§–æ—Ç–æ]'
        elif message.video:
            message_type = 'video'
            content = message.caption or '[–í–∏–¥–µ–æ]'
        elif message.voice:
            message_type = 'voice'
            content = '[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'
        elif message.document:
            message_type = 'file'
            content = f'[–î–æ–∫—É–º–µ–Ω—Ç] {message.document.file_name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}'
        elif message.sticker:
            message_type = 'sticker'
            content = f'[–°—Ç–∏–∫–µ—Ä] {message.sticker.emoji or "–ë–µ–∑ —ç–º–æ–¥–∑–∏"}'
        elif message.audio:
            message_type = 'audio'
            content = f'[–ê—É–¥–∏–æ] {message.audio.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_data = {
            'conversation_id': conversation_id,
            'sender_id': user.id,
            'content': content,
            'message_type': message_type
        }
        
        supabase.table('messages').insert(message_data).execute()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        raise e



async def handle_all_messages(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç –Ω–∏—Ö"""
    print("üéØ –§—É–Ω–∫—Ü–∏—è handle_all_messages –≤—ã–∑–≤–∞–Ω–∞!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç miniapp
    if update.message and update.message.web_app_data:
        await handle_webapp_data(update, context)
        return
    user = update.effective_user
    message = update.effective_message
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    message_type = "—Ç–µ–∫—Å—Ç"
    if message.photo:
        message_type = "—Ñ–æ—Ç–æ"
    elif message.video:
        message_type = "–≤–∏–¥–µ–æ"
    elif message.voice:
        message_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ"
    elif message.document:
        message_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
    elif message.sticker:
        message_type = "—Å—Ç–∏–∫–µ—Ä"
    elif message.audio:
        message_type = "–∞—É–¥–∏–æ"
    
    print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {message_type} —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.first_name}): {message.text or '[–º–µ–¥–∏–∞]'}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –æ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞
    if (user.id in ADMIN_IDS or (user.username and user.username in ADMIN_USERNAMES)) and context.user_data.get('waiting_for_reply') and context.user_data.get('replying_to'):
        print(f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.id} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {context.user_data['replying_to']}")
        target_user_id = context.user_data['replying_to']
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}",
                parse_mode='HTML'
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await update.effective_message.reply_text(
                f"‚úÖ <b>–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}</b>",
                parse_mode='HTML'
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('waiting_for_reply', None)
            context.user_data.pop('replying_to', None)
            
        except Exception as e:
            await update.effective_message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:</b> {str(e)}",
                parse_mode='HTML'
            )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        await save_message_to_db(user, message)
        print(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: {e}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if user.id not in ADMIN_IDS and (user.username is None or user.username not in ADMIN_USERNAMES):
        print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
        user_info += f"ID: {user.id}\n"
        user_info += f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        user_info += f"–§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        user_info += f"Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        message_type = "–¢–µ–∫—Å—Ç"
        message_content = message.text or ""
        
        if message.photo:
            message_type = "–§–æ—Ç–æ"
            message_content = f"[–§–æ—Ç–æ] {message.caption or '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}"
        elif message.video:
            message_type = "–í–∏–¥–µ–æ"
            message_content = f"[–í–∏–¥–µ–æ] {message.caption or '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}"
        elif message.voice:
            message_type = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            message_content = "[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
        elif message.document:
            message_type = "–î–æ–∫—É–º–µ–Ω—Ç"
            message_content = f"[–î–æ–∫—É–º–µ–Ω—Ç] {message.document.file_name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"
        elif message.sticker:
            message_type = "–°—Ç–∏–∫–µ—Ä"
            message_content = f"[–°—Ç–∏–∫–µ—Ä] {message.sticker.emoji or '–ë–µ–∑ —ç–º–æ–¥–∑–∏'}"
        elif message.audio:
            message_type = "–ê—É–¥–∏–æ"
            message_content = f"[–ê—É–¥–∏–æ] {message.audio.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n{user_info}\n"
        message_text += f"üí¨ <b>–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {message_type}\n"
        message_text += f"üí¨ <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n{message_content}\n\n"
        message_text += f"‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç!</b>"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        keyboard = [
            [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –¥–æ–ª–±–∞–µ–±—É", callback_data=f'reply_to_{user.id}')]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ username
        for admin_username in ADMIN_USERNAMES:
            try:
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_username}")
                await context.bot.send_message(
                    chat_id=f"@{admin_username}",
                    text=message_text,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_username}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_username}: {e}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ @
                try:
                    print(f"üì§ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ @ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_username}")
                    await context.bot.send_message(
                        chat_id=admin_username,
                        text=message_text,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_username}")
                except Exception as e2:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_username}: {e2}")
    else:
        print(f"üë®‚Äçüíº –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user.id} - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")

async def cancel_reply(update: Update, context: CallbackContext) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.id not in ADMIN_IDS and (user.username is None or user.username not in ADMIN_USERNAMES):
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop('waiting_for_reply', None)
    context.user_data.pop('replying_to', None)
    
    await update.effective_message.reply_text(
        "‚ùå <b>–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω</b>",
        parse_mode='HTML'
    )

async def admin_messages(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.id not in ADMIN_IDS and (user.username is None or user.username not in ADMIN_USERNAMES):
        await update.effective_message.reply_text(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!</b>",
            parse_mode='HTML'
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        result = supabase.rpc('get_admin_conversations').execute()
        
        if not result.data:
            await update.effective_message.reply_text(
                "üì≠ <b>–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç</b>",
                parse_mode='HTML'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
        conversations_text = "üì® <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        
        for i, conv in enumerate(result.data[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            user_name = conv.get('username', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{conv["user_id"]}')
            last_message = conv.get('last_message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π')[:50] + '...' if len(conv.get('last_message', '')) > 50 else conv.get('last_message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π')
            message_count = conv.get('message_count', 0)
            
            conversations_text += f"{i}. <b>{user_name}</b> (ID: {conv['user_id']})\n"
            conversations_text += f"   üí¨ {last_message}\n"
            conversations_text += f"   üìä –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        keyboard = []
        for i, conv in enumerate(result.data[:5], 1):  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5
            keyboard.append([InlineKeyboardButton(f"–û—Ç–≤–µ—Ç–∏—Ç—å {i}", callback_data=f'admin_reply_{conv["user_id"]}')])
        
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='admin_refresh')])
        
        markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_message.reply_text(
            conversations_text,
            parse_mode='HTML',
            reply_markup=markup
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.effective_message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {str(e)}",
            parse_mode='HTML'
        )

# ---------- Builders for messages & keyboards ----------

def build_start_content():
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–ª—é–∑ –≤ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ <b>–§–û–†–ú–£–õ–ê</b>, –≥–¥–µ –∑–Ω–∞–Ω–∏—è –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ü–µ–Ω–Ω—ã–µ, –∂–∏–∑–Ω–µ–Ω–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ.\n\n"
        "<b>üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ - –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è 1500‚ÇΩ –∏–ª–∏ ~15$</b>, –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ –ª—é–±–æ–π –≤–∞–ª—é—Ç–µ –∏ –∫—Ä–∏–ø—Ç–µ.\n"
        "<b>‚¨áÔ∏è –ù–∏–∂–µ ‚Äî –∫–Ω–æ–ø–∫–∞. –ñ–º–µ—à—å ‚Äî –∏ –ø—Ä–æ—Ö–æ–¥–∏—à—å —Ç—É–¥–∞, –≥–¥–µ –ª—é–¥–∏ –Ω–µ –Ω–æ—é—Ç, –∞ –µ–±—É—Ç —ç—Ç–æ—Ç –º–∏—Ä –≤ –æ–±–µ —â–µ–∫–∏.</b>"
    )
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", web_app=WebAppInfo(url=PAYMENT_MINIAPP_URL))],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ", callback_data='more_info')],
        [InlineKeyboardButton("üíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", web_app=WebAppInfo(url=MINIAPP_URL))]
    ]
    return text, InlineKeyboardMarkup(keyboard)


def build_payment_content():
    text = (
        "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ë–∞–∑—É\n"
        "1 –º–µ—Å—è—Ü 1500 —Ä—É–±–ª–µ–π\n"
        "6 –º–µ—Å—è—Ü–µ–≤ 8000 —Ä—É–±–ª–µ–π\n"
        "12 –º–µ—Å—è—Ü–µ–≤ 10 000 —Ä—É–±–ª–µ–π\n\n"
        "*—Ü–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö/–µ–≤—Ä–æ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ –Ω—ã–Ω–µ—à–Ω–µ–º—É –∫—É—Ä—Å—É\n"
        "*–æ–ø–ª–∞—á–∏–≤–∞–π –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö/–µ–≤—Ä–æ/—Ä—É–±–ª—è—Ö, –±–æ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–∞–º\n\n"
        "–û–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø\nüëáüëáüëá"
    )
    keyboard = [
        [InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data='pay_1_month')],
        [InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤", callback_data='pay_6_months')],
        [InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤", callback_data='pay_12_months')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return text, InlineKeyboardMarkup(keyboard)


def build_more_info_content():
    text = (
        "–§–û–†–ú–£–õ–ê ‚Äî —ç—Ç–æ –∑–æ–ª–æ—Ç–æ–π —Ä—é–∫–∑–∞–∫ –∑–Ω–∞–Ω–∏–π, —Å –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –º–æ–∂–µ—à—å –≤—ã–ª–µ–∑—Ç–∏ –∏–∑ –ª—é–±–æ–π –∂–æ–ø—ã.\n"
        "–¢—É—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ \"–º–æ—Ç–∏–≤–∞—Ü–∏—è\" –∏ \"—Ä–∞–∑–≤–∏—Ç–∏–µ\", –∞ —Ä–∞–±–æ—á–∏–µ —Å—Ö–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ –Ω–∞–π–¥—ë—à—å –¥–∞–∂–µ –µ—Å–ª–∏ –±—É–¥–µ—à—å –∫–æ–ø–∞—Ç—å –µ–±—É—á–∏–π –î–∞—Ä–∫–Ω–µ—Ç.\n"
        "üß† –ü–æ–¥–∫–∞—Å—Ç—ã —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏ ‚Äî –æ—Ç –ü–†–û–§–ê–ô–õ–ò–ù–ì–ê –¥–æ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –±–∞–±, –æ—Ç –ü–°–ò–•–û–¢–ò–ü–û–í –¥–æ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–ø–µ—Ü—Å–ª—É–∂–±\n"
        "üíâ –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –ë–ò–û–•–ê–ö–ò–ù–ì ‚Äî –ø–æ—á–µ–º—É —Ç–µ–±–µ –ø–ª–æ—Ö–æ –∏ –∫–∞–∫ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –±–æ–≥–æ–º\n"
        "üí∏ –£—Ä–æ–∫–∏ –ø–æ –§–†–û–î–£, –≥–¥–µ –∏–∑ –Ω—É–ª—è –¥–µ–ª–∞–µ—Ç—Å—è $5000+ –≤ –º–µ—Å—è—Ü, –µ—Å–ª–∏ –Ω–µ –µ–±–ª–∞–Ω\n"
        "üß± –ö–∞–∫ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, –æ—Ç—à–∏—Ç—å —Å–∞–º–æ–±–∏—á–µ–≤–∞–Ω–∏–µ –∏ –Ω–∞–∫–æ–Ω–µ—Ü —Å—Ç–∞—Ç—å –º–∞—à–∏–Ω–æ–π, –∞ –Ω–µ –º—è–º–ª–µ–π\n"
        "üìà –ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É ‚Äî –æ—Ç $500/–º–µ—Å –Ω–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–µ\n"
        "‚ö° –°–∫–∞–ª—å–ø–∏–Ω–≥ –∏ –±–∏—Ä–∂–∏ ‚Äî –∫–∞–∫ —Ö–∏—Ç—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É, –Ω–µ —Ç–µ—Ä—è—è –±–∞–±–∫–∏ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—è—Ö\n"
        "üé• –°—Ç—Ä–∏–º—ã –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏, –≥–¥–µ —Ä–∞–∑–±–∏—Ä–∞—é –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: –∑–¥–æ—Ä–æ–≤—å–µ, –¥–µ–Ω—å–≥–∏, –ø—Å–∏—Ö–∏–∫–∞, –º—ã—à–ª–µ–Ω–∏–µ\n\n"
        "–ò —ç—Ç–æ –ª–∏—à—å –º–∞–ª–∞—è —á–∞—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —Ç–µ–±—è –æ–∂–∏–¥–∞–µ—Ç –≤ –§–æ—Ä–º—É–ª–µ.\n"
        "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–∞–Ω–∞–ª. –≠—Ç–æ —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –ø–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç–µ–±—è.\n"
        "–í–æ–∫—Ä—É–≥ —Ç–µ–±—è ‚Äî –º–∏–ª–ª–∏–æ–Ω —Å–ø–æ—Å–æ–±–æ–≤ —Å–¥–µ–ª–∞—Ç—å –±–∞–±–∫–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–¥–µ–π –∏ –Ω–µ –ø–∞—Ö–∞—Ç—å, –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ –ø–∞—à—É—Ç.\n"
        "–¢—ã –±—É–¥–µ—à—å —Å—á–∏—Ç—ã–≤–∞—Ç—å –ª—é–¥–µ–π —Å –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑ –≤–æ–∑–¥—É—Ö–∞ –∏ –Ω–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –∫–æ—Ä–æ–ª—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–Ω–∞–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –æ–Ω–∏ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–æ–π–º—É—Ç.\n\n"
        "–ö–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É ‚¨áÔ∏è. –¢–∞–º –Ω–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–∞. –¢–∞–º –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ç–∞–¥–∞.\n"
        "–†–µ—à–∞–π."
    )
    keyboard = [
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", web_app=WebAppInfo(url=MINIAPP_URL))],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return text, InlineKeyboardMarkup(keyboard)


def build_checkout_content(duration_label: str):
    text = (
        f"ü¶ç –ó–ê–ö–†–´–¢–´–ô –ö–ê–ù–ê–õ \"–û–°–ù–û–í–ê\" –Ω–∞ {duration_label}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∏–¥ –æ–ø–ª–∞—Ç—ã:\n"
        "*–µ—Å–ª–∏ –≤—ã –∏–∑ –£–∫—Ä–∞–∏–Ω—ã, –≤–∫–ª—é—á–∏—Ç–µ vpn\n"
        "*–ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π ‚Äî –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π\n"
        "*–¥–∞–ª–µ–µ ‚Äî –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π –≤ –ú–µ–Ω—é –±–æ—Ç–∞\n"
        "*–æ–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ–∞—Ö 6/12 –º–µ—Å"
    )
    keyboard = [
        [InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞ (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)", callback_data='noop')],
        [InlineKeyboardButton("üíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", web_app=WebAppInfo(url=MINIAPP_URL))],
        [InlineKeyboardButton("üìÑ –î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã", callback_data='noop')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='payment')]
    ]
    return text, InlineKeyboardMarkup(keyboard)


# ---------- Command handlers (send new messages) ----------

# Define the start command handler
async def start(update: Update, context: CallbackContext) -> None:
    text, markup = build_start_content()
    await update.effective_message.reply_text(text, parse_mode='HTML', reply_markup=markup)


# Define the payment command handler
async def payment(update: Update, context: CallbackContext) -> None:
    text, markup = build_payment_content()
    await update.effective_message.reply_text(text, parse_mode='HTML', reply_markup=markup)


# Define the more_info command handler
async def more_info(update: Update, context: CallbackContext) -> None:
    text, markup = build_more_info_content()
    await update.effective_message.reply_text(text, parse_mode='HTML', reply_markup=markup)


# ---------- Callback query handler (edits existing message) ----------

async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'more_info':
        text, markup = build_more_info_content()
        await query.edit_message_text(text=text, parse_mode='HTML', reply_markup=markup)
    elif data == 'back':
        text, markup = build_start_content()
        await query.edit_message_text(text=text, parse_mode='HTML', reply_markup=markup)
    elif data.startswith('reply_to_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å –¥–æ–ª–±–∞–µ–±—É"
        user_id = data.split('_')[2]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await handle_admin_reply(update, context, user_id)
    elif data.startswith('admin_reply_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        user_id = data.split('_')[2]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await handle_admin_reply(update, context, user_id)
    elif data == 'admin_refresh':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        await admin_messages(update, context)
    elif data.startswith('check_payment_'):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        order_id = data.split('_', 2)[2]
        await check_payment_status(update, context, order_id)
    else:
        return

async def handle_webapp_data(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç miniapp"""
    try:
        webapp_data = update.message.web_app_data.data
        user = update.effective_user
        
        print(f"üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç miniapp: {webapp_data}")
        
        # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
        payment_data = json.loads(webapp_data)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        order_id = f"formula_{user.id}_{int(time.time())}"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        tariff = payment_data.get('tariff', '1_month')
        price = payment_data.get('price', 1500)
        email = payment_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')
        bank = payment_data.get('bank', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        tariff_names = {
            '1_month': '1 –º–µ—Å—è—Ü',
            '6_months': '6 –º–µ—Å—è—Ü–µ–≤',
            '12_months': '12 –º–µ—Å—è—Ü–µ–≤'
        }
        description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –§–û–†–ú–£–õ–ê - {tariff_names.get(tariff, tariff)}"
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Lava Top
        payment_result = lava_api.create_payment(
            amount=price,
            order_id=order_id,
            description=description
        )
        
        if "error" in payment_result:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {payment_result['error']}")
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode='HTML'
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_info = {
            "payment_id": payment_result.get("payment_id"),
            "order_id": order_id,
            "user_id": user.id,
            "tariff": tariff,
            "price": price,
            "email": email,
            "bank": bank,
            "status": "pending"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        context.user_data['current_payment'] = payment_info
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = f"üí≥ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Lava Top!</b>\n\n"
        admin_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name}"
        if user.username:
            admin_message += f" (@{user.username})"
        admin_message += f"\nüÜî <b>ID:</b> {user.id}\n"
        admin_message += f"üìß <b>Email:</b> {email}\n"
        admin_message += f"üíµ <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_names.get(tariff, tariff)}\n"
        admin_message += f"üè¶ <b>–ë–∞–Ω–∫:</b> {bank}\n"
        admin_message += f"üí∞ <b>–°—É–º–º–∞:</b> {price} RUB\n"
        admin_message += f"üÜî <b>Order ID:</b> {order_id}\n"
        admin_message += f"üí≥ <b>Payment ID:</b> {payment_result.get('payment_id', '–ù–µ –ø–æ–ª—É—á–µ–Ω')}\n\n"
        admin_message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {update.message.date.strftime('%d.%m.%Y %H:%M:%S')}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    parse_mode='HTML'
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        payment_url = payment_result.get("payment_url")
        if payment_url:
            keyboard = [
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", callback_data=f'check_payment_{order_id}')],
                [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/acqu1red")]
            ]
            markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üíµ <b>–°—É–º–º–∞:</b> {price} RUB\n"
                f"üì¶ <b>–¢–∞—Ä–∏—Ñ:</b> {tariff_names.get(tariff, tariff)}\n"
                f"üÜî <b>Order ID:</b> {order_id}\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                parse_mode='HTML',
                reply_markup=markup
            )
        else:
            await update.message.reply_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode='HTML'
            )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö miniapp: {e}")
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode='HTML'
        )


async def check_payment_status(update: Update, context: CallbackContext, order_id: str) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        payment_info = context.user_data.get('current_payment')
        
        if not payment_info or payment_info.get('order_id') != order_id:
            await query.edit_message_text(
                "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
                parse_mode='HTML'
            )
            return
        
        payment_id = payment_info.get('payment_id')
        if not payment_id:
            await query.edit_message_text(
                "‚ùå <b>ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode='HTML'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ Lava Top API
        status_result = lava_api.get_payment_status(payment_id)
        
        if "error" in status_result:
            await query.edit_message_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
                f"–û—à–∏–±–∫–∞: {status_result['error']}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )
            return
        
        status = status_result.get('status', 'unknown')
        amount = status_result.get('amount', payment_info.get('price', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        
        status_messages = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
            'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω',
            'failed': '‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã',
            'expired': '‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ',
            'cancelled': 'üö´ –û—Ç–º–µ–Ω–µ–Ω'
        }
        
        status_text = status_messages.get(status, f'‚ùì –°—Ç–∞—Ç—É—Å: {status}')
        
        keyboard = []
        if status == 'pending':
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'check_payment_{order_id}')])
        keyboard.append([InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/acqu1red")])
        
        markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        await query.edit_message_text(
            f"üìä <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            f"üÜî <b>Order ID:</b> {order_id}\n"
            f"üí≥ <b>Payment ID:</b> {payment_id}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {amount} RUB\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {update.effective_message.date.strftime('%d.%m.%Y %H:%M:%S')}",
            parse_mode='HTML',
            reply_markup=markup
        )
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if status == 'paid':
            admin_message = f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!</b>\n\n"
            admin_message += f"üÜî <b>Order ID:</b> {order_id}\n"
            admin_message += f"üí≥ <b>Payment ID:</b> {payment_id}\n"
            admin_message += f"üí∞ <b>–°—É–º–º–∞:</b> {amount} RUB\n"
            admin_message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {update.effective_user.first_name}"
            if update.effective_user.username:
                admin_message += f" (@{update.effective_user.username})"
            admin_message += f"\nüÜî <b>User ID:</b> {update.effective_user.id}\n\n"
            admin_message += f"‚è∞ <b>–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã:</b> {update.effective_message.date.strftime('%d.%m.%Y %H:%M:%S')}"
            
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=admin_message,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await query.edit_message_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode='HTML'
        )


async def handle_admin_reply(update: Update, context: CallbackContext, user_id: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å –¥–æ–ª–±–∞–µ–±—É' –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    admin_user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if admin_user.id not in ADMIN_IDS and (admin_user.username is None or admin_user.username not in ADMIN_USERNAMES):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ö–æ—á–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    context.user_data['replying_to'] = user_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    reply_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}</b>\n\n"
    reply_text += "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç. –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
    reply_text += "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
    
    await query.edit_message_text(text=reply_text, parse_mode='HTML')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    context.user_data['waiting_for_reply'] = True


# ---------- App bootstrap ----------

# Main function to start the bot
def main() -> None:
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ ID: {ADMIN_IDS}")
    print(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ username: {ADMIN_USERNAMES}")
    
    application = ApplicationBuilder().token("8354723250:AAEWcX6OojEi_fN-RAekppNMVTAsQDU0wvo").build()

    print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("payment", payment))
    application.add_handler(CommandHandler("more_info", more_info))
    application.add_handler(CommandHandler("cancel", cancel_reply))
    application.add_handler(CommandHandler("messages", admin_messages))
    application.add_handler(CallbackQueryHandler(button))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç –Ω–∏—Ö)
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_all_messages))
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

    print("üîÑ –ó–∞–ø—É—Å–∫ polling...")
    application.run_polling()


if __name__ == '__main__':
    main()
