#!/usr/bin/env python3
"""
Telegram Bot with polling for local development - LAVA TOP API v2 + Support
"""

import os
import json
import time
import aiohttp
import base64
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.constants import ParseMode
from supabase import create_client, Client

# === TELEGRAM CONFIG ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7593794536:AAGSiEJolK1O1H5LMtHxnbygnuhTDoII6qc")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "708907063,7365307696").split(",") if x.strip()]

# === LAVA TOP API CONFIG ===
LAVA_TOP_API_BASE = os.getenv("LAVA_TOP_API_BASE", "https://gate.lava.top")
LAVA_TOP_API_KEY = os.getenv("LAVA_TOP_API_KEY", "whjKvjpi2oqAjTOwfbt0YUkulXCxjU5PWUJDxlQXwOuhOCNSiRq2jSX7Gd2Zihav")

# === OFFER IDs ===
OFFER_MAP = {
    "basic": os.getenv("LAVA_OFFER_ID_BASIC", ""),
    "pro": os.getenv("LAVA_OFFER_ID_PRO", ""),
    "vip": os.getenv("LAVA_OFFER_ID_VIP", ""),
    "1_month": os.getenv("LAVA_OFFER_ID_BASIC", ""),  # –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
}

# === CHANNEL/INVITES ===
PRIVATE_CHANNEL_ID = int(os.getenv("PRIVATE_CHANNEL_ID", "-1001234567890"))

# === MINI APPS ===
PAYMENT_MINIAPP_URL = os.getenv("PAYMENT_MINIAPP_URL", "https://acqu1red.github.io/formulaprivate/payment.html")
MINIAPP_URL = "https://acqu1red.github.io/formulaprivate/?type=support"

# === SUPABASE CONFIG ===
SUPABASE_URL = os.getenv("SUPABASE_URL", "https://uhhsrtmmuwoxsdquimaa.supabase.co")
SUPABASE_KEY = os.getenv("SUPABASE_KEY", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –°–ø–∏—Å–æ–∫ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_USERNAMES = [
    "acqu1red",
    "cashm3thod",
]

def _method_by_bank_and_currency(bank: str, currency: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –ø–æ –±–∞–Ω–∫—É –∏ –≤–∞–ª—é—Ç–µ"""
    bank = (bank or "russian").lower()
    currency = (currency or "RUB").upper()
    if currency == "RUB":
        return "BANK131"
    # –¥–ª—è –∑–∞–≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –≤–∞–ª—é—Ç - –ø–æ–¥—Å—Ç–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    return "UNLIMINT"  # –ª–∏–±–æ PAYPAL/STRIPE, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –∫–∞–±–∏–Ω–µ—Ç–µ

async def create_lava_top_invoice(*, email: str, tariff: str, price: int,
                                  bank: str, currency: str = "RUB", user_id: int = 0, chat_id: int = 0) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ LAVA TOP API v2"""
    assert LAVA_TOP_API_KEY, "LAVA_TOP_API_KEY is required"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º offerId –ø–æ —Ç–∞—Ä–∏—Ñ—É
    offer_id = OFFER_MAP.get((tariff or "basic").lower())
    if not offer_id:
        raise RuntimeError(f"No offerId for tariff={tariff}")

    url = f"{LAVA_TOP_API_BASE.rstrip('/')}/api/v2/invoice"
    headers = {
        "X-Api-Key": LAVA_TOP_API_KEY,
        "Accept": "application/json",
        "Content-Type": "application/json",
    }
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ user_id –∏ chat_id
    metadata = {}
    if user_id:
        metadata["user_id"] = str(user_id)
    if chat_id:
        metadata["chat_id"] = str(chat_id)
    
    payload = {
        "email": email,
        "offerId": offer_id,
        "currency": currency,
        "paymentMethod": _method_by_bank_and_currency(bank, currency),
        "buyerLanguage": "RU"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º metadata –µ—Å–ª–∏ –µ—Å—Ç—å
    if metadata:
        payload["metadata"] = metadata
    
    async with aiohttp.ClientSession() as s:
        async with s.post(url, headers=headers, json=payload) as r:
            txt = await r.text()
            if r.status != 200:
                raise RuntimeError(f"Lava TOP {r.status}: {txt}")
            data = json.loads(txt)
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ
            pay_url = next((data.get(k) for k in ("payUrl","invoiceUrl","paymentUrl","url","link") if data.get(k)), None)
            if not pay_url:
                raise RuntimeError(f"No payment URL in response: {data}")
            return pay_url

async def _send_invite_on_success(application: Application, user_id: int, chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    try:
        # –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –∂–∏–≤—ë—Ç 1 –¥–µ–Ω—å
        expire_date = int(time.time()) + 86400
        invite = await application.bot.create_chat_invite_link(
            chat_id=PRIVATE_CHANNEL_ID,
            name=f"paid_{user_id}_{int(time.time())}",
            expire_date=expire_date,
            member_limit=1,
            creates_join_request=False
        )

        text = (
            "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n{invite.invite_link}\n\n"
            "–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º."
        )
        
        await application.bot.send_message(chat_id=chat_id or user_id, text=text)
        print(f"[_send_invite_on_success] Invite sent to {chat_id or user_id}")
        
    except Exception as e:
        print(f"[_send_invite_on_success] Failed to send invite to {chat_id or user_id}: {e}")

# === SUPABASE FUNCTIONS ===

async def save_message_to_db(user, message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            'telegram_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = supabase.table('users').upsert(user_data).execute()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
        conversation_result = supabase.table('conversations').select('id').eq('user_id', user.id).execute()
        
        if conversation_result.data:
            conversation_id = conversation_result.data[0]['id']
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            conversation_data = {
                'user_id': user.id,
                'status': 'open'
            }
            conversation_result = supabase.table('conversations').insert(conversation_data).execute()
            conversation_id = conversation_result.data[0]['id']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        message_type = 'text'
        content = message.text or ''
        
        if message.photo:
            message_type = 'image'
            content = message.caption or '[–§–æ—Ç–æ]'
        elif message.video:
            message_type = 'video'
            content = message.caption or '[–í–∏–¥–µ–æ]'
        elif message.voice:
            message_type = 'voice'
            content = '[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'
        elif message.document:
            message_type = 'file'
            content = f'[–î–æ–∫—É–º–µ–Ω—Ç] {message.document.file_name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}'
        elif message.sticker:
            message_type = 'sticker'
            content = f'[–°—Ç–∏–∫–µ—Ä] {message.sticker.emoji or "–ë–µ–∑ —ç–º–æ–¥–∑–∏"}'
        elif message.audio:
            message_type = 'audio'
            content = f'[–ê—É–¥–∏–æ] {message.audio.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"}'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_data = {
            'conversation_id': conversation_id,
            'sender_id': user.id,
            'content': content,
            'message_type': message_type
        }
        
        supabase.table('messages').insert(message_data).execute()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        raise e

# Telegram bot handlers
async def start_command(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    print(f"üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –≤ —á–∞—Ç–µ {chat_id}")
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Formula Private Channel!\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", web_app=WebAppInfo(url=PAYMENT_MINIAPP_URL))],
        [InlineKeyboardButton("üíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", web_app=WebAppInfo(url=MINIAPP_URL))]
    ])
    
    await update.message.reply_text(welcome_text, reply_markup=keyboard)

async def handle_web_app_data(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App"""
    try:
        if not update.message or not update.message.web_app_data:
            return
            
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        print(f"üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App (–æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ base64)
        raw_data = update.message.web_app_data.data
        try:
            decoded_data = base64.b64decode(raw_data).decode('utf-8')
            payment_data = json.loads(decoded_data)
            print(f"üì± –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (base64): {payment_data}")
        except Exception as decode_error:
            print(f"üì± –û—à–∏–±–∫–∞ base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {decode_error}")
            # Fallback: –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π JSON
            try:
                payment_data = json.loads(raw_data)
                print(f"üì± –î–∞–Ω–Ω—ã–µ (–ø—Ä—è–º–æ–π JSON): {payment_data}")
            except Exception as json_error:
                print(f"üì± –û—à–∏–±–∫–∞ JSON –ø–∞—Ä—Å–∏–Ω–≥–∞: {json_error}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payment_data
        if isinstance(payment_data, dict):
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {step: "final_data", data: {...}}
            if "step" in payment_data and payment_data["step"] == "final_data":
                final_data = payment_data.get("data", {})
                email = final_data.get("email", "")
                tariff = final_data.get("tariff", "basic")
                price = int(final_data.get("price", 50))
                bank = final_data.get("bank", "russian")
            else:
                # –ü—Ä—è–º–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
                email = payment_data.get("email", "")
                tariff = payment_data.get("tariff", "basic")
                price = int(payment_data.get("price", 50))
                bank = payment_data.get("bank", "russian")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
            
        print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: email={email}, tariff={tariff}, price={price}, bank={bank}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ LAVA TOP API v2
        try:
            pay_url = await create_lava_top_invoice(
                email=email, 
                tariff=tariff, 
                price=price, 
                bank=bank, 
                user_id=user.id, 
                chat_id=chat_id
            )
            
            text = (
                "‚úÖ <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –ø—Ä–∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å (LAVA TOP)", url=pay_url)]
            ])
            await update.message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            # –õ–æ–≥ –∞–¥–º–∏–Ω–∞–º
            for admin in ADMIN_IDS:
                try:
                    await context.bot.send_message(admin, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
                except:
                    pass
    
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ handle_web_app_data: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_all_messages(update: Update, context) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç –Ω–∏—Ö"""
    print("üéØ –§—É–Ω–∫—Ü–∏—è handle_all_messages –≤—ã–∑–≤–∞–Ω–∞!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç miniapp
    if update.message and update.message.web_app_data:
        await handle_web_app_data(update, context)
        return
    
    user = update.effective_user
    message = update.effective_message
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    message_type = "—Ç–µ–∫—Å—Ç"
    if message.photo:
        message_type = "—Ñ–æ—Ç–æ"
    elif message.video:
        message_type = "–≤–∏–¥–µ–æ"
    elif message.voice:
        message_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ"
    elif message.document:
        message_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
    elif message.sticker:
        message_type = "—Å—Ç–∏–∫–µ—Ä"
    elif message.audio:
        message_type = "–∞—É–¥–∏–æ"
    
    print(f"üîç –ü–æ–ª—É—á–µ–Ω–æ {message_type} —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.first_name}): {message.text or '[–º–µ–¥–∏–∞]'}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –æ–Ω –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–≤–µ—Ç–∞
    if (user.id in ADMIN_IDS or (user.username and user.username in ADMIN_USERNAMES)) and context.user_data.get('waiting_for_reply') and context.user_data.get('replying_to'):
        print(f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.id} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {context.user_data['replying_to']}")
        target_user_id = context.user_data['replying_to']
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{message.text}",
                parse_mode='HTML'
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await update.effective_message.reply_text(
                f"‚úÖ <b>–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}</b>",
                parse_mode='HTML'
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('waiting_for_reply', None)
            context.user_data.pop('replying_to', None)
            
        except Exception as e:
            await update.effective_message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:</b> {str(e)}",
                parse_mode='HTML'
            )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        await save_message_to_db(user, message)
        print(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: {e}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if user.id not in ADMIN_IDS and (user.username is None or user.username not in ADMIN_USERNAMES):
        print(f"üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
        user_info += f"ID: {user.id}\n"
        user_info += f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        user_info += f"–§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        user_info += f"Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        message_type = "–¢–µ–∫—Å—Ç"
        message_content = message.text or ""
        
        if message.photo:
            message_type = "–§–æ—Ç–æ"
            message_content = f"[–§–æ—Ç–æ] {message.caption or '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}"
        elif message.video:
            message_type = "–í–∏–¥–µ–æ"
            message_content = f"[–í–∏–¥–µ–æ] {message.caption or '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}"
        elif message.voice:
            message_type = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            message_content = "[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
        elif message.document:
            message_type = "–î–æ–∫—É–º–µ–Ω—Ç"
            message_content = f"[–î–æ–∫—É–º–µ–Ω—Ç] {message.document.file_name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"
        elif message.sticker:
            message_type = "–°—Ç–∏–∫–µ—Ä"
            message_content = f"[–°—Ç–∏–∫–µ—Ä] {message.sticker.emoji or '–ë–µ–∑ —ç–º–æ–¥–∑–∏'}"
        elif message.audio:
            message_type = "–ê—É–¥–∏–æ"
            message_content = f"[–ê—É–¥–∏–æ] {message.audio.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n{user_info}\n"
        message_text += f"üí¨ <b>–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:</b> {message_type}\n"
        message_text += f"üí¨ <b>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</b>\n{message_content}\n\n"
        message_text += f"‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç!</b>"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        keyboard = [
            [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –¥–æ–ª–±–∞–µ–±—É", callback_data=f'reply_to_{user.id}')]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –ø–æ username
        for admin_username in ADMIN_USERNAMES:
            try:
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_username}")
                await context.bot.send_message(
                    chat_id=f"@{admin_username}",
                    text=message_text,
                    parse_mode='HTML',
                    reply_markup=markup
                )
                print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_username}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @{admin_username}: {e}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ @
                try:
                    print(f"üì§ –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ @ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_username}")
                    await context.bot.send_message(
                        chat_id=admin_username,
                        text=message_text,
                        parse_mode='HTML',
                        reply_markup=markup
                    )
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_username}")
                except Exception as e2:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_username}: {e2}")
    else:
        print(f"üë®‚Äçüíº –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user.id} - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")

async def payment_menu(update: Update, context):
    """–ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", web_app=WebAppInfo(url=PAYMENT_MINIAPP_URL))],
        [InlineKeyboardButton("üíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", web_app=WebAppInfo(url=MINIAPP_URL))]
    ])
    
    text = (
        "üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏."
    )
    
    await update.message.reply_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

async def cancel_reply(update: Update, context) -> None:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.id not in ADMIN_IDS and (user.username is None or user.username not in ADMIN_USERNAMES):
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop('waiting_for_reply', None)
    context.user_data.pop('replying_to', None)
    
    await update.effective_message.reply_text(
        "‚ùå <b>–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω</b>",
        parse_mode='HTML'
    )

async def admin_messages(update: Update, context) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user.id not in ADMIN_IDS and (user.username is None or user.username not in ADMIN_USERNAMES):
        await update.effective_message.reply_text(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!</b>",
            parse_mode='HTML'
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        result = supabase.rpc('get_admin_conversations').execute()
        
        if not result.data:
            await update.effective_message.reply_text(
                "üì≠ <b>–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç</b>",
                parse_mode='HTML'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
        conversations_text = "üì® <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        
        for i, conv in enumerate(result.data[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            user_name = conv.get('username', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{conv["user_id"]}')
            last_message = conv.get('last_message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π')[:50] + '...' if len(conv.get('last_message', '')) > 50 else conv.get('last_message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π')
            message_count = conv.get('message_count', 0)
            
            conversations_text += f"{i}. <b>{user_name}</b> (ID: {conv['user_id']})\n"
            conversations_text += f"   üí¨ {last_message}\n"
            conversations_text += f"   üìä –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        keyboard = []
        for i, conv in enumerate(result.data[:5], 1):  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5
            keyboard.append([InlineKeyboardButton(f"–û—Ç–≤–µ—Ç–∏—Ç—å {i}", callback_data=f'admin_reply_{conv["user_id"]}')])
        
        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='admin_refresh')])
        
        markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_message.reply_text(
            conversations_text,
            parse_mode='HTML',
            reply_markup=markup
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.effective_message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {str(e)}",
            parse_mode='HTML'
        )

async def handle_admin_reply(update: Update, context, user_id: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Ç–≤–µ—Ç–∏—Ç—å –¥–æ–ª–±–∞–µ–±—É' –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    admin_user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if admin_user.id not in ADMIN_IDS and (admin_user.username is None or admin_user.username not in ADMIN_USERNAMES):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ö–æ—á–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    context.user_data['replying_to'] = user_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    reply_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}</b>\n\n"
    reply_text += "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç. –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
    reply_text += "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /cancel"
    
    await query.edit_message_text(text=reply_text, parse_mode='HTML')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    context.user_data['waiting_for_reply'] = True

async def button(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "payment":
        await payment_menu(update, context)
    elif query.data.startswith('reply_to_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å –¥–æ–ª–±–∞–µ–±—É"
        user_id = query.data.split('_')[2]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await handle_admin_reply(update, context, user_id)
    elif query.data.startswith('admin_reply_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        user_id = query.data.split('_')[2]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await handle_admin_reply(update, context, user_id)
    elif query.data == 'admin_refresh':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        await admin_messages(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å polling...")
    print(f"üîë TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN[:20]}...")
    print(f"üîë LAVA_TOP_API_KEY: {LAVA_TOP_API_KEY[:20] if LAVA_TOP_API_KEY else 'NOT SET'}...")
    print(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ ID: {ADMIN_IDS}")
    print(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ username: {ADMIN_USERNAMES}")
    print(f"üì¶ Offer IDs: {OFFER_MAP}")
    
    # –°–æ–∑–¥–∞–µ–º Telegram application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("payment", payment_menu))
    application.add_handler(CommandHandler("cancel", cancel_reply))
    application.add_handler(CommandHandler("messages", admin_messages))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_all_messages))
    application.add_handler(CallbackQueryHandler(button))
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mini Apps
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mini Apps...")
    try:
        application.bot.set_my_commands([
            ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            ("payment", "–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
            ("messages", "–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        ])
        print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")

    print("üîÑ –ó–∞–ø—É—Å–∫ polling...")
    application.run_polling()

if __name__ == "__main__":
    main()
