#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Mini Apps –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
from datetime import datetime

def test_mini_apps_webhook():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Mini Apps"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Mini Apps...")
    
    # –î–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö)
    mini_apps_data = {
        "step": "final_data",
        "email": "test@example.com",
        "tariff": "1_month",
        "price": 50.0,
        "userId": "123456789"
    }
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ webhook –¥–∞–Ω–Ω—ã—Ö (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö)
    webhook_data = {
        "update_id": 123456789,
        "message": {
            "message_id": 1,
            "from": {
                "id": 123456789,
                "first_name": "Test",
                "username": "testuser",
                "is_bot": False
            },
            "chat": {
                "id": 123456789,
                "type": "private"
            },
            "date": 1755091200,
            "web_app_data": {
                "data": json.dumps(mini_apps_data),
                "button_text": "–û–ø–ª–∞—Ç–∏—Ç—å"
            }
        }
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –¥–∞–Ω–Ω—ã–µ:")
    print(json.dumps(webhook_data, indent=2))
    
    try:
        response = requests.post(
            "https://formulaprivate-productionpaymentuknow.up.railway.app/webhook",
            json=webhook_data,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"üì° –û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ Webhook –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return False

def test_webhook_info():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook...")
    
    try:
        response = requests.get("https://formulaprivate-productionpaymentuknow.up.railway.app/webhook-info")
        print(f"‚úÖ Webhook info: {response.status_code}")
        print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {response.text}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç health endpoint"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint...")
    
    try:
        response = requests.get("https://formulaprivate-productionpaymentuknow.up.railway.app/health")
        print(f"‚úÖ Health: {response.status_code} - {response.text}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_api_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoint"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint...")
    
    try:
        data = {
            "user_id": "123456789",
            "email": "test@example.com",
            "tariff": "1_month",
            "price": 50.0
        }
        
        response = requests.post(
            "https://formulaprivate-productionpaymentuknow.up.railway.app/api/create-payment",
            json=data,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"üì° API —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üì° API –æ—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            payment_url = result.get('payment_url')
            if payment_url:
                print(f"‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {payment_url}")
                return True
            else:
                print("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                return False
        else:
            print(f"‚ùå API –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –û—Ç–ª–∞–¥–∫–∞ Mini Apps —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now()}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    tests = [
        ("Health Check", test_health),
        ("Webhook Info", test_webhook_info),
        ("API Endpoint", test_api_endpoint),
        ("Mini Apps Webhook", test_mini_apps_webhook)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        print("-" * 30)
        result = test_func()
        results.append((test_name, result))
        print()
    
    print("=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("=" * 50)
    
    for test_name, result in results:
        status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if result else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        print(f"{test_name}: {status}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    print(f"\nüìà –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º Mini Apps.")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

if __name__ == "__main__":
    main()
