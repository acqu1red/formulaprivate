#!/usr/bin/env python3
"""
Telegram Bot with Lava API integration for Railway deployment
"""

import os
import hmac
import hashlib
import json
import time
import base64
import asyncio
import requests
import logging
from datetime import datetime, timedelta
from urllib.parse import urlencode
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, CallbackContext, filters
from supabase import create_client, Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '7593794536:AAGSiEJolK1O1H5LMtHxnbygnuhTDoII6qc')
ADMIN_IDS = [708907063, 7365307696]

# Supabase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUPABASE_URL = os.getenv('SUPABASE_URL', 'https://uhhsrtmmuwoxsdquimaa.supabase.co')
SUPABASE_KEY = os.getenv('SUPABASE_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoaHNydG1tdXdveHNkcXVpbWFhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ2OTMwMzcsImV4cCI6MjA3MDI2OTAzN30.5xxo6g-GEYh4ufTibaAtbgrifPIU_ilzGzolAdmAnm8')
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# === LAVA API CONFIG ===
LAVA_API_BASE = os.getenv("LAVA_API_BASE", "https://api.lava.ru/business")
LAVA_API_KEY = os.getenv("LAVA_API_KEY", "whjKvjpi2oqAjTOwfbt0YUkulXCxjU5PWUJDxlQXwOuhOCNSiRq2jSX7Gd2Zihav")
LAVA_SHOP_ID = os.getenv("LAVA_SHOP_ID", "1b9f3e05-86aa-4102-9648-268f0f586bb1")
LAVA_SUCCESS_URL = os.getenv("LAVA_SUCCESS_URL", "https://t.me/FormulaPrivateBot")
LAVA_FAIL_URL = os.getenv("LAVA_FAIL_URL", "https://t.me/FormulaPrivateBot")

# –•—É–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π LAVA –ø—Ä–∏—à–ª–µ—Ç —Å—Ç–∞—Ç—É—Å:
PUBLIC_BASE_URL = os.getenv("RAILWAY_STATIC_URL") or os.getenv("PUBLIC_BASE_URL") or "https://formulaprivate-productionpaymentuknow.up.railway.app"
HOOK_URL = f"{PUBLIC_BASE_URL}/lava-webhook" if PUBLIC_BASE_URL else ""

# === CHANNEL/INVITES ===
TARGET_CHANNEL_ID = int(os.getenv("TARGET_CHANNEL_ID", "0"))  # –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890
STATIC_INVITE_LINK = os.getenv("STATIC_INVITE_LINK")  # –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ, —Å–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –î–ª—è –ø–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ (—á–∞—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π LAVA —Ç—Ä–µ–±—É–µ—Ç HMAC; –æ—Å—Ç–∞–≤–ª—è–µ–º –≥–∏–±–∫–æ)
def _lava_signature(body: str, secret: str) -> str:
    return hmac.new(secret.encode("utf-8"), body.encode("utf-8"), hashlib.sha256).hexdigest()

def _lava_headers(body: str) -> dict:
    # –í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É –ø–ª–∞—Ç—ë–∂–µ–∫: Bearer –∏/–∏–ª–∏ HMAC-–ø–æ–¥–ø–∏—Å—å —Ç–µ–ª–∞
    # –û—Å—Ç–∞–≤–ª—è–µ–º –æ–±–∞ ‚Äî –µ—Å–ª–∏ —Ç–≤–æ—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∏, —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç.
    return {
        "Authorization": f"Bearer {LAVA_API_KEY}",
        "Content-Type": "application/json",
        "X-Signature": _lava_signature(body, LAVA_API_KEY),
    }

def lava_post(path: str, payload: dict) -> dict:
    url = f"{LAVA_API_BASE.rstrip('/')}/{path.lstrip('/')}"
    body = json.dumps(payload, ensure_ascii=False, separators=(",", ":"))
    headers = _lava_headers(body)
    print(f"üîß Lava API POST: {url}")
    print(f"üìã Headers: {headers}")
    print(f"üìã Payload: {body}")
    resp = requests.post(url, data=body.encode("utf-8"), headers=headers, timeout=20)
    print(f"üì° Response: {resp.status_code} - {resp.text}")
    try:
        data = resp.json()
    except Exception:
        raise RuntimeError(f"Lava API non-JSON response: {resp.status_code} {resp.text[:200]}")
    if resp.status_code >= 300:
        raise RuntimeError(f"Lava API error {resp.status_code}: {data}")
    return data

def lava_get(path: str, params: dict) -> dict:
    url = f"{LAVA_API_BASE.rstrip('/')}/{path.lstrip('/')}"
    headers = {"Authorization": f"Bearer {LAVA_API_KEY}"}
    print(f"üîß Lava API GET: {url}")
    print(f"üìã Params: {params}")
    resp = requests.get(url, params=params, headers=headers, timeout=20)
    print(f"üì° Response: {resp.status_code} - {resp.text}")
    try:
        data = resp.json()
    except Exception:
        raise RuntimeError(f"Lava API non-JSON response: {resp.status_code} {resp.text[:200]}")
    if resp.status_code >= 300:
        raise RuntimeError(f"Lava API error {resp.status_code}: {data}")
    return data

def create_lava_invoice_api(user_id: int, chat_id: int, email: str, tariff: str, price_rub: int) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ LAVA Business API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç payUrl.
    orderId –ø—Ä–æ—à–∏–≤–∞–µ–º user_id –∏ chat_id, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å —Å–≤—è–∑—å.
    """
    if not (LAVA_API_KEY and LAVA_SHOP_ID):
        raise RuntimeError("LAVA_API_KEY/LAVA_SHOP_ID are not set")

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π orderId: —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ user_id, –∏ chat_id –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    ts = int(time.time())
    order_id = f"order_{user_id}_{chat_id}_{ts}"

    # –í–∞–ª—é—Ç–∞ –∏ —Å—É–º–º–∞ ‚Äî –ø–æ–¥—Å—Ç—Ä–æ–π –ø–æ–¥ —Å–≤–æ–π –∫–µ–π—Å
    payload = {
        "shopId": str(LAVA_SHOP_ID),
        "orderId": order_id,
        "sum": int(price_rub),         # —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –∫–æ–ø–µ–π–∫–∞—Ö/—Ä—É–±–ª—è—Ö ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç API; —á–∞—â–µ —Ä—É–±–ª–∏ —Ü–µ–ª—ã–º
        "currency": "RUB",
        "comment": f"Tariff: {tariff}",
        "hookUrl": HOOK_URL,           # –∫—É–¥–∞ –ø—Ä–∏–¥—ë—Ç –≤–µ–±—Ö—É–∫ –æ–± –æ–ø–ª–∞—Ç–µ
        "successUrl": LAVA_SUCCESS_URL,
        "failUrl": LAVA_FAIL_URL,
        # –õ—é–±—ã–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –Ω–∞–π–¥—ë—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        "metadata": {
            "user_id": str(user_id),
            "chat_id": str(chat_id),
            "email": email,
            "tariff": tariff
        }
    }

    print(f"üîß –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ API: {payload}")
    data = lava_post("/invoice/create", payload)

    # –í –æ—Ç–≤–µ—Ç–µ —É LAVA –æ–±—ã—á–Ω–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –æ–ø–ª–∞—Ç—ã: payUrl / url ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞
    pay_url = data.get("payUrl") or data.get("url") or (data.get("data", {}) or {}).get("payUrl")
    if not pay_url:
        raise RuntimeError(f"Cannot find payUrl in response: {data}")

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å: {pay_url}")
    return pay_url

def create_subscription(user_id, email, tariff, amount, currency, order_id, metadata):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        tariff_durations = {
            '1month': 30,
            '1_month': 30,
            '3months': 90,
            '6months': 180,
            '12months': 365
        }
        
        duration_days = tariff_durations.get(tariff, 30)
        end_date = datetime.utcnow() + timedelta(days=duration_days)
        
        subscription_data = {
            'user_id': str(user_id),
            'email': email,
            'tariff': tariff,
            'amount': amount,
            'currency': currency,
            'order_id': order_id,
            'start_date': datetime.utcnow().isoformat(),
            'end_date': end_date.isoformat(),
            'status': 'active',
            'metadata': metadata
        }
        
        print(f"üìä –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É: {subscription_data}")
        
        result = supabase.table('subscriptions').insert(subscription_data).execute()
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {result}")
        
        return result.data[0]['id'] if result.data else 'unknown'
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return 'error'

def parse_user_from_order(order_id: str) -> tuple[int, int]:
    """
    –ñ–¥—ë–º —Ñ–æ—Ä–º–∞—Ç: order_<user_id>_<chat_id>_<timestamp>
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (user_id, chat_id) –ª–∏–±–æ (0, 0).
    """
    try:
        parts = order_id.split("_")
        return int(parts[1]), int(parts[2])
    except Exception:
        return 0, 0

async def _send_invite_on_success(application: Application, user_id: int, chat_id: int) -> None:
    """
    –ï—Å–ª–∏ –∑–∞–¥–∞–Ω STATIC_INVITE_LINK ‚Äî —à–ª—ë–º –µ—ë.
    –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º –∫–∞–Ω–∞–ª–∞!).
    """
    invite_link = STATIC_INVITE_LINK
    if not invite_link:
        # –°–æ–∑–¥–∞—ë–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ 1 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –∂–∏–≤—ë—Ç 1 –¥–µ–Ω—å.
        expire_date = int(time.time()) + 86400
        res = await application.bot.create_chat_invite_link(
            chat_id=TARGET_CHANNEL_ID,
            name=f"paid_{user_id}_{int(time.time())}",
            expire_date=expire_date,
            member_limit=1
        )
        invite_link = res.invite_link

    text = (
        "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
        f"–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n{invite_link}\n\n"
        "–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º."
    )
    try:
        await application.bot.send_message(chat_id=chat_id or user_id, text=text)
    except Exception as e:
        print(f"[lava-webhook] Failed to send invite to {chat_id or user_id}: {e}")
