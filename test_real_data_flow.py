#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini Apps
"""

import requests
import json
import base64

def test_mini_apps_data_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini Apps"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini Apps...")
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Mini Apps
    real_data = {
        "step": "final_data",
        "email": "test@example.com",
        "tariff": "1_month",
        "price": 50.0,
        "userId": "123456789",
        "paymentMethod": "card",
        "bank": "sberbank",
        "bankName": "–°–±–µ—Ä–±–∞–Ω–∫"
    }
    
    print(f"üì§ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps: {json.dumps(real_data, indent=2)}")
    
    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç Mini Apps)
    json_string = json.dumps(real_data)
    base64_data = base64.b64encode(json_string.encode('utf-8')).decode('utf-8')
    
    print(f"üì§ Base64 –¥–∞–Ω–Ω—ã–µ: {base64_data}")
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—à –±–æ—Ç)
    decoded_data = base64.b64decode(base64_data).decode('utf-8')
    parsed_data = json.loads(decoded_data)
    
    print(f"üì§ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(parsed_data, indent=2)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if (parsed_data.get('step') == 'final_data' and 
        parsed_data.get('email') and 
        parsed_data.get('tariff') and 
        parsed_data.get('price')):
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Mini Apps —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Mini Apps")
        return False

def test_api_with_real_data():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api_data = {
        "user_id": "123456789",
        "email": "test@example.com",
        "tariff": "1_month",
        "price": 50.0
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API: {json.dumps(api_data, indent=2)}")
    
    try:
        response = requests.post(
            "https://formulaprivate-productionpaymentuknow.up.railway.app/api/create-payment",
            json=api_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"üì° API –æ—Ç–≤–µ—Ç: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            payment_url = result.get('payment_url')
            
            if payment_url:
                print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {payment_url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if 'user_id' in payment_url and 'email' in payment_url and 'tariff' in payment_url:
                    print("‚úÖ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    return True
                else:
                    print("‚ùå URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                    return False
            else:
                print("‚ùå URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API –æ—Ç–≤–µ—Ç–µ")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"üì° –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_webhook_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É webhook"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É webhook...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
    telegram_data = {
        "update_id": 123456789,
        "message": {
            "message_id": 1,
            "from": {
                "id": 123456789,
                "is_bot": False,
                "first_name": "Test",
                "username": "testuser"
            },
            "chat": {
                "id": 123456789,
                "type": "private"
            },
            "date": 1234567890,
            "web_app_data": {
                "data": "eyJzdGVwIjogImZpbmFsX2RhdGEiLCAiZW1haWwiOiAidGVzdEBleGFtcGxlLmNvbSIsICJ0YXJpZmYiOiAiMV9tb250aCIsICJwcmljZSI6IDUwLjAsICJ1c2VySWQiOiAiMTIzNDU2Nzg5In0=",
                "button_text": "–û–ø–ª–∞—Ç–∏—Ç—å"
            }
        }
    }
    
    print(f"üì§ –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram: {json.dumps(telegram_data, indent=2)}")
    
    try:
        response = requests.post(
            "https://formulaprivate-productionpaymentuknow.up.railway.app/webhook",
            json=telegram_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"üì° Webhook –æ—Ç–≤–µ—Ç: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Webhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"‚ùå Webhook –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"üì° –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Mini Apps
    mini_apps_ok = test_mini_apps_data_processing()
    
    # –¢–µ—Å—Ç 2: API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    api_ok = test_api_with_real_data()
    
    # –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
    webhook_ok = test_webhook_processing()
    
    print("\n" + "=" * 60)
    print("üéØ –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Mini Apps: {'–†–∞–±–æ—Ç–∞–µ—Ç' if mini_apps_ok else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ API —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {'–†–∞–±–æ—Ç–∞–µ—Ç' if api_ok else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook: {'–†–∞–±–æ—Ç–∞–µ—Ç' if webhook_ok else '–û—à–∏–±–∫–∞'}")
    
    if all([mini_apps_ok, api_ok, webhook_ok]):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!")
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ:")
        print("1. –í –ª–æ–≥–∞—Ö Railway –ø–æ—è–≤–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        print("2. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        print("3. –°—Å—ã–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        if not mini_apps_ok:
            print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö Mini Apps")
        if not api_ok:
            print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å API endpoint")
        if not webhook_ok:
            print("   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π webhook")

if __name__ == "__main__":
    main()
