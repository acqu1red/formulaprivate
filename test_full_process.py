#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç Mini Apps –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞
"""

import requests
import json
from datetime import datetime

def test_full_process():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç Mini Apps –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å...")
        
        # –®–∞–≥ 1: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
        print("üì° –®–∞–≥ 1: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º...")
        test_connection_data = {
            "step": "test_connection",
            "message": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"
        }
        
        response = send_mini_apps_data(test_connection_data)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {response.status_code}")
            return False
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        print("üì° –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email...")
        email_data = {
            "step": "email_data",
            "email": "test@example.com"
        }
        
        response = send_mini_apps_data(email_data)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {response.status_code}")
            return False
        print("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º tariff
        print("üì° –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º tariff...")
        tariff_data = {
            "step": "tariff_data",
            "tariff": "1_month",
            "price": 50.0
        }
        
        response = send_mini_apps_data(tariff_data)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ tariff: {response.status_code}")
            return False
        print("‚úÖ Tariff –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º payment method
        print("üì° –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º payment method...")
        payment_method_data = {
            "step": "payment_method_data",
            "paymentMethod": "card",
            "bank": "russian",
            "bankName": "–ë–∞–Ω–∫ –†–§"
        }
        
        response = send_mini_apps_data(payment_method_data)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ payment method: {response.status_code}")
            return False
        print("‚úÖ Payment method –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        # –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º user ID
        print("üì° –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º user ID...")
        user_id_data = {
            "step": "user_id_data",
            "userId": "123456789"
        }
        
        response = send_mini_apps_data(user_id_data)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ user ID: {response.status_code}")
            return False
        print("‚úÖ User ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        # –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üì° –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        final_data = {
            "step": "final_data",
            "email": "test@example.com",
            "tariff": "1_month",
            "price": 50.0,
            "userId": "123456789"
        }
        
        response = send_mini_apps_data(final_data)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            return False
        print("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        return False

def send_mini_apps_data(data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini Apps –≤ webhook"""
    mini_apps_data = json.dumps(data)
    
    webhook_data = {
        "update_id": int(datetime.now().timestamp()),
        "message": {
            "message_id": 1,
            "from": {
                "id": 123456789,
                "first_name": "Test",
                "username": "testuser",
                "is_bot": False
            },
            "chat": {
                "id": 123456789,
                "type": "private"
            },
            "date": int(datetime.now().timestamp()),
            "web_app_data": {
                "data": mini_apps_data,
                "button_text": "–û–ø–ª–∞—Ç–∏—Ç—å"
            }
        }
    }
    
    response = requests.post(
        "https://formulaprivate-productionpaymentuknow.up.railway.app/webhook",
        json=webhook_data,
        headers={"Content-Type": "application/json"}
    )
    
    return response

if __name__ == '__main__':
    success = test_full_process()
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
